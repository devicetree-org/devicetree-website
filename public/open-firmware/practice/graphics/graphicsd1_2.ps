%!PS-Adobe-3.0
%%Title: (Graphics \(FM5\))
%%Creator: (FrameMaker5: LaserWriter 8 8.2.2)
%%CreationDate: (13:59 Thursday, October 26, 1995)
%%For: (Ron Hochsprung)
%%Pages: 5
%%DocumentFonts: Times-Bold Times-Roman Times-Italic Courier Courier-Bold Courier-Oblique
%%DocumentNeededFonts: Times-Bold Times-Roman Times-Italic Courier Courier-Bold Courier-Oblique
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%%DocumentMedia: Default 612 792 0 () ()
%ADO_ImageableArea: 14 7 598 784
%%EndComments
userdict begin/dscInfo 5 dict dup begin
/Title(Graphics \(FM5\))def
/Creator(FrameMaker5: LaserWriter 8 8.2.2)def
/CreationDate(13:59 Thursday, October 26, 1995)def
/For(Ron Hochsprung)def
/Pages 1 def
end def end
/md 178 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_customps
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
}bd
/popstatic
{
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div G 8{pop}repeat}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if end
%%EndProlog
%%BeginSetup
md begin
countdictstack[{
%%BeginFeature: *ManualFeed False
1 dict dup /ManualFeed false put setpagedevice
%%EndFeature
}featurecleanup
countdictstack[{
%%BeginFeature: *InputSlot Cassette

%%EndFeature
}featurecleanup
(Ron Hochsprung)setjob
/mT[1 0 0 -1 14 784]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Italic
%%IncludeFont: Courier
%%IncludeFont: Courier-Bold
%%IncludeFont: Courier-Oblique
/f0_1/Times-Bold
:mre
/f0_36 f0_1 36 scf
/f0_24 f0_1 24 scf
/f0_18 f0_1 18 scf
/f0_14 f0_1 14 scf
/f0_12 f0_1 12 scf
/f1_1/Times-Roman
:mre
/f1_24 f1_1 24 scf
/f1_12 f1_1 12 scf
/f1_10 f1_1 10 scf
/f2_1/Times-Italic
:mre
/f2_12 f2_1 12 scf
/f3_1/Courier
:mre
/f3_12 f3_1 12 scf
/f3_10 f3_1 10 scf
/f4_1/Courier-Bold
:mre
/f4_12 f4_1 12 scf
/f4_10 f4_1 10 scf
/f6_1/Courier-Oblique
:mre
/f6_12 f6_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
% Frame PostScript Prolog for use with Macintosh Frame Products 5.0
% Copyright (c) 1986-95 Frame Technology Corp.  All rights reserved.
%%BeginProcSet: "FrameMacDict" 500 7
userdict/FrameMacDict 250 dict put FrameMacDict begin systemdict/setpacking
known{/fMSP currentpacking def true setpacking}if[/fM1/fM18/fM2/fM3/fM4/fMAB
/fM5/fM6/fM8/fM9/fMBC/fMBM/fMC/fMCD/fMCG/fMCK/fMCM/fMCl/fMCO/fMef/fMet/fMeh
/fMew/fMey/fMex/fMei/fMej/fMek/fMel/fMFl/fMGC/fMGL/fMGM/fMIx/fMJB/fMJC/fMJG
/fMJK/fMJM/fMJR/fMJY/fMK/fML1/fMM/fMN/fMNC/fMNg/fMND/fMOx/fMPC/fMPH/fMPt/fMRC
/fMS/fMSJ/fMUC/fMUM/fMUY/fMY/fMdm/fMatrix/fMa2/fMi/fMk/fms/fmBS/fMdp/freq
/sangle/sflipx/sflipy/pflipx/pflipy/xx/yy/xindex/yindex/fM1B/fM0B/fMdc/fMds]{0
def}forall/fML1/languagelevel where{pop languagelevel}{1}ifelse 2 lt def/fMCl
fML1{/statusdict where{pop statusdict/processcolors known{statusdict
/processcolors get exec 1 gt}{F}ifelse}{F}ifelse}{T}ifelse def/FmBD{bind def}
bind def/fmBx{[exch{dup/FrameMacDict eq{pop FrameMacDict}{dup type dup
/arraytype eq exch/packedarraytype eq or{dup xcheck{fmBi}if}if}ifelse}forall]
cvx}FmBD/fmBi{bind fmBx}FmBD fML1{userdict/FrMacBegin{FrameMacDict begin}fmBi
put/FmE{end}FmBD}{/fMdc 6 array def userdict/FrMacBegin{FrameMacDict begin/fMds
currentcolorspace store mark 0 0 0 0 0 currentcolor fMdc astore pop cleartomark
}fmBi put/FmE{fMds setcolorspace mark fMdc aload pop setcolor cleartomark end}
FmBD}ifelse/fMEd 35 dict def/fmPE{fMEd 3 1 roll fmBi put}bind def/T true def/F
false def userdict/fMSuccessfull F put userdict/fMSi F put userdict/fM7 known
not{userdict/fM7 0 put}if/fmXD{exch def}FmBD/FmG/gsave load def/FmR/grestore
load def/fm_l/grestoreall load def/fm_v/save load def/fm_g/setgray load def
/fm_r/setrgbcolor load def/fm_h/sethsbcolor load def/fm_f/fill load def/fm_e
/eofill load def/fm_t/stroke load def/fm_m/imagemask load def/fm_i/image load
def/fm_s/show load def/fm_a/ashow load def/fm_w/widthshow load def/fm_y
/awidthshow load def/RealKshow/kshow load def/fMdm matrix defaultmatrix def
/fMatrix matrix def/fMa2 matrix def/fmSM{fMatrix currentmatrix pop}FmBD/fmRM{
fMatrix setmatrix}FmBD/FmRF{currentpoint 2 copy translate 4 2 roll{-1 1 scale}
if rotate neg exch neg exch translate}FmBD/fmax{2 copy lt{exch}if pop}FmBD/fmin
{2 copy gt{exch}if pop}FmBD systemdict/pdfmark known{/fMAB true def/FmPD
/pdfmark load def/FmPT/fm_s load def currentdistillerparams/CoreDistVersion get
2000 ge{/FmPD2/pdfmark load def/FmPA{mark exch/Dest exch 5 3 roll/View[/XYZ
null 6 -2 roll FmDC exch pop null]/DEST FmPD}FmBD}{/FmPD2/cleartomark load def
/FmPA{pop pop pop}FmBD}ifelse}{/fMAB false def/FmPD/cleartomark load def/FmPD2
/cleartomark load def/FmPT/pop load def/FmPA{pop pop pop}FmBD}ifelse/FmDC{
transform fMdm itransform cvi exch cvi exch}FmBD/FmBx{dup 3 index lt{3 1 roll
exch}if 1 index 4 index lt{4 -1 roll 3 1 roll exch 4 1 roll}if}FmBD/fmgS 32
array def/fMgt 0 def/fMtp 0 def/fmSG{fmgS fMgt get dup null eq{pop fmgS fMgt 10
dict dup 4 1 roll put}if 3 1 roll put}FmBD/fmGG{fMgt -1 -1{fmgS exch get dup
null ne{2 copy exch known{2 copy exch get/_notdef ne{exch get dup exit}if}if}if
pop}for pop}FmBD/gsave{FrameMacDict begin FmG/fMgt fMgt 1 add def fmgS fMgt get
dup null eq{pop}{dup dup{pop/_notdef put dup}forall pop pop}ifelse end}fmPE
/grestore{FrameMacDict begin fMgt fMtp gt{/fMgt fMgt 1 sub def}if FmR null fmCN
end}fmPE/grestoreall{FrameMacDict begin/fMgt fMtp def fm_l null fmCN end}fmPE
/save{FrameMacDict/fm_v get exec FrameMacDict begin/fMgt fMgt 1 add def fmgS
fMgt get dup null eq{pop}{dup dup{pop/_notdef put dup}forall pop pop}ifelse
/fMtp fMgt def end}fmPE/fMND F def/fMCC null fmSG/fMOP F fmSG/fMKO F fmSG/fmRY{
1 exch sub 3 1 roll 1 exch sub 3 1 roll 1 exch sub 3 1 roll 3 copy 2 copy le{
pop}{exch pop}ifelse 2 copy le{pop}{exch pop}ifelse dup dup dup 6 1 roll 4 1
roll 7 1 roll sub 6 1 roll sub 5 1 roll sub 4 1 roll}fmSG/fmkn{2 copy known{get
T}{pop pop false}ifelse}FmBD/fmfp{exch currentfont dup/FontMatrix get exch
/FontInfo fmkn{T}{currentfont/df fmkn{dup/FontInfo fmkn{3 1 roll/FontMatrix get
mtx concatmatrix exch T}{pop pop pop F}ifelse}{pop pop F}ifelse}ifelse{3 -1
roll fmkn{exch 0 3 1 roll dtransform neg exch pop exch pop}{pop exec}ifelse}{
exec}ifelse}FmBD/fmdl{3 index 16 and 0 ne{FmG currentlinewidth 2. div dup
rmoveto currentpoint newpath moveto 2 index 0 rlineto fm_t FmR}if 3 index 24
and 0 ne{FmG currentrgbcolor dup 4 1 roll eq 3 1 roll eq and{1 currentgray sub
setgray}{1 setgray}ifelse 2 index 0 rlineto fm_t FmR FmG 2 index 0 rlineto
strokepath .24 setlinewidth fm_t FmR}{2 index 0 rlineto fm_t 0 0 moveto}ifelse}
FmBD/FmUl{FmG/fM2 fmXD currentpoint/UnderlineThickness{fM2 15 div}fmfp abs dup
setlinewidth/fM1 fmXD 4 index 1 and 0 ne{newpath 2 copy moveto 0
/UnderlinePosition{fM2 10 div neg}fmfp neg rmoveto fmdl}if 4 index 2 and 0 ne{
newpath 2 copy moveto 0/XHeight{FmG newpath 0 0 moveto(x)F charpath flattenpath
pathbbox 4 -1 roll pop pop pop FmR dup 0 eq{pop fM2 2. mul 3. div neg}if}fmfp
2. div rmoveto fmdl}if 4 index 4 and 0 ne{newpath 2 copy moveto 0/CapHeight{FmG
newpath 0 0 moveto(H)F charpath flattenpath pathbbox 4 -1 roll pop pop pop FmR
dup 0 eq{pop fM2 3. mul 4. div neg}if}fmfp fM1 sub rmoveto fmdl}if pop pop pop
pop pop FmR}FmBD/FmTx{/fM3 fmXD/fM2 fmXD/fM1 fmXD 0 32 fM1 fM3 stringwidth pop
fM2 sub fM3 length div sub 0 fM3 fm_y}FmBD/fMN 0 def/fMC 1 def/fMM 2 def/fMY 3
def/fMK 4 def/fMS 5 def/fMNg 0 currenttransfer exec .5 gt def/fMCM fMN def/fMJK
0 def/fMJY 0 def/fMJM 0 def/fMJC 0 def/fMJR 1 def/fMJG 1 def/fMJB 1 def/fMCG 1
def/fMPt null def/fMCK[0 0 0 1 0 0 0]def/fmCH{fML1{14 dict dup begin fMCl{
/HalftoneType 2 def currentcolorscreen[/GraySpotFunction/GrayAngle
/GrayFrequency/BlueSpotFunction/BlueAngle/BlueFrequency/GreenSpotFunction
/GreenAngle/GreenFrequency/RedSpotFunction/RedAngle/RedFrequency]{exch def}
forall}{/HalftoneType 1 def currentscreen[/SpotFunction/Angle/Frequency]{exch
def}forall}ifelse statusdict/checkscreen known{statusdict/accuratescreens get
exec}{F}ifelse/AccurateScreens exch def end}{currenthalftone}ifelse}FmBD/fmSH{
fML1{begin statusdict/checkscreen known{currentdict/AccurateScreens known{
AccurateScreens}{F}ifelse statusdict/setaccuratescreens get exec}if
HalftoneType 1 eq{Frequency Angle currentdict/SpotFunction get setscreen}{
HalftoneType 2 eq{fMCl{RedFrequency RedAngle currentdict/RedSpotFunction get
GreenFrequency GreenAngle currentdict/GreenSpotFunction get BlueFrequency
BlueAngle currentdict/BlueSpotFunction get GrayFrequency GrayAngle currentdict
/GraySpotFunction get setcolorscreen}{GrayFrequency GrayAngle currentdict
/GraySpotFunction get setscreen}ifelse}if}ifelse end}{sethalftone}ifelse}FmBD
/FmCS{14 dict begin/HalftoneType 2 def/AccurateScreens exch def
/GraySpotFunction exch def/GrayAngle exch def/GrayFrequency exch def
/BlueSpotFunction exch def/BlueAngle exch def/BlueFrequency exch def
/GreenSpotFunction exch def/GreenAngle exch def/GreenFrequency exch def
/RedSpotFunction exch def/RedAngle exch def/RedFrequency exch def currentdict
dup end/fMPH exch def fmSH}FmBD/FmSS{5 dict begin/HalftoneType 1 def
/AccurateScreens exch def/SpotFunction exch def/Angle exch def/Frequency exch
def currentdict dup end/fMPH exch def fmSH}FmBD/fMPH fmCH def/fmcp{/FmPr2 exch
cvlit def/FmPr1 exch cvlit def/FmPrn FmPr1 length FmPr2 length add array def
FmPrn 0 FmPr1 putinterval FmPrn FmPr1 length FmPr2 putinterval FmPrn cvx}FmBD
/fmEp{sub dup 0 lt{neg}if .001 le}FmBD/fmQC{2 copy 0 get exch 0 get fmEp{2 copy
1 get exch 1 get fmEp{2 copy 2 get exch 2 get fmEp{3 get exch 3 get fmEp}{pop
pop F}ifelse}{pop pop F}ifelse}{pop pop F}ifelse}FmBD/fmQR{2 copy 4 get exch 0
get fmEp{2 copy 5 get exch 1 get fmEp{6 get exch 2 get fmEp}{pop pop F}ifelse}{
pop pop F}ifelse}FmBD/FmSC{/fMCM fmXD/fMJB fmXD/fMJG fmXD/fMJR fmXD/fMJK fmXD
/fMJY fmXD/fMJM fmXD/fMJC fmXD fmCC}FmBD/FmSP{/fMCM fmXD fmCC}FmBD
/FrameSetSepColors{FrameMacDict begin[exch 1 add 1 roll]/fMSC exch def end}fmBi
def/fmLC{fMSC{exch dup 3 -1 roll fmQC{pop T exit}if}forall dup T ne{pop F}if}
FmBD/fmLR{fMSC{exch dup 3 -1 roll fmQR{pop T exit}if}forall dup T ne{pop F}if}
FmBD/fmLM{fMSC{exch dup 3 -1 roll dup 7 get 3 -1 roll eq{exch pop T exit}{pop}
ifelse}forall dup T ne{pop F}if}FmBD/fmCN{fMND F fMCM fMN ne{/fMOP fmGG{/fMKO
fmGG{pop T}if}if}if dup/fMND exch def{pop pop}{exch dup null ne{exch pop dup
type dup/integertype eq exch/realtype eq or{fm_g}{setcolor}ifelse}{pop{1 fm_g}
if}ifelse}ifelse}FmBD/fill{FrameMacDict begin fMND{newpath}{fm_f}ifelse end}
fmPE/eofill{FrameMacDict begin fMND{newpath}{fm_e}ifelse end}fmPE/stroke{
FrameMacDict begin fMND{newpath}{fm_t}ifelse end}fmPE/imagemask{FrameMacDict
begin fMND{FmG nulldevive fm_m FmR}{fm_m}ifelse end}fmPE/fmNX{load fMND{FmG
fMa2 currentmatrix end nulldevice setmatrix exec currentpoint FrameMacDict/FmR
get exec moveto}{end exec}ifelse}fmBi def/show{FrameMacDict begin/fm_s fmNX}
fmPE/ashow{FrameMacDict begin/fm_a fmNX}fmPE/widthshow{FrameMacDict begin/fm_w
fmNX}fmPE/awidthshow{FrameMacDict begin/fm_y fmNX}fmPE/kshow{FrameMacDict begin
/RealKshow fmNX}fmPE/image{FrameMacDict begin fMCM fMN ne fMCM fMK ne and{FmG
/fMOP fmGG{nulldevice}{fMNg{{pop 0}}{{pop 1}}ifelse settransfer}ifelse/fm_i
load end exec FmR}{/fm_i load end exec}ifelse}fmPE/fMGM T def/fMBM F def
/setcustomcolor where{pop}{/findcmykcustomcolor{0 0 0 4 -1 roll 8 array astore}
fmPE/findrgbcustomcolor{FrameMacDict begin 4 1 roll 3 copy/fmRY fmGG exec 8 4
roll 4 -1 roll 8 array astore end}fmPE/findgraycustomcolor{0 0 0 exch 1 exch
sub exch findcmykcustomcolor}fmPE/findhsbcustomcolor{FrameMacDict begin 4 1
roll gsave fm_h currentrgbcolor grestore 4 -1 roll findrgbcustomcolor end}fmPE
/setcustomcolor{FrameMacDict begin dup type dup/integertype eq exch/realtype eq
or not{1.0}if exch dup/fMCC exch fmSG/fMBM F def fMCM fMN eq{0 4 getinterval
aload pop 4{4 index mul 4 1 roll}repeat fmSK pop}{dup{7 get}stopped{pop 4 get}
if fmLM{exch pop 0 4 getinterval aload pop fMCM fMS eq{fMJK eq exch fMJY eq and
exch fMJM eq and exch fMJC eq and{1 exch sub F}{pop 1 T}ifelse}{5{pop}repeat 1
T}ifelse}{fMCM fMK eq{3 get F}{fMCM fMY eq{2 get F}{fMCM fMM eq{1 get F}{fMCM
fMC eq{0 get F}{pop 0 T}ifelse}ifelse}ifelse}ifelse 3 1 roll mul 1 exch sub
exch}ifelse/fMKO exch fmSG fmCN}ifelse end}fmPE/setoverprint{FrameMacDict begin
/fMOP exch fmSG null fmCN end}fmPE/currentoverprint{FrameMacDict begin/fMOP
fmGG end}fmPE}ifelse/fmCC{fMCM fMN eq{fMGM fML1 or not{[/Pattern[/DeviceCMYK]]
setcolorspace fMCK 0 4 getinterval aload pop fMPt setcolor}{fMCK 3 get 1.0 ge{
fMCG fm_g}{fMAB not fMCl fMGM and and{0 1 3{fMCK exch get 1 fMCG sub mul}for
fmSK}{4 1 6{fMCK exch get fMGM{1 exch sub 1 fMCG sub mul 1 exch sub}{1.0 lt{
fMCG}{1}ifelse}ifelse}for fm_r}ifelse}ifelse}ifelse null/fMKO F fmSG}{fMBM{fMCG
F}{fMCK 0 4 getinterval aload fmLC{fMCM fMS eq{fMJK eq exch fMJY eq and exch
fMJM eq and exch fMJC eq and{fMCG F}{1 T}ifelse}{pop pop pop pop 1 T}ifelse}{
fMCM fMK eq{fMCG 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop F}{fMCM fMY
eq{pop fMCG 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop F}{fMCM fMM eq{pop
pop fMCG 1.0 exch sub mul 1.0 exch sub exch pop F}{fMCM fMC eq{pop pop pop fMCG
1.0 exch sub mul 1.0 exch sub F}{pop pop pop pop 1 T}ifelse}ifelse}ifelse}
ifelse}ifelse}ifelse/fMKO exch fmSG fMGM fML1 or not{[/Pattern[/DeviceGray]]
setcolorspace fMPt}{fMGM not fML1 and{dup 1 lt{pop fMCG}if}if}ifelse}ifelse
fmCN}FmBD/setgray{FrameMacDict begin fMCM fMN eq{F}{fMCM fMK eq{F}{fMCM fMS eq
fMJR 0 eq and fMJG 0 eq and fMJB 0 eq and{F}{pop 1 T}ifelse}ifelse}ifelse/fMKO
exch fmSG fmCN end}fmPE/setrgbcolor{FrameMacDict begin/fMBM F def fMCM fMN eq{
fm_r}{3 copy[4 1 roll]fmLR{fMCM fMS eq{fMJB eq exch fMJG eq and exch fMJR eq
and{0 F}{1 T}ifelse}{pop pop pop 1 T}ifelse}{/fmRY fmGG exec fMCM fMK eq{1.0
exch sub 4 1 roll pop pop pop F}{fMCM fMY eq{pop 1.0 exch sub 3 1 roll pop pop
F}{fMCM fMM eq{pop pop 1.0 exch sub exch pop F}{fMCM fMC eq{pop pop pop 1.0
exch sub F}{pop pop pop pop 1 T}ifelse}ifelse}ifelse}ifelse}ifelse/fMKO exch
fmSG fmCN}ifelse end}fmPE/sethsbcolor{FrameMacDict begin fMCM fMN eq{fm_h}{fm_h
currentrgbcolor setrgbcolor}ifelse end}fmPE/setcmykcolor where{pop/fmSK
/setcmykcolor load def}{/fmSK{4 1 roll 3{3 index add 0 fmax 1 fmin 1 exch sub 3
1 roll}repeat fm_r pop}FmBD}ifelse/currentcmykcolor where{pop}{
/currentcmykcolor{FrameMacDict begin currentrgbcolor/fmRY fmGG exec end}fmPE}
ifelse/setcmykcolor{FrameMacDict begin/fMBM F def fMCM fMN eq{fmSK}{4 copy[5 1
roll]fmLC{fMCM fMS eq{fMJK eq exch fMJY eq and exch fMJM eq and exch fMJC eq
and{0 F}{1 T}ifelse}{pop pop pop pop 1 T}ifelse}{fMCM fMK eq{1.0 exch sub 4 1
roll pop pop pop dup 1.0 ge}{fMCM fMY eq{pop 1.0 exch sub 3 1 roll pop pop dup
1.0 ge}{fMCM fMM eq{pop pop 1.0 exch sub exch pop dup 1.0 ge}{fMCM fMC eq{pop
pop pop 1.0 exch sub dup 1.0 ge}{pop pop pop pop 1 T}ifelse}ifelse}ifelse}
ifelse}ifelse/fMKO exch fmSG fmCN}ifelse end}fmPE/fMFl[0 .1 .3 .5 .7 .9 .97 1<
0f1e3c78f0e1c387><0f87c3e1f0783c1e><cccccccccccccccc><ffff0000ffff0000><814224
1818244281><0102040810204080><8040201008040201>]def fML1{/patScreenDict 7 dict
dup begin<0f1e3c78f0e1c387>[45{pop}{exch pop}.5 2 sqrt]FmBD<0f87c3e1f0783c1e>[
135{pop}{exch pop}.5 2 sqrt]FmBD<cccccccccccccccc>[0{pop}dup .5 2]FmBD<ffff0000
ffff0000>[90{pop}dup .5 2]FmBD<8142241818244281>[45{2 copy lt{exch}if pop}dup
.75 2 sqrt]FmBD<0102040810204080>[45{pop}{exch pop}.875 2 sqrt]FmBD<8040201008
040201>[135{pop}{exch pop}.875 2 sqrt]FmBD end def}{/fMPP 5 dict dup begin<0f87
c3e1f0783c1e>{3 setlinewidth -1 -1 moveto 9 9 lineto fm_t 4 -4 moveto 12 4
lineto fm_t -4 4 moveto 4 12 lineto fm_t}FmBD<0f1e3c78f0e1c387>{3 setlinewidth
-1 9 moveto 9 -1 lineto fm_t -4 4 moveto 4 -4 lineto fm_t 4 12 moveto 12 4
lineto fm_t}FmBD<8142241818244281>{1 setlinewidth -1 9 moveto 9 -1 lineto fm_t
-1 -1 moveto 9 9 lineto fm_t}FmBD<8040201008040201>{1 setlinewidth -1 -1 moveto
9 9 lineto fm_t 4 -4 moveto 12 4 lineto fm_t -4 4 moveto 4 12 lineto fm_t}FmBD<
0102040810204080>{1 setlinewidth -1 9 moveto 9 -1 lineto fm_t -4 4 moveto 4 -4
lineto fm_t 4 12 moveto 12 4 lineto fm_t}FmBD end def/fMPD 15 dict dup begin
/PatternType 1 def/PaintType 2 def/TilingType 3 def/BBox[0 0 8 8]def/XStep 8
def/YStep 8 def/PaintProc{begin fMPP fmBS known{fMPP fmBS get exec}{8 8 T[1 0 0
-1 0 8]fmBS fm_m}ifelse end}FmBD end def}ifelse/fMdp 72 0 fMdm dtransform dup
mul exch dup mul add sqrt def/freq fMdp dup 72 div round dup 0 eq{pop 1}if 8
mul div def/sangle 1 0 fMdm dtransform exch atan def sangle fMa2 rotate fMdm
fMa2 concatmatrix dup 0 get/sflipx exch def 3 get/sflipy exch def fML1{/fmgF{
fMa2 exch get mul 0 lt{-1}{1}ifelse}FmBD}if/fmPM fML1{{dup patScreenDict exch
known{patScreenDict exch get aload pop freq mul 5 2 roll fMa2 currentmatrix 1
get 0 ne{3 -1 roll 90 add 3 1 roll sflipx 1 fmgF sflipy 2 fmgF mul}{sflipx 0
fmgF sflipy 3 fmgF neg mul}ifelse 0 lt{exch pop}{pop}ifelse fMNg{{neg}fmcp}if
bind systemdict/setscreen get exec}{/fmBS fmXD/fM1B 0 def/fM0B 0 def freq 0
fMa2 currentmatrix 1 get 0 ne{90 add/pflipx sflipx 1 fmgF def/pflipy sflipy 2
fmgF def}{/pflipx sflipx 0 fmgF def/pflipy sflipy 3 fmgF neg def}ifelse{pflipy
mul/yy fmXD pflipx mul/xx fmXD/xindex xx 1 add 2 div 8 mul cvi def/yindex yy 1
add 2 div 8 mul cvi def fmBS yindex xindex 8 idiv add get 1 7 xindex 8 mod sub
bitshift and 0 ne fMNg{not}if{/fM1B fM1B 1 add def 1}{/fM0B fM0B 1 add def 0}
ifelse}setscreen fM0B fM0B fM1B add div fMNg{1.0 exch sub}if}ifelse/fMCG exch
def/fMGM F def fmCC}}{/fMPC 8 dict def{dup fMPC exch known{fMPC exch get}{dup
fMPD/fmBS 3 -1 roll put fMPD matrix makepattern dup fMPC 4 -1 roll 3 -1 roll
put}ifelse/fMCG 0 def/fMPt exch def/fMGM F def fmCC}}ifelse FmBD/fmgr{fMGM not{
/fMGM T def fML1{fMPH fmSH}if}if/fMCG exch def fmCC}FmBD/FmP{fMFl exch get dup
type/stringtype eq{fmPM}{fmgr}ifelse}FmBD/FmK{fMCK astore pop/fMBM F def fmCC}
FmBD/FmFB{0 0 0 1 0 0 0 fMCK astore pop/fMCG 0 def/fMBM T def fmCC}FmBD/fMOx
matrix def fMOx currentmatrix pop/FmSO{/FmOs save def fmSM fMOx setmatrix}FmBD
/FmIO{fmRM}FmBD/FmEO{FmOs restore}FmBD/fm3R[{.3 mul add 1}bind{.59 mul add 2}
bind{.11 mul add round cvi fMs exch fMi exch put/fMi fMi 1 add def 0 0}bind]def
/fm31{/fMi 0 def 0 exch 0 exch{exch fm3R exch get exec}forall pop pop fMs}FmBD
/fm41{0 exch 4 exch{exch 1 sub dup 0 eq{pop 4 1 roll 3 index add 255 fmin 255
exch sub .11 mul 3 1 roll 3 index add 255 fmin 255 exch sub .59 mul 3 1 roll 3
index add 255 fmin 255 exch sub .3 mul add add 255 fmin round cvi fMs exch 3
index exch put pop 1 add 4}if}forall pop pop fMs}FmBD fML1{/Fmi{save userdict
/fM7 3 -1 roll put/fM9 F def{{dup length 1 sub/fMGL fmXD/fMBC fmXD/fMNC fmXD
/fMRC fmXD/fMGC fMGL 1 add array def/setcolortransfer where{pop
currentcolortransfer/gryt fmXD/blut fmXD/grnt fmXD/redt fmXD 0 1 fMGL{/fMIx
fmXD/fMUC 1 fMRC fMIx get sub def/fMUM 1 fMNC fMIx get sub def/fMUY 1 fMBC fMIx
get sub def/fMk fMUC fMUM fmin fMUY fmin def/FmU fMk currentundercolorremoval
exec def fMRC fMIx 1 0 fMUC FmU sub fmax sub redt exec put fMNC fMIx 1 0 fMUM
FmU sub fmax sub grnt exec put fMBC fMIx 1 0 fMUY FmU sub fmax sub blut exec
put fMGC fMIx 1 fMk currentblackgeneration exec sub gryt exec put}for{fMGL mul
cvi fMRC exch get}{fMGL mul cvi fMNC exch get}{fMGL mul cvi fMBC exch get}{fMGL
mul cvi fMGC exch get}setcolortransfer{pop 0}setundercolorremoval{}
setblackgeneration/fM9 T def}{0 1 fMGL{fMGC exch dup dup fMRC exch get .3 mul
exch dup fMNC exch get .59 mul exch fMBC exch get .11 mul add add put}for{fMGL
mul cvi fMGC exch get}currenttransfer fmcp settransfer}ifelse}{dup length 1 sub
/fMGL fmXD/fMGC fmXD{fMGL mul cvi fMGC exch get}currenttransfer fmcp
settransfer}ifelse}{{{1 exch sub}currenttransfer fmcp settransfer}if}ifelse/fM5
fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD translate rotate scale{-1 1 scale}if
/fM18 fM8 string def fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]{currentfile
fM18 fM5{readstring}{readhexstring}ifelse pop}fM9{{fM18}{fM18}T 3 colorimage}{
fm_i}ifelse fM7 restore}FmBD}{/Fmi{save userdict/fM7 3 -1 roll put/fM9 F def{{
dup length 1 sub/fMGL fmXD/fMBC fmXD/fMNC fmXD/fMRC fmXD[/Indexed/DeviceRGB
fMGL{dup fMRC exch get exch dup fMNC exch get exch fMBC exch get}]setcolorspace
}{dup length 1 sub/fMGL fmXD/fMGC fmXD[/Indexed/DeviceGray fMGL{fMGC exch get}]
setcolorspace}ifelse}{1 4 index bitshift 1 sub/fMGL fmXD[/Indexed/DeviceGray
fMGL 5 -1 roll{{fMGL div 1 exch sub}}{{fMGL div}}ifelse]setcolorspace}ifelse
/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD translate rotate scale{-1 1 scale
}if/fM18 fM8 string def 7 dict begin/ImageType 1 def/Width fM4 def/Height fM3
def/ImageMatrix[fM4 0 0 fM3 fM4 2 div fM3 2 div]def/DataSource{currentfile fM18
fM5{readstring}{readhexstring}ifelse pop}def/BitsPerComponent fM6 def/Decode[0
fMGL]def currentdict end fm_i fM7 restore}FmBD}ifelse/Fmci{save userdict/fM7 3
-1 roll put/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD/fM18 fM8 string def
/fMs fM18 0 fM18 length 3 idiv getinterval def translate rotate scale{-1 1
scale}if fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]fMCl{{currentfile fM18 fM5
{readstring}{readhexstring}ifelse pop}F 3 colorimage}{{currentfile fM18 fM5{
readstring}{readhexstring}ifelse pop fm31}fm_i}ifelse fM7 restore}FmBD/Fmc4{
save userdict/fM7 3 -1 roll put/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD
/fM18 fM8 string def/fMs fM18 0 fM18 length 4 idiv getinterval def translate
rotate scale{-1 1 scale}if fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]fMCl{{
currentfile fM18 fM5{readstring}{readhexstring}ifelse pop}F 4 colorimage}{{
currentfile fM18 fM5{readstring}{readhexstring}ifelse pop fm41}fm_i}ifelse fM7
restore}FmBD fML1{/fmAn{transform round .5 sub exch round .5 sub exch
itransform}FmBD/fmAc{transform round 1.5 sub exch round 1.5 sub exch itransform
}FmBD/fmDn{dtransform round exch round exch idtransform}FmBD/fmLn{0 dtransform
exch cvi 2 idiv 2 mul .1 add exch idtransform pop}FmBD/FmCv{fmDn 6 2 roll fmDn
6 2 roll fmDn 6 2 roll rcurveto}FmBD}{T setstrokeadjust/fmAn{}FmBD/fmAc{}FmBD
/fmDn{}FmBD/fmLn{}FmBD/FmCv{rcurveto}FmBD}ifelse/FmM{fmAn moveto}FmBD/M{moveto}
FmBD/N{0 rmoveto}FmBD/S{fm_s}FmBD/A{0 exch fm_a}FmBD/W{0 exch 32 exch fm_w}FmBD
/X{0 exch 0 32 5 2 roll fm_y}FmBD/fmQP{fML1 fMGM or not{FmG dup 1 fm_g exec FmR
}if exec}FmBD/FmB{newpath fmAn moveto}FmBD/FmL{rlineto}FmBD/FmAL{fmAn lineto}
FmBD/FmSo{fmLn setlinewidth setlinecap{fm_t}fmQP 0 0 moveto}FmBD/FmS{fmLn
setlinewidth closepath{fm_t}fmQP 0 0 moveto}FmBD/FmDS{fmLn setlinewidth
setlinecap{closepath}if setdash{fm_t}fmQP[]0 setdash 0 0 moveto}FmBD/FmFl{FmG{
fm_e}fmQP FmR}FmBD/fmq{fmDn 4 2 roll fmAn newpath moveto 1 index 0 rlineto 0
exch rlineto neg 0 rlineto closepath}FmBD/FmqP{fmq fmLn setlinewidth{fm_t}fmQP
0 0 moveto}FmBD/FmqF{fmq FmG{fm_f}fmQP FmR}FmBD/FmKp{{currentpoint}stopped{F 5
1 roll}{T 7 3 roll}ifelse fmDn 4 2 roll fmAn newpath moveto 1 index 0 rlineto 0
exch rlineto neg 0 rlineto closepath clip{moveto}{newpath}ifelse}FmBD/FmKb{{
currentpoint}stopped}FmBD/FmKe{clip{newpath}{moveto}ifelse}FmBD/FmAF{FmG
newpath fmAn translate not{0.0 0.0 moveto}if rotate fmDn scale 0.0 0.0 1.0 5 3
roll arc closepath{fm_f}fmQP FmR}FmBD/FmAP{FmG{setdash}if fmLn setlinewidth
setlinecap fmSM newpath 2 index 2 div add exch 3 index 2 div sub exch fmAn 2
index 2 div sub exch 3 index 2 div add exch translate rotate scale 0.0 0.0 1.0
5 3 roll exch arcn{closepath}if fmRM{fm_t}fmQP FmR}FmBD/FmST{FmG fmAn translate
.3 fmLn setlinewidth 0 setlinecap 0 setlinejoin newpath 1 fm_g 0 0 10 0 360 arc
fm_f 0 fm_g 0 0 10 0 360 arc fm_t 36{1 0 moveto 0 0 10 -2.5 2.5 arc fm_f 10
rotate}repeat FmR}FmBD/FmSL{FmG fmAn translate .25 fmLn setlinewidth 0
setlinecap 0 setlinejoin newpath 1 fm_g 0 0 10 0 360 arc fm_f 0 fm_g 10 .5 fmLn
neg .1{0 0 3 -1 roll 0 360 arc fm_t}for FmR}FmBD/FrameEr where{pop}{userdict
/FrameEr(\000)put}ifelse/fMSJ 100 string def/fmXC{userdict/fMSi 2 index put end
{countdictstack userdict begin/showpage{}def/FmDictStackDepth exch def count
/FmStackDepth exch def}if userdict/fMSuccessfull false put currentfile cvx
stopped pop fMSuccessfull not{/$brkpage where{stop}if systemdict/clear get exec
userdict/FrameEr get 0 1 put FrameMacDict begin FmG systemdict/initmatrix get
exec 0 systemdict/setgray get exec clippath{pathbbox}stopped{100 100 512 692}if
exch pop add 2. div newpath moveto(Courier-BoldOblique)findfont 18 scalefont
setfont FrameEr1 fm_s( \()fm_s $error begin errorname 20 string cvs fm_s(, )
fm_s/command load 128 string cvs fm_s end(\))fm_s FrameEr2 print flush
FrameMacDict/fMSJ get{dup currentfile exch{readline}stopped{pop exch pop T}if
not{exit}if(EndFrame4Picture)eq{exit}if}loop grestore end}if userdict
/fMSuccessfull false put FrameMacDict/fmIR get exec}fmBi def/FmEP{save userdict
/fM7 3 -1 roll put fMEd{userdict 3 1 roll put}forall setoverprint{fMN FmSP}if[
/fMef/fMet/fMeh/fMew/fMey/fMex/fMei/fMej/fMek/fMel]{fmXD}forall fMex fMey
translate fMet rotate fMew fMeh scale fMef{-1 1 scale}if 1 fMej fMel sub div 1
fMek fMei sub div scale fMej fMel add 2 div neg fMei fMek add 2 div neg
translate 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit[
]0 setdash newpath fML1 not{F setstrokeadjust}if T fmXC}FmBD/FmPI{newpath 0 0
moveto F fmXC}FmBD/FmPc{save userdict/fM7 3 -1 roll put newpath 3 index neg 3
index neg translate 1 -1 scale 0.0 0.0 moveto T fmXC}FmBD/fmIR{fMSi{fM7 type
/savetype eq{end/FmDictStackDepth where{pop countdictstack FmDictStackDepth sub
dup 0 gt{{end}repeat}{pop}ifelse count FmStackDepth sub dup 0 gt{{pop}repeat}{
pop}ifelse}if fM7 restore}if}if FrameMacDict begin}FmBD userdict
/EndFrame4Picture{userdict/fMSi 3 -1 roll put userdict/fMSuccessfull true put
stop}fmBi put/alphaimage where{pop}{/alphaimage{1 ne{limitcheck}if not{
limitcheck}if pop image}fmPE}ifelse/fmDE{systemdict/initgraphics get exec
clippath{pathbbox}stopped{100 100 512 692}if exch pop add 2. div newpath moveto
(Courier-BoldOblique)findfont 18 scalefont setfont currentpoint 2 copy FrameEr3
fm_s 20 sub 2 copy moveto FrameEr4 fm_s 20 sub 2 copy moveto(\()fm_s statusdict
/jobname get fm_s(\))fm_s 20 sub moveto FrameEr5 fm_s showpage}FmBD/cd where{
dup/cd get/FmRealcd fmXD/cd{FrameMacDict begin FrameEr 0 get 0 ne{fmDE}if
/FmRealcd load end exec}fmBi put}{/endp where{dup/endp get/fMRE fmXD/endp{
FrameMacDict/fMRE get exec FrameEr 0 get 0 ne{FrameMacDict begin currentfile
fMSJ{readline}stopped{pop exch pop true}if pop(%%Trailer)eq{fmDE}if end}if}fmBi
put}if}ifelse systemdict/setpacking known{fMSP setpacking}if end
%%EndProcSet
%%FRMSetup
FrameMacDict begin
/FrameEr1(PostScript error)def
/FrameEr2(A PostScript error occurred. FrameMaker is attempting recovery.)def
/FrameEr3(FrameMaker has detected one or more)def
/FrameEr4(PostScript errors in this document.)def
/FrameEr5(Please check your output.)def
end
%%FRMEndSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 1 of 5)setjob
%%EndPageSetup
gS 0 0 584 777 rC
0 0 :M
FrMacBegin
0 FmP
0 FmSP
FmE
0 0 :M
f0_36 sf
( )S
9 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
168.531 188 M (Open Firmware)S
FmE
9 0 :M
f0_24 sf
( )S
15 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
168.076 229 M (Recommended Practice)S
FmE
15 0 :M
f0_18 sf
( )S
19 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
409.934 229 M (:)S
FmE
20 0 :M
f1_24 sf
( )S
26 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
172.038 291 M (8-bit Graphics Extension)S
FmE
26 0 :M
f1_12 sf
( )S
29 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
247.192 333 M (Version )S
(1.2 \(draft\))S
228.845 358 M (October 26, 1995 1:59 pm)S
173.034 683 M (Published by the Open Firmware Working Group)S
38 350 2 12 FmqF
FmE
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 2 of 5)setjob
%%EndPageSetup
gS 0 0 584 777 rC
29 0 :M
FrMacBegin
0 FmP
0 FmSP
FmE
29 0 :M
f1_10 sf
( )S
31 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 70.667 M -0.269(This document is a voluntary-use recommended practice of the Open Firmware Working Group. The Open Firmware )W
58 81.667 M (Working Group is an ad hoc committee composed of individuals interested in Open Firmware as defined by IEEE )S
58 92.667 M (1275-1994, related standards, and their application to various computer systems.)S
58 113.667 M -0.108(The Open Firmware Working Group is involved both in IEEE sanctioned standards activities, whose final results are )W
58 124.667 M (published by IEEE, and in informal recommendations such as this, which are published on the Internet at:)S
FmE
32 0 :M
f3_10 sf
( )S
38 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
94 145.667 M 0 0 30(http:)FmTx
0 0 150(//playground.sun.com/pub/)FmTx
0 0 6(1)FmTx
0 0 18(275)FmTx
FmE
38 0 :M
f1_10 sf
( )S
40 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 166.667 M (Membership in the Open Firmware Working Group is open to all interested parties. The working group meets at reg-)S
58 177.667 M (ular intervals at various locations. For more information send email to:)S
FmE
40 0 :M
f3_10 sf
( )S
46 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
94 198.667 M 0 0 48(p1275-wg)FmTx
0 0 102(@risc.sps.mot.com)FmTx
FmE
46 0 :M
f0_12 sf
( )S
49 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 242 M (Revision History)S
FmE
49 0 :M
f1_12 sf
( )S
52 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 267 M (Version 1.0)S
16.017 N (Original)S
58 292 M (Version 1.1)S
16.017 N (used template.  minor clean-up.  Added 16-color Text Exten)S
(si)S
(on defaults.)S
58 317 M (Version 1.2)S
16.017 N -0.175(fixed spelling of )W
FmE
52 0 :M
f4_12 sf
( )S
59 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
211.115 317 M 0 0 42(color!)FmTx
FmE
59 0 :M
f1_12 sf
( )S
62 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
253.115 317 M -0.175(, )W
FmE
62 0 :M
f4_12 sf
( )S
69 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
258.94 317 M 0 0 42(color@)FmTx
FmE
69 0 :M
f1_12 sf
( )S
72 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
300.94 317 M -0.175(, added )W
FmE
72 0 :M
f4_12 sf
( )S
79 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
338.242 317 M 0 0 70(dimensions)FmTx
FmE
79 0 :M
f1_12 sf
( )S
82 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
408.242 317 M -0.175(, as per 7/18/95 meeting )W
130 330 M (minor fixes.)S
38 139 2 10 FmqF
38 192 2 31 FmqF
38 284 2 50 FmqF
FmE
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 3 of 5)setjob
%%EndPageSetup
gS 0 0 584 777 rC
82 0 :M
FrMacBegin
0 FmP
0 FmSP
FmE
82 0 :M
f1_12 sf
( )S
85 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 36 M (Open Firmware Recommended Practice)S
104.162 N (8-bit Graphics Extension)S
( )S
(1.2 \(draft\))S
58 756 M (10/26/95)S
419.332 N (3)S
13 64 M ( 1)S
13 76 M ( 2)S
13 88 M ( 3)S
13 100 M ( 4)S
13 112 M ( 5)S
13 124 M ( 6)S
13 136 M ( 7)S
13 148 M ( 8)S
13 160 M ( 9)S
13 172 M (10)S
13 184 M (11)S
13 196 M (12)S
13 208 M (13)S
13 220 M (14)S
13 232 M (15)S
13 244 M (16)S
13 256 M (17)S
13 268 M (18)S
13 280 M (19)S
13 292 M (20)S
13 304 M (21)S
13 316 M (22)S
13 328 M (23)S
13 340 M (24)S
13 352 M (25)S
13 364 M (26)S
13 376 M (27)S
13 388 M (28)S
13 400 M (29)S
13 412 M (30)S
13 424 M (31)S
13 436 M (32)S
13 448 M (33)S
13 460 M (34)S
13 472 M (35)S
13 484 M (36)S
13 496 M (37)S
13 508 M (38)S
13 520 M (39)S
13 532 M (40)S
13 544 M (41)S
13 556 M (42)S
13 568 M (43)S
13 580 M (44)S
13 592 M (45)S
13 604 M (46)S
13 616 M (47)S
13 628 M (48)S
13 640 M (49)S
13 652 M (50)S
13 664 M (51)S
13 676 M (52)S
13 688 M (53)S
13 700 M (54)S
13 712 M (55)S
13 724 M (56)S
13 736 M (57)S
FmE
85 0 :M
f0_14 sf
( )S
88 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 64.333 M (1.  Introduction)S
58 93.333 M (1.1.  Purpose)S
FmE
89 0 :M
f1_12 sf
( )S
92 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 114 M (A set of \"bit-mapped\" graphics methods \(to be implementated by display device packages\) is de-)S
58 127 M (fined by this extension \()S
FmE
92 0 :M
f3_12 sf
( )S
99 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
173.969 127 M 0 0 98(draw-rectangle)FmTx
FmE
99 0 :M
f1_12 sf
( )S
102 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
271.969 127 M (, )S
FmE
102 0 :M
f3_12 sf
( )S
109 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
277.969 127 M 0 0 98(fill-rectangle)FmTx
FmE
109 0 :M
f1_12 sf
( )S
112 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
375.969 127 M (, )S
FmE
112 0 :M
f3_12 sf
( )S
119 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
381.969 127 M 0 0 98(read-rectangle)FmTx
FmE
119 0 :M
f1_12 sf
( )S
122 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
479.969 127 M (\) that are )S
58 140 M (available to Client Programs \(via the )S
FmE
122 0 :M
f3_12 sf
( )S
129 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
237.271 140 M 0 0 77(call-method)FmTx
FmE
129 0 :M
f1_12 sf
( )S
132 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
314.271 140 M ( client callback\) to display and read rectan-)S
58 153 M -0.174(gular areas of the display buffer.  Also defined by this extension are display device package meth-)W
58 166 M (ods \()S
FmE
132 0 :M
f3_12 sf
( )S
139 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
81.66 166 M 0 0 35(color)FmTx
0 0 7(!)FmTx
FmE
139 0 :M
f1_12 sf
( )S
142 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
123.66 166 M (, )S
FmE
142 0 :M
f3_12 sf
( )S
149 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
129.66 166 M 0 0 42(color@)FmTx
FmE
149 0 :M
f1_12 sf
( )S
152 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
171.66 166 M (, )S
FmE
152 0 :M
f3_12 sf
( )S
159 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
177.66 166 M 0 0 70(set-colors)FmTx
FmE
159 0 :M
f1_12 sf
( )S
162 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
247.66 166 M (, )S
FmE
162 0 :M
f3_12 sf
( )S
169 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
253.66 166 M 0 0 70(get-colors)FmTx
FmE
169 0 :M
f1_12 sf
( )S
172 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
323.66 166 M (\) that control the mapping of pixel values )S
58 179 M -0.76(to display colors.)W
-0.76(  A query method \()W
FmE
172 0 :M
f3_12 sf
( )S
179 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
225.964 179 M 0 0 70(dimensions)FmTx
FmE
179 0 :M
f1_12 sf
( )S
182 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
295.964 179 M -0.76(\) is defined that returns the current viewable size )W
58 192 M (of the display.)S
76 217 M -0.042(Note: a Client Program can detect whether the display package implements this exten-)W
76 230 M (sion by doing a )S
FmE
182 0 :M
f3_12 sf
( )S
189 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
152.661 230 M 0 0 35(catch)FmTx
FmE
189 0 :M
f1_12 sf
( )S
192 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
187.661 230 M ( of a )S
FmE
192 0 :M
f3_12 sf
( )S
199 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
211.98 230 M 0 0 77(call-method)FmTx
FmE
199 0 :M
f1_12 sf
( )S
202 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
288.98 230 M ( of )S
FmE
202 0 :M
f3_12 sf
( )S
209 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
304.974 230 M 0 0 56(0 color@)FmTx
FmE
209 0 :M
f1_12 sf
( )S
212 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
360.974 230 M (.  If the package does not )S
76 243 M (implement this extension, an error will be indicated by a non-zero )S
FmE
212 0 :M
f3_12 sf
( )S
219 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
395.213 243 M 0 0 35(throw)FmTx
0 0 7( )FmTx
FmE
219 0 :M
f1_12 sf
( )S
222 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
437.213 243 M (value)S
(.)S
FmE
222 0 :M
f0_14 sf
( )S
225 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 271.333 M (1.2.  Scope)S
FmE
225 0 :M
f1_12 sf
( )S
228 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 292 M (This extension applies to Open Firmware display device packages and to Client programs that re-)S
58 305 M (quire access to these extensions.)S
FmE
228 0 :M
f0_14 sf
( )S
231 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 333.333 M (2.  References and Definitions)S
58 362.333 M (2.1.  References)S
FmE
232 0 :M
f1_12 sf
( )S
235 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 383 M ([1] )S
FmE
235 0 :M
f2_12 sf
( )S
238 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
74.986 383 M (IEEE Std 1275-1994,)S
FmE
238 0 :M
f1_12 sf
( )S
241 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
177.297 383 M ( )S
FmE
241 0 :M
f2_12 sf
( )S
244 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
180.297 383 M (IEEE Standard for Boot \(Initialization Configuration\) Firmware: Core )S
58 396 M (Requirements and Practices)S
FmE
244 0 :M
f1_12 sf
( )S
247 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
193.284 396 M (, published by IEEE.)S
58 421 M ([2]  )S
FmE
247 0 :M
f2_12 sf
( )S
250 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
77.986 421 M (Open Firmware Recommended Practice: 16-color Text Extension)S
FmE
250 0 :M
f1_12 sf
( )S
253 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
393.859 421 M (, published by Open Firm-)S
58 434 M (ware Working Group.)S
FmE
253 0 :M
f0_14 sf
( )S
256 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 462.333 M (2.2.  Definitions)S
FmE
256 0 :M
f0_12 sf
( )S
259 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 483 M (color-number)S
FmE
259 0 :M
f1_12 sf
( )S
262 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
128.638 483 M (:  a value that represents a color.)S
FmE
262 0 :M
f0_12 sf
( )S
265 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 508 M -0.633(display device package)W
FmE
265 0 :M
f1_12 sf
( )S
268 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
173.388 508 M -0.633(:  An Open Firmware package whose )W
FmE
268 0 :M
f4_10 sf
( )S
274 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
350.545 508 M 0 0 78(\"device_type\")FmTx
FmE
274 0 :M
f1_12 sf
( )S
277 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
428.545 508 M -0.633( value is )W
FmE
277 0 :M
f4_10 sf
( )S
283 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
469.633 508 M 0 0 54(\"display\")FmTx
FmE
283 0 :M
f1_12 sf
( )S
286 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
523.633 508 M -0.633( )W
58 521 M (and that implements the methods and properties defined in section 3.7.1 of [1].)S
FmE
286 0 :M
f0_12 sf
( )S
289 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 546 M (pixel-map)S
FmE
289 0 :M
f1_12 sf
( )S
292 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
109.322 546 M -0.402(:  a set of contiguous bytes in memory that represents a rectangular region of pixels that )W
58 559 M (can be drawn to \(or, read from\) the display buffer.)S
FmE
292 0 :M
f0_14 sf
( )S
295 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 587.333 M (3.  Graphics )S
(mo)S
(del)S
FmE
296 0 :M
f1_12 sf
( )S
299 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 608 M -0.739(The model used by this extension is that pixels are represented by 8-bit values \(color-numbers\) that )W
58 621 M -0.6(specify one of 256 colors.  The mapping of a color-number to a particular display color is specified )W
58 634 M (by means of 8-bit R-G-B components.  The )S
FmE
299 0 :M
f3_12 sf
( )S
306 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
269.608 634 M 0 0 42(color!)FmTx
FmE
306 0 :M
f1_12 sf
( )S
309 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
311.608 634 M ( and )S
FmE
309 0 :M
f3_12 sf
( )S
316 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
334.935 634 M 0 0 42(color@)FmTx
FmE
316 0 :M
f1_12 sf
( )S
319 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
376.935 634 M ( methods pass the R-G-B com-)S
58 647 M (ponents via the stack.  The )S
FmE
319 0 :M
f3_12 sf
( )S
326 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
188.957 647 M 0 0 70(set-colors)FmTx
FmE
326 0 :M
f1_12 sf
( )S
329 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
258.957 647 M ( and )S
FmE
329 0 :M
f3_12 sf
( )S
336 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
282.283 647 M 0 0 70(get-colors)FmTx
FmE
336 0 :M
f1_12 sf
( )S
339 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
352.283 647 M ( methods reference a range of color )S
58 660 M -0.203(values by means of a memory area where each color value consists of contiguous bytes where the )W
58 673 M (first byte is the Red component, the second byte is the Green component and the third byte is the )S
58 686 M (Blue component.  A component value of 0 represents absence of that color, while a value of 255 )S
58 699 M (represents full saturation of the component;  i.e., 0,0,0 is black and 255,255,255 is white.  When )S
58 712 M (multiple color values are present, the Red component of the second color value immediately fol-)S
58 725 M (lows the Blue component of the first color value, and so on.)S
38 158 2 38 FmqF
38 235 2 12 FmqF
38 578 2 14 FmqF
FmE
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 4 of 5)setjob
%%EndPageSetup
gS 0 0 584 777 rC
339 0 :M
FrMacBegin
0 FmP
0 FmSP
FmE
339 0 :M
f1_12 sf
( )S
342 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 36 M (8-bit Graphics Extension)S
( )S
(1.2 \(draft\))S
104.162 N (Open Firmware Recommended Practice)S
58 756 M (4)S
419.332 N (10/26/95)S
13 64 M ( 1)S
13 76 M ( 2)S
13 88 M ( 3)S
13 100 M ( 4)S
13 112 M ( 5)S
13 124 M ( 6)S
13 136 M ( 7)S
13 148 M ( 8)S
13 160 M ( 9)S
13 172 M (10)S
13 184 M (11)S
13 196 M (12)S
13 208 M (13)S
13 220 M (14)S
13 232 M (15)S
13 244 M (16)S
13 256 M (17)S
13 268 M (18)S
13 280 M (19)S
13 292 M (20)S
13 304 M (21)S
13 316 M (22)S
13 328 M (23)S
13 340 M (24)S
13 352 M (25)S
13 364 M (26)S
13 376 M (27)S
13 388 M (28)S
13 400 M (29)S
13 412 M (30)S
13 424 M (31)S
13 436 M (32)S
13 448 M (33)S
13 460 M (34)S
13 472 M (35)S
13 484 M (36)S
13 496 M (37)S
13 508 M (38)S
13 520 M (39)S
13 532 M (40)S
13 544 M (41)S
13 556 M (42)S
13 568 M (43)S
13 580 M (44)S
13 592 M (45)S
13 604 M (46)S
13 616 M (47)S
13 628 M (48)S
13 640 M (49)S
13 652 M (50)S
13 664 M (51)S
13 676 M (52)S
13 688 M (53)S
13 700 M (54)S
13 712 M (55)S
13 724 M (56)S
13 736 M (57)S
58 63 M (Rectangular regions of this display buffer are represented by a set of coordinates that specify the )S
58 76 M -0.853(position of the top-left pixel \()W
FmE
342 0 :M
f3_12 sf
( )S
349 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
195.36 76 M 0 0 21(x,y)FmTx
FmE
349 0 :M
f1_12 sf
( )S
352 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
216.36 76 M -0.853(\) and its width and height \()W
FmE
352 0 :M
f3_12 sf
( )S
359 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
340.542 76 M 0 0 28(w,h\))FmTx
FmE
359 0 :M
f1_12 sf
( )S
362 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
368.542 76 M -0.853(.  The top-left pixel of the display )W
58 89 M (has the coordinate )S
FmE
362 0 :M
f3_12 sf
( )S
369 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
148.293 89 M 0 0 21(0,0)FmTx
FmE
369 0 :M
f1_12 sf
( )S
372 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
169.293 89 M (.  Data in memory that represent pixel-maps consist of )S
FmE
372 0 :M
f3_12 sf
( )S
379 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
432.859 89 M 0 0 21(w*h)FmTx
FmE
379 0 :M
f1_12 sf
( )S
382 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
453.859 89 M ( contiguous )S
58 102 M -0.722(bytes, where the first )W
FmE
382 0 :M
f3_12 sf
( )S
389 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
158.728 102 M 0 0 7(w)FmTx
FmE
389 0 :M
f1_12 sf
( )S
392 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
165.728 102 M -0.722( bytes represent the pixels of the first row of the rectangle \(with the first byte )W
58 115 M -0.282(representing the left-most pixel\), the next )W
FmE
392 0 :M
f3_12 sf
( )S
399 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
257.891 115 M 0 0 7(w)FmTx
FmE
399 0 :M
f1_12 sf
( )S
402 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
264.891 115 M -0.282( bytes represent the next row, etc.  Each such byte con-)W
58 128 M (tains the color-number of the corresponding display buffer pixel.)S
FmE
402 0 :M
f0_14 sf
( )S
405 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 156.333 M (4.  Requirements)S
FmE
406 0 :M
f1_12 sf
( )S
409 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 177 M (A display device package that implements this extension )S
FmE
409 0 :M
f2_12 sf
( )S
412 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
333.247 177 M (shall)S
FmE
412 0 :M
f1_12 sf
( )S
415 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
356.582 177 M ( provide all of the following meth-)S
58 190 M (ods:)S
FmE
415 0 :M
f0_14 sf
( )S
418 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 218.333 M (4.1.  Pixel-mapped )S
(gr)S
(aphics )S
(me)S
(thods)S
FmE
418 0 :M
f4_12 sf
( )S
425 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 239 M 0 0 98(draw-rectangle)FmTx
FmE
425 0 :M
f1_12 sf
( )S
428 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
202 239 M ( )S
FmE
428 0 :M
f3_12 sf
( )S
435 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
205 239 M 0 0 126(\( adr x y w h -- \))FmTx
87 N 0 0 7(M)FmTx
FmE
435 0 :M
f1_12 sf
( )S
438 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
94 264 M (Draw a rectangle in the display buffer from a pixel-map.)S
94 289 M -0.833(Displays a rectangular image at pixel location )W
FmE
438 0 :M
f6_12 sf
( )S
445 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
311.075 289 M 0 0 7(x)FmTx
FmE
445 0 :M
f3_12 sf
( )S
452 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
318.075 289 M 0 0 7(,)FmTx
FmE
452 0 :M
f6_12 sf
( )S
459 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
325.075 289 M 0 0 7(y)FmTx
FmE
459 0 :M
f1_12 sf
( )S
462 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
332.075 289 M -0.833( )W
-0.833( )W
-0.833(of size )W
FmE
462 0 :M
f6_12 sf
( )S
469 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
369.39 289 M 0 0 7(w)FmTx
FmE
469 0 :M
f3_12 sf
( )S
476 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
376.39 289 M 0 0 7(,)FmTx
FmE
476 0 :M
f6_12 sf
( )S
483 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
383.39 289 M 0 0 7(h)FmTx
FmE
483 0 :M
f1_12 sf
( )S
486 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
390.39 289 M -0.833( )W
-0.833( fr)W
-0.833(om the pixel-map defined )W
94 302 M -0.705(by )W
FmE
486 0 :M
f6_12 sf
( )S
493 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
108.295 302 M 0 0 21(adr)FmTx
FmE
493 0 :M
f1_12 sf
( )S
496 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
129.295 302 M -0.705(.  )W
FmE
496 0 :M
f6_12 sf
( )S
503 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
136.885 302 M 0 0 7(x)FmTx
FmE
503 0 :M
f3_12 sf
( )S
510 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
143.885 302 M 0 0 7(,)FmTx
FmE
510 0 :M
f6_12 sf
( )S
517 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
150.885 302 M 0 0 7(y)FmTx
FmE
517 0 :M
f1_12 sf
( )S
520 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
157.885 302 M -0.705( are display coordinates \(where )W
FmE
520 0 :M
f3_12 sf
( )S
527 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
307.275 302 M 0 0 21(0,0)FmTx
FmE
527 0 :M
f1_12 sf
( )S
530 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
328.275 302 M -0.705( corresponds to the )W
FmE
530 0 :M
f3_12 sf
( )S
537 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
419.422 302 M 0 0 56(top,left)FmTx
FmE
537 0 :M
f1_12 sf
( )S
540 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
475.422 302 M -0.705( displayed )W
94 315 M (pixel\);  )S
FmE
540 0 :M
f6_12 sf
( )S
547 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
131.321 315 M 0 0 7(w)FmTx
FmE
547 0 :M
f3_12 sf
( )S
554 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
138.321 315 M 0 0 7(,)FmTx
FmE
554 0 :M
f6_12 sf
( )S
561 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
145.321 315 M 0 0 7(h)FmTx
FmE
561 0 :M
f1_12 sf
( )S
564 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
152.321 315 M (  are the width and height of the image.)S
FmE
564 0 :M
f4_12 sf
( )S
571 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 353 M 0 0 98(fill-rectangle)FmTx
FmE
571 0 :M
f3_12 sf
( )S
578 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
202 353 M 0 0 154( \( number x y w h -- \))FmTx
62 N 0 0 7(M)FmTx
FmE
578 0 :M
f1_12 sf
( )S
581 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
94 378 M (Fill a rectangle in the display buffer with a constant color.)S
94 403 M (Fills a rectangular display area, defined by )S
FmE
581 0 :M
f6_12 sf
( )S
588 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
301.237 403 M 0 0 7(x)FmTx
FmE
588 0 :M
f3_12 sf
( )S
595 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
308.237 403 M 0 0 7(,)FmTx
FmE
595 0 :M
f6_12 sf
( )S
602 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
315.237 403 M 0 0 7(y)FmTx
FmE
602 0 :M
f3_12 sf
( )S
609 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
322.237 403 M 0 0 7(,)FmTx
FmE
609 0 :M
f6_12 sf
( )S
616 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
329.237 403 M 0 0 7(w)FmTx
FmE
616 0 :M
f3_12 sf
( )S
623 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
336.237 403 M 0 0 7(,)FmTx
FmE
623 0 :M
f6_12 sf
( )S
630 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
343.237 403 M 0 0 7(h)FmTx
FmE
630 0 :M
f1_12 sf
( )S
633 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
350.237 403 M (  with the color corresponding to )S
FmE
633 0 :M
f6_12 sf
( )S
640 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
94 416 M 0 0 42(number)FmTx
FmE
640 0 :M
f1_12 sf
( )S
643 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
136 416 M (.)S
FmE
643 0 :M
f4_12 sf
( )S
650 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 454 M 0 0 98(read-rectangle)FmTx
FmE
650 0 :M
f3_12 sf
( )S
657 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
202 454 M 0 0 126(\( adr x y w h -- \))FmTx
90 N 0 0 7(M)FmTx
FmE
657 0 :M
f1_12 sf
( )S
660 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
94 479 M (Read a pixel-map from a rectangle in the display buffer.)S
94 504 M (This method copies the 8-bit number values corresponding to the display pixels , defined )S
94 517 M (by )S
FmE
660 0 :M
f6_12 sf
( )S
667 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
109 517 M 0 0 7(x)FmTx
FmE
667 0 :M
f1_12 sf
( )S
670 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
116 517 M (,)S
FmE
670 0 :M
f6_12 sf
( )S
677 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
119 517 M 0 0 7(y)FmTx
FmE
677 0 :M
f1_12 sf
( )S
680 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
126 517 M (,)S
FmE
680 0 :M
f6_12 sf
( )S
687 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
129 517 M 0 0 7(w)FmTx
FmE
687 0 :M
f1_12 sf
( )S
690 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
136 517 M (,)S
FmE
690 0 :M
f6_12 sf
( )S
697 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
139 517 M 0 0 7(h)FmTx
FmE
697 0 :M
f1_12 sf
( )S
700 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
146 517 M ( )S
( in)S
(to the buffer specified by )S
FmE
700 0 :M
f6_12 sf
( )S
707 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
284.94 517 M 0 0 21(adr)FmTx
FmE
707 0 :M
f1_12 sf
( )S
710 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
305.94 517 M (.)S
76 542 M -0.211(Note: for displays that are not in 8-bit per pixel mode, the read-rectangle method is un-)W
76 555 M (defined.  For this reason, it is recommended that displays provide an 8-bit mode and )S
76 568 M (that this mode is used during Open Firmware execution.)S
FmE
710 0 :M
f0_14 sf
( )S
713 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 596.333 M (4.2.  Color-value )S
(sp)S
(ecification )S
(me)S
(thods)S
FmE
714 0 :M
f1_12 sf
( )S
717 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 617 M (The following methods allow a Client program to control the color mapping:)S
FmE
717 0 :M
f4_12 sf
( )S
724 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 642 M 0 0 42(color!)FmTx
FmE
724 0 :M
f3_12 sf
( )S
731 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
202 642 M 0 0 133(\( r g b number -- \))FmTx
83 N 0 0 7(M)FmTx
FmE
731 0 :M
f1_12 sf
( )S
734 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
94 667 M (Set the color corresponding to )S
FmE
734 0 :M
f6_12 sf
( )S
741 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
241.618 667 M 0 0 42(number)FmTx
FmE
741 0 :M
f1_12 sf
( )S
744 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
283.618 667 M ( )S
( )S
(to the value specified by )S
FmE
744 0 :M
f6_12 sf
( )S
751 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
409.905 667 M 0 0 7(r)FmTx
FmE
751 0 :M
f1_12 sf
( )S
754 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
416.905 667 M (,)S
( )S
FmE
754 0 :M
f6_12 sf
( )S
761 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
422.905 667 M 0 0 7(g)FmTx
FmE
761 0 :M
f1_12 sf
( )S
764 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
429.905 667 M (,)S
( )S
FmE
764 0 :M
f6_12 sf
( )S
771 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
435.905 667 M 0 0 7(b)FmTx
FmE
771 0 :M
f1_12 sf
( )S
774 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
442.905 667 M (.)S
FmE
774 0 :M
f4_12 sf
( )S
781 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 692 M 0 0 42(color@)FmTx
FmE
781 0 :M
f3_12 sf
( )S
788 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
202 692 M 0 0 133(\( number -- r g b \))FmTx
83 N 0 0 7(M)FmTx
FmE
788 0 :M
f1_12 sf
( )S
791 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
94 717 M (Read the color value correspoding to )S
FmE
791 0 :M
f6_12 sf
( )S
798 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
273.93 717 M 0 0 42(number)FmTx
FmE
798 0 :M
f1_12 sf
( )S
801 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
315.93 717 M (, returning its )S
FmE
801 0 :M
f6_12 sf
( )S
808 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
383.245 717 M 0 0 7(r)FmTx
FmE
808 0 :M
f3_12 sf
( )S
815 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
390.245 717 M 0 0 7(,)FmTx
FmE
815 0 :M
f6_12 sf
( )S
822 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
397.245 717 M 0 0 7(g)FmTx
FmE
822 0 :M
f3_12 sf
( )S
829 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
404.245 717 M 0 0 7(,)FmTx
FmE
829 0 :M
f6_12 sf
( )S
836 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
411.245 717 M 0 0 7(b)FmTx
FmE
836 0 :M
f1_12 sf
( )S
839 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
418.245 717 M ( )S
( co)S
(mponents.)S
38 209 2 14 FmqF
38 281 2 12 FmqF
38 509 2 12 FmqF
38 587 2 14 FmqF
38 659 2 12 FmqF
38 709 2 12 FmqF
FmE
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 5 of 5)setjob
%%EndPageSetup
gS 0 0 584 777 rC
839 0 :M
FrMacBegin
0 FmP
0 FmSP
FmE
839 0 :M
f1_12 sf
( )S
842 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 36 M (Open Firmware Recommended Practice)S
104.162 N (8-bit Graphics Extension)S
( )S
(1.2 \(draft\))S
58 756 M (10/26/95)S
419.332 N (5)S
13 64 M ( 1)S
13 76 M ( 2)S
13 88 M ( 3)S
13 100 M ( 4)S
13 112 M ( 5)S
13 124 M ( 6)S
13 136 M ( 7)S
13 148 M ( 8)S
13 160 M ( 9)S
13 172 M (10)S
13 184 M (11)S
13 196 M (12)S
13 208 M (13)S
13 220 M (14)S
13 232 M (15)S
13 244 M (16)S
13 256 M (17)S
13 268 M (18)S
13 280 M (19)S
13 292 M (20)S
13 304 M (21)S
13 316 M (22)S
13 328 M (23)S
13 340 M (24)S
13 352 M (25)S
13 364 M (26)S
13 376 M (27)S
13 388 M (28)S
13 400 M (29)S
13 412 M (30)S
13 424 M (31)S
13 436 M (32)S
13 448 M (33)S
13 460 M (34)S
13 472 M (35)S
13 484 M (36)S
13 496 M (37)S
13 508 M (38)S
13 520 M (39)S
13 532 M (40)S
13 544 M (41)S
13 556 M (42)S
13 568 M (43)S
13 580 M (44)S
13 592 M (45)S
13 604 M (46)S
13 616 M (47)S
13 628 M (48)S
13 640 M (49)S
13 652 M (50)S
13 664 M (51)S
13 676 M (52)S
13 688 M (53)S
13 700 M (54)S
13 712 M (55)S
13 724 M (56)S
13 736 M (57)S
FmE
842 0 :M
f4_12 sf
( )S
849 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 63 M 0 0 70(set-colors)FmTx
FmE
849 0 :M
f3_12 sf
( )S
856 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
202 63 M 0 0 182(\( adr number #numbers -- \))FmTx
34 N 0 0 7(M)FmTx
FmE
856 0 :M
f1_12 sf
( )S
859 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
94 88 M -0.189(Set a range of )W
FmE
859 0 :M
f6_12 sf
( )S
866 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
162.539 88 M 0 0 56(#numbers)FmTx
FmE
866 0 :M
f1_12 sf
( )S
869 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
218.539 88 M -0.189( )W
-0.189( )W
-0.189(consecutive colors, starting with )W
FmE
869 0 :M
f6_12 sf
( )S
876 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
381.683 88 M 0 0 42(number)FmTx
FmE
876 0 :M
f1_12 sf
( )S
879 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
423.683 88 M -0.189(.  )W
FmE
879 0 :M
f6_12 sf
( )S
886 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
432.305 88 M 0 0 21(adr)FmTx
FmE
886 0 :M
f1_12 sf
( )S
889 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
453.305 88 M -0.189( )W
-0.189( )W
-0.189(is the address )W
94 101 M (of the memory area from which the color components are specified.)S
FmE
889 0 :M
f4_12 sf
( )S
896 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 126 M 0 0 70(get-colors)FmTx
FmE
896 0 :M
f3_12 sf
( )S
903 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
202 126 M 0 0 182(\( adr number #numbers -- \))FmTx
34 N 0 0 7(M)FmTx
FmE
903 0 :M
f1_12 sf
( )S
906 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
94 151 M -0.792(Read the color values of )W
FmE
906 0 :M
f6_12 sf
( )S
913 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
209.655 151 M 0 0 42(#numbe)FmTx
0 0 14(rs)FmTx
FmE
913 0 :M
f1_12 sf
( )S
916 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
265.655 151 M -0.792( )W
-0.792( )W
-0.792(consecutive color values, starting with )W
FmE
916 0 :M
f6_12 sf
( )S
923 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
453.376 151 M 0 0 42(number)FmTx
FmE
923 0 :M
f1_12 sf
( )S
926 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
495.376 151 M -0.792(.  )W
FmE
926 0 :M
f6_12 sf
( )S
933 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
502.792 151 M 0 0 21(adr)FmTx
FmE
933 0 :M
f1_12 sf
( )S
936 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
523.792 151 M -0.792( )W
94 164 M (is the address of a memory area into which the R-G-B compo)S
(n)S
(ents will be copied.)S
FmE
936 0 :M
f0_14 sf
( )S
939 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 192.333 M (4.3.  )S
(Geometry query method)S
FmE
940 0 :M
f4_12 sf
( )S
947 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 213 M 0 0 70(dimensions)FmTx
FmE
947 0 :M
f3_12 sf
( )S
954 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
202 213 M 0 0 133(\( -- width height \))FmTx
83 N 0 0 7(M)FmTx
FmE
954 0 :M
f1_12 sf
( )S
957 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 238 M (Returns visible )S
FmE
957 0 :M
f6_12 sf
( )S
964 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
133.319 238 M 0 0 35(width)FmTx
FmE
964 0 :M
f1_12 sf
( )S
967 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
168.319 238 M (  and )S
FmE
967 0 :M
f6_12 sf
( )S
974 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
194.646 238 M 0 0 42(height)FmTx
FmE
974 0 :M
f1_12 sf
( )S
977 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
236.646 238 M (  in pixels.)S
58 263 M (The returned values are the visible dimensions of the screen in the current mode.)S
58 288 M (Note:  Client programs may test for the existence of this method, and if it does not exist, use the )S
FmE
977 0 :M
f3_12 sf
( )S
984 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 301 M 0 0 49(\"width\")FmTx
FmE
984 0 :M
f1_12 sf
( )S
987 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
107 301 M ( and )S
FmE
987 0 :M
f3_12 sf
( )S
994 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
130.326 301 M 0 0 49(\"height)FmTx
FmE
994 0 :M
f1_12 sf
( )S
997 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
179.326 301 M (\" properties.  If the method does exist, its return values may differ from )S
58 314 M (the static property values.)S
FmE
997 0 :M
f0_14 sf
( )S
1000 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 342.333 M (4.4.  16-Color Text Extension defaults)S
FmE
1000 0 :M
f1_12 sf
( )S
1003 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
58 363 M -0.188(If a display device driver implements both the 8-bit Graphics Extension and the 16-color Text Ex-)W
58 376 M -0.233(tension, it )W
FmE
1003 0 :M
f2_12 sf
( )S
1006 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
107.864 376 M (shall)S
FmE
1006 0 :M
f1_12 sf
( )S
1009 0 :M
FrMacBegin
0 0 0 1 0 0 0 FmK
0 FmP
131.199 376 M -0.233( )W
-0.233( )W
-0.233(initialize the first 16 color numbers to correspond to the colors indicated in Table )W
58 389 M (1 in the 16-color Text Extension. A client program can use those colors without explicitly initial-)S
58 402 M -0.321(izing them. If a client program changes the color assignment for color numbers 0-15, the behavior )W
58 415 M (of the 16-color Text Extension might be affected.)S
38 80 2 12 FmqF
38 143 2 175 FmqF
38 368 2 12 FmqF
FmE
endp
%%Trailer
end
%%EOF
