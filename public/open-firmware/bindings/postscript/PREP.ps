%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 16 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Helvetica-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(July 3, 1995 Revision 0.02 DRAFT) 72 36 T
(1 of 9) 512 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
1 18 Q
0 X
0 0 0 1 0 0 0 K
1.8 (PowerPC Reference Platform binding to:) 154.41 624 P
1.8 (IEEE Std 1275-1994) 229.2 550 P
1.8 (Standard for Boot) 239.71 514 P
1.8 (\050Initialization, Con\336guration\051) 198.6 478 P
(Firmware) 271.01 442 T
1.8 (Revision: 0.02 DRAFT) 219.94 358 P
1.8 (Date: July 3, 1995) 237.3 316 P
52 310 54 370 R
V
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(July 3, 1995 Revision 0.02 DRAFT) 72 36 T
(2 of 9) 512 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(1.  Overview) 72 710.67 T
1 10 Q
1 (This document speci\336es the application of) 72 693.33 P
2 F
1 (IEEE Std 1275-1994 Standar) 249.65 693.33 P
1 (d for Boot \050Initialization, Con\336guration\051) 369.22 693.33 P
1 (Firmwar) 72 681.33 P
1 (e, Cor) 107.19 681.33 P
1 (e Practices and Requir) 132.82 681.33 P
1 (ements) 227.38 681.33 P
1 F
1 ( to PowerPC Reference Platform Compliant computer systems,) 255.15 681.33 P
1 (including practices for client program interface and data formats. An implementation of Open Firmware for a) 72 669.33 P
1 (PowerPC Reference Platform Compliant system) 72 657.33 P
2 F
1 (shall) 272.82 657.33 P
1 F
1 ( implement the core requirements as de\336ned in [1], the) 292.27 657.33 P
0.96 (PowerPC Processor) 72 645.33 P
0.96 (-speci\336c extensions described in [2] and the PowerPC Reference Platform speci\336c extensions) 151.92 645.33 P
1 (described in this binding.) 72 633.33 P
0 14 Q
(2.  Refer) 72 602.67 T
(ences and T) 122.67 602.67 T
(erms) 192.16 602.67 T
(2.1.  Refer) 72 570.67 T
(ences) 133.17 570.67 T
1 10 Q
1 (This standard shall be used in conjunction with the following publications. When the following standards are) 72 553.33 P
1 (superseded by an approved revision, the revision) 72 541.33 P
2 F
1 (shall) 276.74 541.33 P
1 F
1 ( apply) 296.19 541.33 P
1 (.) 321.26 541.33 P
([1]) 72 522.33 T
2 F
1 (IEEE Std 1275-1994 Standar) 90 522.33 P
1 (d for Boot \050Initialization, Con\336guration\051 Firmwar) 209.57 522.33 P
1 (e, Cor) 414.78 522.33 P
1 (e Practices and) 440.41 522.33 P
(Requir) 72 510.33 T
(ements) 98.85 510.33 T
1 F
(.) 126.62 510.33 T
([2]) 72 491.33 T
2 F
1 (PowerPC pr) 90 491.33 P
1 (ocessor binding to: IEEE Std 1275-1994, Standar) 140.91 491.33 P
1 (d for Boot \050Initialization, Con\336guration\051) 345.7 491.33 P
(Firmwar) 72 479.33 T
(e.) 107.19 479.33 T
1 F
([3]) 72 460.33 T
2 F
1 (System V Application Binary Interface) 90 460.33 P
1 F
1 (, published by UNIX System Laboratories. This document describes) 247.87 460.33 P
1 (the generic architecture of the ELF \050Executable and Linking Format\051 object \336le format.) 72 448.33 P
([4]) 72 429.33 T
2 F
1 (MS-DOS Pr) 90 429.33 P
1 (ogrammer's Refer) 139.23 429.33 P
1 (ence) 211.71 429.33 P
1 F
1 (, published by Microsoft.   This document describes the MS-DOS) 230.03 429.33 P
1 (partition, directory and F) 72 417.33 P
1 (A) 174.25 417.33 P
1 (T formats used by) 180.36 417.33 P
3 F
2.4 (disk-label) 259.35 417.33 P
1 F
1 ( support package.) 319.35 417.33 P
([5]) 72 398.33 T
2 F
1 (Peering Inside the PE: A T) 90 398.33 P
1 (our of the W) 202.12 398.33 P
1 (in32 Portable Executable File Format) 254.29 398.33 P
1 F
1 (, found in the March, 1994) 411.61 398.33 P
1 (issue of) 72 386.33 P
2 F
1 (Micr) 107.33 386.33 P
1 (osoft Systems Journal) 126.4 386.33 P
1 F
1 (.) 215.62 386.33 P
([6]) 72 367.33 T
2 F
1 (Bootstrap Pr) 90 367.33 P
1 (otocol) 142.58 367.33 P
1 F
1 (, Internet RFC 951; see also RFC 1532.) 167.58 367.33 P
([7]) 72 348.33 T
2 F
1 (ISO-9660, Information pr) 90 348.33 P
1 (ocessing -- V) 194.68 348.33 P
1 (olume and \336le structur) 247.78 348.33 P
1 (e of CD-ROM for information inter) 341.24 348.33 P
1 (change) 487.26 348.33 P
1 F
1 (,) 516.14 348.33 P
1 (published by International Or) 72 336.33 P
1 (ganization for Standardization.) 192.86 336.33 P
([8]) 72 317.33 T
2 F
0.93 (System V Application Binary Interface, PowerPC Pr) 90 317.33 P
0.93 (ocessor Supplement) 305.46 317.33 P
1 F
0.93 (, Sunsoft. This document de\336nes the) 386.1 317.33 P
1 (PowerPC speci\336c ABI for System V and also gives details on the PowerPC ELF format.) 72 305.33 P
([9]) 72 286.33 T
2 F
1 (Device Support Extensions to IEEE 1275-1994 Standar) 90 286.33 P
1 (d for Boot \050Initialization, Con\336guration\051 Firmwar) 317.83 286.33 P
1 (e) 523.04 286.33 P
1 F
1 (.) 527.48 286.33 P
2 F
([10]) 72 267.33 T
1 (Open Firmwar) 90 267.33 P
1 (e Recommended Practice: 16-color T) 150.35 267.33 P
1 (ext Extension.) 303.39 267.33 P
1 F
([1) 72 248.33 T
(1]) 79.96 248.33 T
2 F
1 (Open Firmwar) 90 248.33 P
1 (e Recommended Practice: Graphics Extension.) 150.35 248.33 P
0 14 Q
(2.2.  T) 72 217.67 T
(erms) 108.05 217.67 T
1 10 Q
0.84 (This standard uses technical terms as they are de\336ned in the documents cited in "References", plus the following) 72 200.33 P
(terms:) 72 188.33 T
0 F
1 (cor) 72 169.33 P
1 (e, cor) 85.7 169.33 P
1 (e speci\336cation) 109.84 169.33 P
1 F
1 (: refers to) 170.56 169.33 P
2 F
1 (IEEE Std 1275-1994 Standar) 214.38 169.33 P
1 (d for Boot \050Initialization, Con\336guration\051) 333.95 169.33 P
1 (Firmwar) 72 157.33 P
1 (e, Cor) 107.19 157.33 P
1 (e Practices and Requir) 132.82 157.33 P
1 (ements) 227.38 157.33 P
0 F
1 (ELF) 72 138.33 P
1 F
1 (: Executable and Linking Format. A binary object \336le format de\336ned by [3][8] that is used to represent) 91.45 138.33 P
2 F
1 (client pr) 72 126.33 P
1 (ograms) 106.24 126.33 P
1 F
1 ( in Open Firmware for PowerPC.) 136.24 126.33 P
0 F
1 (FDISK:) 72 107.33 P
1 F
1 (Refers to the boot-record and partition table format used by MS-DOS, as de\336ned in [4].) 109.39 107.33 P
0 F
1 (Open Firmwar) 72 88.33 P
1 (e) 136.98 88.33 P
1 F
1 (: The \336rmware architecture de\336ned by the core speci\336cation or) 141.42 88.33 P
1 (, when used as an adjective, a) 401.9 88.33 P
1 (software component compliant with the core speci\336cation.) 72 76.33 P
52 245 54 274 R
V
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(July 3, 1995 Revision 0.02 DRAFT) 72 36 T
(3 of 9) 512 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
1 (PE:) 72 713.33 P
1 F
1 (Portable Executable. A binary object \336le format de\336ned by [5]; this format is used by Microsoft's NT) 91.61 713.33 P
1 (operating system.) 72 701.33 P
0 F
1 (Real-Mode) 72 682.33 P
1 F
1 (: The mode in which Open Firmware and its client are running with translation disabled; all) 119.21 682.33 P
1 (addresses passed between the client and Open Firmware are real \050i.e., hardware\051 addresses.) 72 670.33 P
0 F
1 (Suspend:) 72 651.33 P
1 F
1 (A form of Power Management characterized by a fast recovery to full operation.  T) 114.96 651.33 P
1 (ypically) 461.22 651.33 P
1 (, system) 492.79 651.33 P
1 (memory will not be powered of) 72 639.33 P
1 (f while in the suspend state.) 203.19 639.33 P
0 F
1 (V) 72 620.33 P
1 (irtual-Mode) 78.85 620.33 P
1 F
1 (: The mode in which Open Firmware and its client share a single virtual address space, and) 130.51 620.33 P
0.85 (address translation is enabled; all addresses passed between the client and Open Firmware are virtual \050translated\051) 72 608.33 P
(addresses.) 72 596.33 T
0 14 Q
(3.  Packages) 72 565.67 T
1 10 Q
1 (This section describes the PowerPC Reference Platform-speci\336c requirements of Open Firmware packages.) 72 548.33 P
0 14 Q
(3.1.) 72 517.67 T
4 F
("disk-label") 100 517.67 T
0 F
( Support Package) 200.8 517.67 T
1 10 Q
1 (This section describes the partition formats and the formats of client program images that the) 72 500.33 P
3 F
2.4 (disk-label) 461.67 500.33 P
1 F
1 (support package for PowerPC) 72 488.33 P
2 F
1 (shall) 198.2 488.33 P
1 F
1 ( support; an implementation) 217.65 488.33 P
2 F
1 (may) 336.65 488.33 P
1 F
1 ( support additional mechanisms, in an) 353.31 488.33 P
1 (implementation-speci\336c manner) 72 476.33 P
1 (.) 201.6 476.33 P
1 (The process of loading and executing a client program is described in two stages. The \336rst stage determines) 72 457.33 P
0.97 (what \336le to read into memory) 72 445.33 P
0.97 (. This is done by locating a \336le from the boot device, usually by means of a name) 194.8 445.33 P
1 (lookup within a directory contained within a disk "partition". The second stage examines the front portion) 72 433.33 P
1 (\050header\051 of the image for "well-known" program formats.  When the format of the image has been determined,) 72 421.33 P
1 (the loading is completed in a manner determined by that format.) 72 409.33 P
1 (The name of the \336le \050and, the partition in which it is contained\051 can be explicitly speci\336ed by the user via the) 72 390.33 P
4 F
2.4 (load) 72 378.33 P
1 F
1 ( or) 96 378.33 P
4 F
2.4 (boot) 111.33 378.33 P
1 F
1 ( command, or can be implicitly speci\336ed by the value of the) 135.33 378.33 P
3 F
2.4 ("boot-device") 389.8 378.33 P
1 F
1 ( property of the) 467.8 378.33 P
3 F
2.4 ("/options") 72 366.33 P
1 F
1 ( node. The \336lename is the) 132 366.33 P
3 F
2.4 (ARGUMENTS) 243.82 366.33 P
1 F
1 ( portion of the \336nal) 297.82 366.33 P
3 F
2.4 (COMPONENT) 382.54 366.33 P
1 F
1 ( of the) 436.54 366.33 P
3 F
2.4 (PATH_NAME) 467.59 366.33 P
1 F
1 (, as) 521.59 366.33 P
1 (described in section 4.3.1 of [1].) 72 354.33 P
1 (The syntax for explicit \336lename speci\336cation is as follows:) 72 335.33 P
3 F
([n][,f) 90 316.33 T
(ilename]) 126 316.33 T
1 F
1 (where) 72 297.33 P
3 F
2.4 (n) 99.93 297.33 P
1 F
1 ( is the partition number to be used and) 105.93 297.33 P
3 F
2.4 (f) 270.75 297.33 P
2.4 (ilename) 276.75 297.33 P
1 F
1 ( is the name of a \336le within that partition. If) 318.75 297.33 P
3 F
2.4 (n) 506.96 297.33 P
1 F
1 ( is) 512.96 297.33 P
1 (omitted, the default partition \050as determined by the partition format\051 is used. If) 72 285.33 P
3 F
2.4 (f) 401.35 285.33 P
2.4 (ilename) 407.35 285.33 P
1 F
1 ( is omitted, the) 449.35 285.33 P
1 (default \336lename \050i.e., the \336lename component of the) 72 273.33 P
3 F
2.4 ("boot-device") 291.91 273.33 P
1 F
1 ( path-name\051 is used. Partition number 0) 369.91 273.33 P
1 (refers to the entire device; this de\336nition is independent of the existence of the device partition information.) 72 261.33 P
0 12 Q
(3.1.1.  Partition formats) 72 236 T
1 10 Q
1 (Open Firmware shall implement the algorithm described as follow:) 72 219.33 P
4 F
2.4 (Algorithm locating boot f) 72 200.33 P
2.4 (ile) 229.2 200.33 P
3 F
(read sector 0 \050bootsector\051) 90 185.33 T
(if last 2 bytes of sector are) 90 174.33 T
4 F
(0AA55h) 270 174.33 T
3 F
( \050little-endian\051) 306 174.33 T
(if) 117 163.33 T
4 F
(bsMedia) 135 163.33 T
3 F
( ==) 177 163.33 T
4 F
(0F8h) 201 163.33 T
3 F
(\134 FDISK partition on hard drive) 231 163.33 T
(if an explicit partition has been requested) 144 152.33 T
(select partition number) 171 141.33 T
4 F
(n) 315 141.33 T
3 F
(else) 144 130.33 T
(select bootable partition \05080h in) 171 119.33 T
4 F
(peBootable) 375 119.33 T
3 F
( field\051) 435 119.33 T
(use directory of the selected partition to locate file) 144 108.33 T
(else \050non-partitioned\051) 117 97.33 T
(use FAT-12/FAT-16 directory to locate file) 144 86.33 T
(else) 90 75.33 T
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(July 3, 1995 Revision 0.02 DRAFT) 72 36 T
(4 of 9) 512 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
3 10 Q
0 X
0 0 0 1 0 0 0 K
(read sector 16.) 90 713.33 T
(if a valid ISO-9660 directory is found) 90 702.33 T
(locate the file, using the ISO-9660 directory.) 117 691.33 T
(else) 90 680.33 T
(FAIL, in an implementation-specific manner.) 117 669.33 T
1 F
1 (This algorithm can be used to locate the correct \336le and/or load image from the speci\336ed device. The boot) 72 644.33 P
0.99 (device is selected as described in 7.4.3.2 of [1]. A \336lename can be explicitly given as the ar) 72 632.33 P
0.99 (guments \336eld of the) 453.83 632.33 P
2 F
1 (device-speci\336er) 72 620.33 P
1 F
1 ( \050i.e., the \336eld following the ':' of the last path component\051. Other formats) 134.75 620.33 P
2 F
1 (may) 444.54 620.33 P
1 F
1 ( be recognized in) 461.2 620.33 P
1 (an implementation-speci\336c manner) 72 608.33 P
1 (.) 214.54 608.33 P
1 (Although the above algorithm works independent of the device type, the following formats are strongly) 72 589.33 P
1 (recommended for devices for portability) 72 577.33 P
1 (.) 236.98 577.33 P
124.96 557.34 72 557.34 2 L
V
0.95 H
0 Z
N
0 F
1 (Floppy Disk) 72 558.33 P
1 F
1 (1.44/2.88 MB, MFM \337oppy disks should be in F) 72 543.33 P
1 (A) 274.01 543.33 P
1 (T) 280.12 543.33 P
1 (-12 format, as described in [4].) 285.31 543.33 P
117.73 523.34 72 523.34 2 L
V
N
0 F
1 (Hard Disk) 72 524.33 P
1 F
1 (Hard Disks should have an FDISK partition map, as described in [4].) 72 509.33 P
0 9 Q
0.9 (Note: since the bootsector is used to contain boot pr) 108 491 P
0.9 (ogram for \337oppies and the FDISK) 313.67 491 P
0.9 (partition map for hard disks, the) 108 481 P
3 F
2.16 ("disk-label") 241.66 481 P
0 F
0.9 ( package must use the value of the) 306.46 481 P
3 F
2.16 (bsMedia) 108 471 P
0 F
0.9 ( byte \050located at offset) 145.8 471 P
3 F
2.16 (15h) 237.02 471 P
0 F
0.9 (\051 to determine whether a partition map is pr) 253.22 471 P
0.9 (esent. If) 429.74 471 P
0.9 (the value is) 108 461 P
3 F
2.16 (0F8h) 155.95 461 P
0 F
0.9 (, it indicates a hard disk and a partition map should be pr) 177.55 461 P
0.9 (esent in the) 409.48 461 P
0.9 (bootsector; any other value indicates a \337oppy disk.) 108 451 P
114.21 435.34 72 435.34 2 L
V
N
0 10 Q
(CD-ROM) 72 436.33 T
1 F
1 (CD-ROMs should be formatted according to ISO-9660, as described in [7].) 72 421.33 P
0 12 Q
(3.1.2.  Pr) 72 396 T
(ogram-image formats.) 117.44 396 T
1 10 Q
1 (Open Firmware must recognize a client program that is formatted as either ELF [3][8] or PE [5]. PE format) 72 379.33 P
1 (support is provided only for booting NT) 72 367.33 P
1 (; all other clients) 238 367.33 P
2 F
1 (shall) 311.44 367.33 P
1 F
1 ( use ELF) 330.89 367.33 P
1 (. Other formats) 368.2 367.33 P
2 F
1 (may) 434.52 367.33 P
1 F
1 ( be handled in an) 451.18 367.33 P
1 (implementation-speci\336c manner) 72 355.33 P
1 (.) 201.6 355.33 P
1 (After locating the \336le, Open Firmware reads the image into memory at the location speci\336ed by the) 72 336.33 P
4 F
2.4 (load-) 488.94 336.33 P
2.3 (base) 72 324.33 P
1 F
0.96 ( Con\336guration V) 96 324.33 P
0.96 (ariable. Then, Open Firmware must perform the following procedure to prepare the image) 164.59 324.33 P
1 (for execution.) 72 312.33 P
4 F
(init-program) 72 293.33 T
0 F
(.) 144 293.33 T
3 F
(examine the header of the image.) 90 278.33 T
(set restart?) 90 267.33 T
4 F
(false) 168 267.33 T
3 F
(if the image is in ELF format) 90 256.33 T
(if the) 117 245.33 T
4 F
(EI_DATA) 159 245.33 T
3 F
( field does not match) 201 245.33 T
4 F
(little-endian?) 329.5 245.33 T
3 F
(set) 144 234.33 T
4 F
(little-endian?) 168 234.33 T
3 F
( appropriately.) 252 234.33 T
(set restart?) 144 223.33 T
4 F
(true) 222 223.33 T
3 F
(locate the PowerPC Note Section) 117 212.33 T
(if the Note Section\325s descriptor is not correct) 117 201.33 T
(set Configuration Variables appropriately) 144 190.33 T
(set restart?) 144 179.33 T
4 F
(true) 222 179.33 T
3 F
(if restart?) 117 168.33 T
(restart the system, possibly by executing) 144 157.33 T
4 F
(reset-all) 396 157.33 T
3 F
(else) 117 146.33 T
(move and/or relocate the ELF image.) 144 135.33 T
(else) 90 124.33 T
(if the file is in PE format) 90 113.33 T
(if) 117 102.33 T
4 F
(little-endian?) 131.5 102.33 T
3 F
(is) 218 102.33 T
4 F
(false) 232.5 102.33 T
3 F
(set) 144 91.33 T
4 F
(little-endian?) 168 91.33 T
3 F
( to) 252 91.33 T
4 F
(true) 276 91.33 T
1 F
(.) 300 91.33 T
3 F
(restart the system, possibly by executing) 144 80.33 T
4 F
(reset-all) 396 80.33 T
52 376 54 386 R
V
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(July 3, 1995 Revision 0.02 DRAFT) 72 36 T
(5 of 9) 512 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
3 10 Q
0 X
0 0 0 1 0 0 0 K
(else) 117 713.33 T
(move and/or relocate the PE image.) 144 702.33 T
(else) 90 691.33 T
(FAIL, in an implementation -specific manner.) 117 680.33 T
0 14 Q
(3.2.) 72 650.67 T
4 F
("obp-tftp") 100 650.67 T
0 F
( Support Package) 184 650.67 T
1 10 Q
1 (The) 72 633.33 P
3 F
2.4 ("obp-tftp") 91.05 633.33 P
1 F
1 ( Support Package of an Open Firmware implementation \050used to) 151.05 633.33 P
4 F
2.4 (load) 421.57 633.33 P
1 F
1 ( from) 445.57 633.33 P
3 F
2.4 ("network") 472.01 633.33 P
1 F
1 (devices\051) 72 621.33 P
2 F
1 (shall) 108.82 621.33 P
1 F
1 ( support the BOOTP protocol, as described in [6] and) 128.27 621.33 P
2 F
1 (shall) 354.63 621.33 P
1 F
1 ( not require the server to support any) 374.08 621.33 P
1 (vendor extensions.) 72 609.33 P
0 14 Q
(4.  Pr) 72 578.67 T
(operties) 104.02 578.67 T
1 10 Q
1 (This section describes the standard properties of PowerPC Reference Platform Open Firmware implementation.) 72 561.33 P
0 14 Q
(4.1.  "/openpr) 72 530.67 T
(om" node pr) 154.19 530.67 T
(operty) 230.16 530.67 T
1 10 Q
2.36 (Open Firmware must implement the "halt-address" property under the "/openprom" node. The property value) 72 513.33 P
1.18 (describes the location of physical memory where the \336rmware saves the halt procedure image. Halt procedure is) 72 501.33 P
1.54 (the self-contained \336rmware callback service for system power) 72 489.33 P
1.54 (-of) 331.12 489.33 P
1.54 (f or reboot. Halt procedure is discussed further) 342.6 489.33 P
1 (in Section 5.1.) 72 477.33 P
4 F
("halt-address") 72 460.33 T
1 F
1 (prop-encoded-array: address, length) 90 445.33 P
1 (address, encoded as with) 90 427.33 P
0 F
1 (encode-int) 195.92 427.33 P
1 F
1 (, is the real mode address of the halt procedure, and length, encoded as) 240.36 427.33 P
1 (with) 90 417.33 P
0 F
1 (encode-int) 111.28 417.33 P
1 F
1 (, is the physical memory size for the halt procedure.  If the halt procedure is located within) 155.72 417.33 P
1 (read-write memory) 90 407.33 P
1 (, length is the number of bytes of memory) 167.27 407.33 P
1 (, encoded as with encode-int, occupied by the) 342.66 407.33 P
1 (halt procedure.  If the halt procedure is located within read-only memory) 90 397.33 P
1 (, length is 0.) 391.95 397.33 P
0 9 Q
0.9 (Note: "r) 108 380 P
0.9 (ead-only memory" r) 140.97 380 P
0.9 (efers to memory that cannot be written in nomal operation;) 221.09 380 P
0.9 (ROM or FLASH ROM is consider) 108 370 P
0.9 (ed to be "r) 244.58 370 P
0.9 (ead-only"; while RAM, whether or not it is) 288.36 370 P
0.9 (write-pr) 108 360 P
0.9 (otected via an MMU, is consider) 139.82 360 P
0.9 (ed to be "r) 268.15 360 P
0.9 (ead-write".) 311.92 360 P
1 10 Q
1 (The read-write memory) 72 345.33 P
1 (, if any) 168.32 345.33 P
1 (, that the halt procedure occupies must not be included within the "available") 197.72 345.33 P
1 (property of the "/memory" node.) 72 333.33 P
0 14 Q
(5.  Client Pr) 72 302.67 T
(ogram Requir) 144.07 302.67 T
(ements) 228.2 302.67 T
(5.1.  Halt callback) 72 270.67 T
1 10 Q
1 (The halt callback allows a client program to invoke limited \336rmware services for turning-of) 72 253.33 P
1 (f or rebooting the) 451.7 253.33 P
1 (machine. The halt procedure shall not return control to the client program that invoked it.  Consequently) 72 241.33 P
1 (, the) 504.52 241.33 P
1 (halt procedure is not required to preserve any machine state on behalf of its caller) 72 229.33 P
1 (.) 411.48 229.33 P
1 (PowerPC Reference Platform Open Firmware must implement the) 72 210.33 P
3 F
2.4 ("halt-address) 348.3 210.33 P
1 F
1 (" property within the "/) 426.3 210.33 P
1 (openprom" node to support the halt callback. Detailed discussion about this property is presented in Section 4.1.) 72 198.33 P
0 12 Q
(5.1.1.  Halt pr) 72 173 T
(ocedur) 142.45 173 T
(e calling conventions) 177.56 173 T
1 10 Q
1 (When control is transferred to the halt procedure, the system must be in the endian mode that was in ef) 72 156.33 P
1 (fect) 501.86 156.33 P
1 (when the \336rmware last had control of the system. The client program must establish the real mode address) 72 144.33 P
1 (translation for the \336rmware.) 72 132.33 P
0 12 Q
(5.1.2.  Halt pr) 72 107 T
(ocedur) 142.45 107 T
(e argument) 177.56 107 T
1 10 Q
1 (The client program must set GPR3 to point to the halt ar) 72 90.33 P
1 (gument. The halt ar) 308.09 90.33 P
1 (gument is the address of a null-) 389.23 90.33 P
1 (terminated text string.  In the following discussion, the string is called the "halt string".) 72 78.33 P
52 618 54 628 R
V
52 195 54 217 R
V
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(July 3, 1995 Revision 0.02 DRAFT) 72 36 T
(6 of 9) 512 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
0 12 Q
0 X
0 0 0 1 0 0 0 K
(5.1.2.1.  Power) 72 712 T
(-off Service) 146.21 712 T
1 10 Q
1 (If the halt string is "power) 72 695.33 P
1 (-of) 181.7 695.33 P
1 (f", the \336rmware must turn of) 193.18 695.33 P
1 (f the system power to the extent possible. If the) 312.62 695.33 P
1 (\336rmware cannot turn of) 72 683.33 P
1 (f the system power) 169.52 683.33 P
1 (, perhaps due to lack of hardware capability) 247.94 683.33 P
1 (, the result is unde\336ned,) 429.24 683.33 P
1 (and the \336rmware must not try to return control to the client program or reboot the system. The suggested) 72 671.33 P
1 (behavior in this case is to enter a \336rmware interactive mode, if available.) 72 659.33 P
0 12 Q
(5.1.2.2.  Suspend Service) 72 634 T
1 10 Q
1 (If the halt string is "suspend", the \336rmware shall preserve the RAM image across a hardware suspend operation) 72 617.33 P
1 (in the following manner:) 72 605.33 P
4 11 Q
(1.) 108 586.33 T
1 10 Q
(The Firmware shall not alter RAM that is not devoted to \336rmware use \050see System State at Call) 126 586.33 T
(below\051.) 126 574.33 T
4 11 Q
(2.) 108 559.33 T
1 10 Q
(If the \336rmware encounters an error or the hardware does not support suspend, the halt procedure) 126 559.33 T
(shall set the appropriate return code \050see System State at Return below\051 and return to the caller) 126 547.33 T
(.) 504.26 547.33 T
4 11 Q
(3.) 108 532.33 T
1 10 Q
(The \336rmware shall record suspend restoration parameters in a system-dependent manner) 126 532.33 T
(.) 479.81 532.33 T
4 11 Q
(4.) 108 517.33 T
1 10 Q
(The \336rmware shall set the system power state to suspend in a system-dependent manner \050this usu-) 126 517.33 T
(ally means powering down everything except the memory sub-system and its refresh\051.) 126 505.33 T
4 11 Q
(5.) 108 490.33 T
1 10 Q
(When the system is subsequently powered up, the \336rmware performs the following steps:) 126 490.33 T
4 11 Q
(\245) 144 475.33 T
1 10 Q
(Reads the suspend restoration parameters.) 162 475.33 T
4 11 Q
(\245) 144 460.33 T
1 10 Q
(Initializes the system hardware as on IPL without disturbing the preserved RAM image) 162 460.33 T
4 11 Q
(\245) 144 445.33 T
1 10 Q
(Does not load the standard client program \050so as not to disturb the preserved RAM) 162 445.33 T
(image\051.) 162 433.33 T
4 11 Q
(\245) 144 418.33 T
1 10 Q
(Resets the suspend restoration parameters.) 162 418.33 T
4 11 Q
(\245) 144 403.33 T
1 10 Q
(Returns to the caller of suspend \050see system State at return below\051.) 162 403.33 T
326.43 368.24 72 368.24 2 L
V
0.49 H
0 Z
N
1 (The System State at the Call to "suspend" shall be as follows) 72 369.33 P
1 (:) 326.43 369.33 P
(Memory:) 72 350.33 T
1 (The memory range de\336ned by the ") 90 331.33 P
0 F
1 (r) 237.83 331.33 P
1 (eal-base) 242.09 331.33 P
1 F
1 (" and ") 276.53 331.33 P
0 F
1 (r) 306.13 331.33 P
1 (eal-size) 310.39 331.33 P
1 F
1 (" con\336guration variables is unde\336ned but) 341.49 331.33 P
1 (available for use by Open Firmware.) 90 319.33 P
1 (Master Processor:) 72 300.33 P
1 (GPR3 shall hold the starting address of the null-terminated text string "suspend".) 90 281.33 P
1 (Slave Processors:) 72 262.33 P
0.97 (In an SMP system only one processor shall call the Halt procedure with a halt string of "suspend", all other) 90 243.33 P
1 (processors shall call the halt procedure with the halt string "slave".  In this case, the halt procedure shall) 90 231.33 P
1 (execute a program which does not change the state of memory) 90 219.33 P
1 (.) 349.29 219.33 P
1 (I/O Sub-system:) 72 200.33 P
1 (All elements of the I/O sub-system shall be in a safe state.  In a safe state, they shall not be transferring) 90 181.33 P
1 (data to or from memory nor shall they cause an interrupt to any processor) 90 169.33 P
1 (.) 396.56 169.33 P
1 (Interrupt Sub-system:) 72 150.33 P
1 (The processor) 90 131.33 P
1 (\325) 147.74 131.33 P
1 (s External Interrupt Enable bit \050MSR[EE]\051 shall be 0 prior to calling the halt procedure.) 150.52 131.33 P
340.86 111.24 72 111.24 2 L
V
N
1 (The System State at a Return from "suspend" shall be as follows) 72 112.33 P
1 (:) 340.86 112.33 P
(Memory:) 72 93.33 T
52 571 54 593 R
V
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(July 3, 1995 Revision 0.02 DRAFT) 72 36 T
(7 of 9) 512 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
1 (The state of the memory locations, exclusive of the range de\336ned by the ") 90 713.33 P
0 F
1 (r) 398.14 713.33 P
1 (eal-base) 402.4 713.33 P
1 F
1 (" and ") 436.84 713.33 P
0 F
1 (r) 466.44 713.33 P
1 (eal-size) 470.7 713.33 P
1 F
1 (") 501.8 713.33 P
1 (con\336guration variables, shall be the same as the state they were in at the time of the call to the Halt) 90 701.33 P
(procedure.) 90 689.33 T
1 (Master Processor:) 72 670.33 P
1 (The state of the master processor shall be as de\336ned for the "initial program state" as speci\336ed in [2] with) 90 651.33 P
1 (the following exceptions:  The processor will start executing at the address which was in the master) 90 639.33 P
1 (processor) 90 627.33 P
1 (\325) 128.69 627.33 P
1 (s Link Register at the time the Halt procedure was called.  GPR3 shall contain the return code) 131.47 627.33 P
1 (\050see below\051.) 90 615.33 P
1 (Slave Processors:) 72 596.33 P
0.88 (The state of the slave processors shall be as follows:  The MSR shall be set to the state speci\336ed for "initial) 90 577.33 P
1 (program state" as speci\336ed in [2].  All non-architected processor dependent registers shall be set to the) 90 565.33 P
1 (system default value.  All other architected registers are unde\336ned.  The processor shall start executing at) 90 553.33 P
1 (the address which was in the slave processor) 90 541.33 P
1 (\325) 275.94 541.33 P
1 (s link register when the Halt procedure was called.  GPR3) 278.72 541.33 P
1 (shall contain the return code 0.) 90 529.33 P
1 (I/O Sub-system:) 72 510.33 P
1 (All the elements of the I/O sub-system shall be initialized to a safe state.  The device tree shall be re-) 90 491.33 P
1 (established as on IPL.) 90 479.33 P
1 (Interrupt Sub-system:) 72 460.33 P
1 (The processor) 90 441.33 P
1 (\325) 147.74 441.33 P
1 (s External Interrupt Enable bit \050MSR[EE]\051 shall be 0.) 150.52 441.33 P
1 (Return Codes:) 72 422.33 P
1 ( 0:) 90 403.33 P
1 (Restored from suspend.) 108 403.33 P
(-1:) 90 384.33 T
1 (Hardware does not support suspend power state.) 108 384.33 P
0 12 Q
(5.1.2.3.  Other Halt Services) 72 359 T
1 10 Q
1 (The \336rmware may recognize strings other than "power) 72 342.33 P
1 (-of) 297.55 342.33 P
1 (f" or "suspend" in a system-dependent manner) 309.03 342.33 P
1 (.  If the) 500.02 342.33 P
0.82 (halt string is not one of the recognized commands, the \336rmware must reboot the system. During the system reset) 72 330.33 P
1 (and the \336rmware restart, the \336rmware must preserve the halt string. Then, the \336rmware must evaluate the string) 72 318.33 P
1 (as if "auto-boot?" were true and "boot-command" were set to that string, without altering the values of the) 72 306.33 P
1 ("auto-boot?" and "boot-command" con\336guration variables. If the \336rmware includes an Open Firmware user) 72 294.33 P
1 (interface, the string can be any valid user interface command string.  Otherwise, the \336rmware shall interpret the) 72 282.33 P
1 (string as shown in T) 72 270.33 P
1 (able 1. Halt ar) 156.41 270.33 P
1 (guments.) 215.88 270.33 P
108 132 504 139 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
249 134.5 387 134.5 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 9 Q
0 X
0 0 0 1 0 0 0 K
-0.15 (* Note: <empty string> means a valid address that points to a null character) 108 126 P
-0.15 (.  An address value of 0 is not) 377.89 126 P
(an empty string.) 117 116 T
5 F
(T) 247.85 253.33 T
(able  1.) 252.68 253.33 T
0 10 Q
(Halt arguments) 288.21 253.33 T
109 222.5 251.5 241 R
7 X
V
0 12 Q
0 X
(String value) 114 227 T
252.5 222.5 503 241 R
7 X
V
0 X
(Meaning) 258 227 T
1 10 Q
(boot) 114 209 T
(Load and execute the default client program.) 258 209 T
1 12 Q
(<) 114 191 T
1 10 Q
(empty string>) 120.77 191 T
1 9.6 Q
(*) 176.69 195.8 T
1 10 Q
(If the \336rmware has an interactive mode, enter that mode.) 258 191 T
1 12 Q
(O) 258 177 T
1 10 Q
(therwise the result is unde\336ned, except that the \336rmware) 266.66 177 T
(shall not perform the) 258 163 T
("boot" action.) 344.1 163 T
(<any other string>) 114 145 T
(Behavior is system-dependent) 258 145 T
108 241 108 140 2 L
V
2 H
0 Z
N
252 243 252 138 2 L
V
1 H
N
504 241 504 140 2 L
V
2 H
N
107 242 505 242 2 L
V
N
109 222.25 503 222.25 2 L
V
0.5 H
N
109 219.75 503 219.75 2 L
V
N
107 203 505 203 2 L
V
1 H
N
107 157 505 157 2 L
V
N
107 139 505 139 2 L
V
2 H
N
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(July 3, 1995 Revision 0.02 DRAFT) 72 36 T
(8 of 9) 512 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(6.  Extensions for PowerPC Refer) 72 710.67 T
(ence Platform systems) 272.37 710.67 T
1 10 Q
0.95 (This section describes the properties, methods, and device subtrees that are applicable to devices required by the) 72 693.33 P
1 (PowerPC Reference Platform architecture. It is strongly recommended that other platforms follow these) 72 681.33 P
1 (de\336nitions for the corresponding devices.) 72 669.33 P
0 14 Q
(6.1.  Display devices) 72 638.67 T
1 10 Q
3.68 (Display device packages \050i.e..,) 72 621.33 P
3 F
8.83 (device_type) 211.13 621.33 P
1 F
3.68 ( =) 277.13 621.33 P
3 F
8.83 ("display") 295.13 621.33 P
1 F
3.68 (\051 for PowerPC Reference Platform systems) 349.13 621.33 P
1 (should include in their implementation all the properties and methods called for in [10] and [1) 72 609.33 P
1 (1].) 462.42 609.33 P
0 14 Q
(6.2.  Device support) 72 578.67 T
1 10 Q
1.97 (Open Firmware implementations for PowerPC Reference Platform systems must implement those device types) 72 561.33 P
1 (from the IEEE 1275 Device Support Extensions document [9] that are appropriate to the hardware present.) 72 549.33 P
0 14 Q
(6.3.  Conventions for devices on ISA and SCSI buses) 72 518.67 T
1 10 Q
1.88 (This section de\336nes the naming and device type conventions for typical devices on ISA and SCSI buses. The) 72 501.33 P
1 (following lists are the values of the "name" and "device-type" properties of the devices on an ISA bus:) 72 489.33 P
4 F
(name) 90 472.33 T
(device_type) 198 472.33 T
(8042) 90 461.33 T
(kbd) 117 450.33 T
3 F
("keyboard") 198 450.33 T
4 F
(mouse) 117 439.33 T
3 F
("mouse") 198 439.33 T
4 F
(floppy) 90 428.33 T
3 F
("block") 198 428.33 T
4 F
(com) 90 417.33 T
3 F
("serial") 198 417.33 T
4 F
(timer) 90 406.33 T
3 F
("timer") 198 406.33 T
4 F
(lpt) 90 395.33 T
3 F
("parallel") 198 395.33 T
4 F
(ide) 90 384.33 T
3 F
("block") 198 384.33 T
4 F
(nvram) 90 373.33 T
3 F
("nvram") 198 373.33 T
4 F
(rtc) 90 362.33 T
3 F
("rtc") 198 362.33 T
0 9 Q
0.9 (Note: The "kbd" and "mouse" names ar) 108 345 P
0.9 (e indented to show that they ar) 269.72 345 P
0.9 (e the child nodes) 393.45 345 P
0.9 (of the 8042 node.) 108 335 P
1 10 Q
1 (Some systems use an I/O controller) 72 320.33 P
1 (, often called a super I/O chip, which provides control functions of multiple) 218.53 320.33 P
1 (I/O devices. When a system uses a super I/O chip, a device node representing the super I/O chip itself need not) 72 308.33 P
1 (exist. Instead, the device nodes of the devices attached to the super I/O chip may be direct children of the bus) 72 296.33 P
1 (node representing the bus to which the super I/O chip is attached.) 72 284.33 P
1 (The following are the values of the name and device-type properties of the devices on SCSI bus:) 72 265.33 P
0 F
(name) 90 248.33 T
(device_type) 198 248.33 T
4 F
(scsi) 90 237.33 T
3 F
("scsi") 198 237.33 T
4 F
(disk) 117 226.33 T
3 F
("block") 198 226.33 T
4 F
(tape) 117 215.33 T
3 F
("byte") 198 215.33 T
0 9 Q
0.9 (Note: SCSI contr) 108 198 P
0.9 (oller is consider) 175.63 198 P
0.9 (ed a bus device in the device tr) 237.76 198 P
0.9 (ee for PowerPC Open) 361.14 198 P
0.9 (Firmwar) 108 188 P
0.9 (e. The "disk" and "tape" names ar) 142.33 188 P
0.9 (e indented to show that they ar) 282.3 188 P
0.9 (e the child) 406.03 188 P
0.9 (nodes of the scsi node.) 108 178 P
1 10 Q
1 (It is strongly recommended that the "compatible" property be implemented for ISA and SCSI bus devices to) 72 163.33 P
1 (help operating systems \336nd appropriate device drivers for these devices.) 72 151.33 P
0 14 Q
(6.4.  /aliases node pr) 72 120.67 T
(operties) 192.32 120.67 T
1 10 Q
1.77 (An implementation of Open Firmware for the PowerPC Reference Platform shall provide the following aliases) 72 103.33 P
1 (under) 72 91.33 P
3 F
2.4 ("/aliases") 98.27 91.33 P
1 F
1 ( node if an applicable device exists:) 158.27 91.33 P
52 262 54 315 R
V
52 88 54 98 R
V
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(July 3, 1995 Revision 0.02 DRAFT) 72 36 T
(9 of 9) 512 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
3 10 Q
0 X
0 0 0 1 0 0 0 K
(disk) 90 713.33 T
(tape) 90 702.33 T
(cdrom) 90 691.33 T
(keyboard) 90 680.33 T
(screen) 90 669.33 T
(scsi) 90 658.33 T
(com1) 90 647.33 T
(com2) 90 636.33 T
(floppy) 90 625.33 T
(net) 90 614.33 T
FMENDPAGE
%%EndPage: "9" 9
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 9
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier
%%+ Courier-Bold
%%+ Helvetica-Bold
%%EOF
