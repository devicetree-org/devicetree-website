%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 14 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 0 /Times-BoldItalic FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(1 of 15) 506 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
1 18 Q
0 X
0 0 0 1 0 0 0 K
1.8 (PowerPC Reference Platform binding to:) 154.41 624 P
1.8 (IEEE Std 1275-1994) 229.2 550 P
1.8 (Standard for Boot) 239.71 514 P
1.8 (\050Initialization, Con\336guration\051) 198.6 478 P
(Firmware) 271.01 442 T
1.8 (Revision: 0.03 DRAFT) 219.94 358 P
1.8 (Date: August 5, 1996) 226.3 316 P
52 310 54 370 R
V
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(2 of 15) 506 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(1.  Overview) 72 710.67 T
1 10 Q
1 (This document speci\336es the application of) 72 693.33 P
2 F
1 (IEEE Std 1275-1994 Standar) 249.65 693.33 P
1 (d for Boot \050Initialization, Con\336guration\051) 369.22 693.33 P
1 (Firmwar) 72 681.33 P
1 (e, Cor) 107.19 681.33 P
1 (e Practices and Requir) 132.82 681.33 P
1 (ements) 227.38 681.33 P
1 F
1 ( to PowerPC Reference Platform Compliant computer systems,) 255.15 681.33 P
1 (including practices for client program interface and data formats. An implementation of Open Firmware for a) 72 669.33 P
1 (PowerPC Reference Platform Compliant system) 72 657.33 P
2 F
1 (shall) 272.82 657.33 P
1 F
1 ( implement the core requirements as de\336ned in [1], the) 292.27 657.33 P
0.96 (PowerPC Processor) 72 645.33 P
0.96 (-speci\336c extensions described in [2] and the PowerPC Reference Platform speci\336c extensions) 151.92 645.33 P
1 (described in this binding.) 72 633.33 P
1 (This document de\336nes the binding to PowerPC platforms that use 32-bit addressing.  Since the minimum cell) 72 614.33 P
1 (size of Open Firmware is 32 bits, only one cell is necessary to represent addresses of processor bus devices;) 72 602.33 P
1 (hence, the value of "#address-cells" for /) 72 590.33 P
2 F
1 (shall) 243.78 590.33 P
1 F
1 ( be 1.) 263.23 590.33 P
0 9 Q
0.9 (Note: 64-bit platforms can follow the speci\336cations contained her) 108 572 P
0.9 (ein as long as all) 364.52 572 P
0.9 (addr) 108 562 P
0.9 (esses r) 126.34 562 P
0.9 (elevant to Open Firmwar) 151.82 562 P
0.9 (e ar) 251.6 562 P
0.9 (e kept within the \336rst 4GB; i.e., the upper 32 bits) 267.08 562 P
0.9 (of 64-bit addr) 108 552 P
0.9 (esses ar) 162.64 552 P
0.9 (e assumed to contain 0s.) 192.62 552 P
0 14 Q
(2.  Refer) 72 522.67 T
(ences and T) 122.67 522.67 T
(erms) 192.16 522.67 T
(2.1.  Refer) 72 490.67 T
(ences) 133.17 490.67 T
1 10 Q
1 (This standard shall be used in conjunction with the following publications. When the following standards are) 72 473.33 P
1 (superseded by an approved revision, the revision) 72 461.33 P
2 F
1 (shall) 276.74 461.33 P
1 F
1 ( apply) 296.19 461.33 P
1 (.) 321.26 461.33 P
([1]) 72 442.33 T
2 F
1 (IEEE Std 1275-1994 Standar) 90 442.33 P
1 (d for Boot \050Initialization, Con\336guration\051 Firmwar) 209.57 442.33 P
1 (e, Cor) 414.78 442.33 P
1 (e Practices and) 440.41 442.33 P
(Requir) 72 430.33 T
(ements) 98.85 430.33 T
1 F
(.) 126.62 430.33 T
([2]) 72 411.33 T
2 F
1 (PowerPC pr) 90 411.33 P
1 (ocessor binding to: IEEE Std 1275-1994, Standar) 140.91 411.33 P
1 (d for Boot \050Initialization, Con\336guration\051) 345.7 411.33 P
(Firmwar) 72 399.33 T
(e.) 107.19 399.33 T
1 F
([3]) 72 380.33 T
2 F
1 (System V Application Binary Interface) 90 380.33 P
1 F
1 (, published by UNIX System Laboratories. This document describes) 247.87 380.33 P
1 (the generic architecture of the ELF \050Executable and Linking Format\051 object \336le format.) 72 368.33 P
([4]) 72 349.33 T
2 F
1 (MS-DOS Pr) 90 349.33 P
1 (ogrammer's Refer) 139.23 349.33 P
1 (ence) 211.71 349.33 P
1 F
1 (, published by Microsoft.   This document describes the MS-DOS) 230.03 349.33 P
1 (partition, directory and F) 72 337.33 P
1 (A) 174.25 337.33 P
1 (T formats used by) 180.36 337.33 P
3 F
2.4 (disk-label) 259.35 337.33 P
1 F
1 ( support package.) 319.35 337.33 P
([5]) 72 318.33 T
2 F
1 (Peering Inside the PE: A T) 90 318.33 P
1 (our of the W) 202.12 318.33 P
1 (in32 Portable Executable File Format) 254.29 318.33 P
1 F
1 (, found in the March, 1994) 411.61 318.33 P
1 (issue of) 72 306.33 P
2 F
1 (Micr) 107.33 306.33 P
1 (osoft Systems Journal) 126.4 306.33 P
1 F
1 (.) 215.62 306.33 P
([6]) 72 287.33 T
2 F
1 (Bootstrap Pr) 90 287.33 P
1 (otocol) 142.58 287.33 P
1 F
1 (, Internet RFC 951; see also RFC 1532.) 167.58 287.33 P
([7]) 72 268.33 T
2 F
1 (ISO-9660, Information pr) 90 268.33 P
1 (ocessing -- V) 194.68 268.33 P
1 (olume and \336le structur) 247.78 268.33 P
1 (e of CD-ROM for information inter) 341.24 268.33 P
1 (change) 487.26 268.33 P
1 F
1 (,) 516.14 268.33 P
1 (published by International Or) 72 256.33 P
1 (ganization for Standardization.) 192.86 256.33 P
([8]) 72 237.33 T
2 F
0.93 (System V Application Binary Interface, PowerPC Pr) 90 237.33 P
0.93 (ocessor Supplement) 305.46 237.33 P
1 F
0.93 (, Sunsoft. This document de\336nes the) 386.1 237.33 P
1 (PowerPC speci\336c ABI for System V and also gives details on the PowerPC ELF format.) 72 225.33 P
([9]) 72 206.33 T
2 F
1 (Device Support Extensions to IEEE 1275-1994 Standar) 90 206.33 P
1 (d for Boot \050Initialization, Con\336guration\051 Firmwar) 317.83 206.33 P
1 (e) 523.04 206.33 P
1 F
1 (.) 527.48 206.33 P
([10]) 72 187.33 T
2 F
1 (Open Firmwar) 90 187.33 P
1 (e Recommended Practice: 16-color T) 150.35 187.33 P
1 (ext Extension.) 303.39 187.33 P
1 F
([1) 72 168.33 T
(1]) 79.96 168.33 T
2 F
1 (Open Firmwar) 90 168.33 P
1 (e Recommended Practice: Graphics Extension.) 150.35 168.33 P
1 F
([12]) 72 149.33 T
2 F
1 (Common Har) 90 149.33 P
1 (dwar) 145.35 149.33 P
1 (e Refer) 165.54 149.33 P
1 (ence Platform Binding.) 194.77 149.33 P
0 14 Q
(2.2.  T) 72 118.67 T
(erms) 108.05 118.67 T
1 10 Q
0.84 (This standard uses technical terms as they are de\336ned in the documents cited in "References", plus the following) 72 101.33 P
(terms:) 72 89.33 T
52 706 54 720 R
V
52 549 54 621 R
V
52 146 54 156 R
V
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(3 of 15) 506 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
1 (cor) 72 713.33 P
1 (e, cor) 85.7 713.33 P
1 (e speci\336cation) 109.84 713.33 P
1 F
1 (: refers to) 170.56 713.33 P
2 F
1 (IEEE Std 1275-1994 Standar) 214.38 713.33 P
1 (d for Boot \050Initialization, Con\336guration\051) 333.95 713.33 P
1 (Firmwar) 72 701.33 P
1 (e, Cor) 107.19 701.33 P
1 (e Practices and Requir) 132.82 701.33 P
1 (ements) 227.38 701.33 P
0 F
1 (ELF) 72 682.33 P
1 F
1 (: Executable and Linking Format. A binary object \336le format de\336ned by [3][8] that is used to represent) 91.45 682.33 P
2 F
1 (client pr) 72 670.33 P
1 (ograms) 106.24 670.33 P
1 F
1 ( in Open Firmware for PowerPC.) 136.24 670.33 P
0 F
1 (FDISK:) 72 651.33 P
1 F
1 (Refers to the boot-record and partition table format used by MS-DOS, as de\336ned in [4].) 109.39 651.33 P
0 F
1 (Open Firmwar) 72 632.33 P
1 (e) 136.98 632.33 P
1 F
1 (: The \336rmware architecture de\336ned by the core speci\336cation or) 141.42 632.33 P
1 (, when used as an adjective, a) 401.9 632.33 P
1 (software component compliant with the core speci\336cation.) 72 620.33 P
0 F
1 (PE:) 72 601.33 P
1 F
1 (Portable Executable. A binary object \336le format de\336ned by [5]; this format is used by Microsoft's NT) 91.61 601.33 P
1 (operating system.) 72 589.33 P
0 F
1 (Real-Mode) 72 570.33 P
1 F
1 (: The mode in which Open Firmware and its client are running with translation disabled; all) 119.21 570.33 P
1 (addresses passed between the client and Open Firmware are real \050i.e., hardware\051 addresses.) 72 558.33 P
0 F
1 (Suspend) 72 539.33 P
1 F
1 (: A form of Power Management characterized by a fast recovery to full operation.  T) 108.13 539.33 P
1 (ypically) 460.67 539.33 P
1 (, system) 492.24 539.33 P
1 (memory will not be powered of) 72 527.33 P
1 (f while in the suspend state.) 203.19 527.33 P
0 F
1 (V) 72 508.33 P
1 (irtual-Mode) 78.85 508.33 P
1 F
1 (: The mode in which Open Firmware and its client share a single virtual address space, and) 130.51 508.33 P
0.85 (address translation is enabled; all addresses passed between the client and Open Firmware are virtual \050translated\051) 72 496.33 P
(addresses.) 72 484.33 T
0 14 Q
(3.  Endian-ness Support) 72 453.67 T
1 10 Q
1 (An implementation of PowerPC Reference Platform Open Firmware must support both Big- and Little-Endian) 72 436.33 P
1 (system implementations.  This section describes added features to the core Open Firmware architecture features) 72 424.33 P
1 (to support bi-endian booting.) 72 412.33 P
0 14 Q
(3.1.  Bi-Endian Booting) 72 381.67 T
1 10 Q
1 (The Con\336guration V) 72 364.33 P
1 (ariable) 156.22 364.33 P
3 F
2.4 (little-endian?) 186.93 364.33 P
1 F
1 ( must be implemented.  The basic concept of bi-endian support) 270.93 364.33 P
1 (is to keep in the) 72 352.33 P
3 F
2.4 (little-endian?) 142.83 352.33 P
1 F
1 ( variable a "cached" indication of the desired endian-ness of client) 226.83 352.33 P
1 (programs \050for example operating systems or their loaders\051.  This variable indicates the expected endian-mode of) 72 340.33 P
1 (a boot tar) 72 328.33 P
1 (get;) 111.59 328.33 P
3 F
2.4 (false) 130.09 328.33 P
1 F
1 ( \0500\051 indicates Big-Endian,) 160.09 328.33 P
3 F
2.4 (true) 269.91 328.33 P
1 F
1 ( \050-1\051 indicates Little-Endian; the default value of) 293.91 328.33 P
3 F
2.4 (little-endian?) 72 316.33 P
1 F
1 ( is implementation dependent.) 156 316.33 P
1 (The client program must describe its endian-mode in the header section of its image as described in section) 72 297.33 P
1 (section) 72 285.33 P
1 (7.1.1..  When Open Firmware is started, Open Firmware must use the value of) 102.83 285.33 P
3 F
2.4 (little-endian?) 432.61 285.33 P
1 F
1 ( to) 516.61 285.33 P
1 (establish the endian-mode of a system.  After Open Firmware locates and loads a client program, the correct) 72 273.33 P
1 (endian-mode must be veri\336ed with the description in the header section of the client program image.  If the) 72 261.33 P
1 (cached value is correct, Open Firmware proceeds, with the system in its current endian-mode.) 72 249.33 P
0.94 (If, however) 72 230.33 P
0.94 (, Open Firmware determines that the endian-mode of the client program is dif) 118.64 230.33 P
0.94 (ferent from what it had) 440.58 230.33 P
1 (assumed, it must set) 72 218.33 P
3 F
2.4 (little-endian?) 159.06 218.33 P
1 F
1 ( appropriately and recon\336gure the) 243.06 218.33 P
413.86 217.24 386.08 217.24 2 L
V
0.49 H
0 Z
N
1 (system) 386.08 218.33 P
1 ( \050hardware and \336rmware\051 for) 413.86 218.33 P
1 (the new endian-mode, possibly by resetting the system as with) 72 206.33 P
3 F
2.4 (reset-all) 334.48 206.33 P
1 F
1 (.) 388.48 206.33 P
0 9 Q
0.9 (Note:  the endian-mode applies to the entir) 108 188 P
0.9 (e hardwar) 277.88 188 P
0.9 (e system, including the pr) 318.36 188 P
0.9 (ocessor\050s\051.) 420.05 188 P
0.9 (Open Firmwar) 108 178 P
0.9 (e) 166.48 178 P
4 F
0.9 (shall) 173.63 178 P
0 F
0.9 ( perform whatever steps ar) 191.64 178 P
0.9 (e r) 299.04 178 P
0.9 (equir) 310.02 178 P
0.9 (ed to enable the system to run in) 330.36 178 P
0.9 (the speci\336ed mode.) 108 168 P
2 10 Q
1 (Client pr) 72 153.33 P
1 (ograms) 108.47 153.33 P
1 F
1 ( can use) 138.47 153.33 P
3 F
2.4 (setprop) 176.18 153.33 P
1 F
1 ( to alter the value of) 218.18 153.33 P
3 F
2.4 (little-endian?) 306.94 153.33 P
1 F
1 (; users can alter it via the) 390.94 153.33 P
3 F
2.4 (setenv) 500.42 153.33 P
1 F
1 (command from the) 72 141.33 P
2 F
1 (user interface) 153.6 141.33 P
1 F
1 ( \050if present\051.  The alteration of) 209.87 141.33 P
3 F
2.4 (little-endian?) 340.17 141.33 P
2 F
1 (shall not) 427.67 141.33 P
1 F
1 ( cause the system) 463.4 141.33 P
1 (to be recon\336gured until the system is re-booted.) 72 129.33 P
0 9 Q
0.9 (Note: this mechanism intr) 108 111 P
0.9 (oduces an extra con\336guration pass.  However) 210.28 111 P
0.9 (, this occurs only) 388.59 111 P
0.9 (when switching the endian-mode fr) 108 101 P
0.9 (om that which was last used.  For most boots, Open) 246.44 101 P
0.9 (Firmwar) 108 91 P
0.9 (e will be appr) 142.33 91 P
0.9 (opriately con\336gur) 197.12 91 P
0.9 (ed, so that no additional overhead will occur) 266.61 91 P
0.9 (.) 442.09 91 P
52 88 54 463 R
V
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(4 of 15) 506 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(4.  Packages) 72 710.67 T
1 10 Q
1 (This section describes the PowerPC Reference Platform-speci\336c requirements of Open Firmware packages.) 72 693.33 P
0 14 Q
(4.1.) 72 662.67 T
5 F
("disk-label") 100 662.67 T
0 F
( Support Package) 200.8 662.67 T
1 10 Q
1 (This section describes the partition formats and the formats of client program images that the) 72 645.33 P
3 F
2.4 (disk-label) 461.67 645.33 P
1 F
1 (support package for PowerPC) 72 633.33 P
2 F
1 (shall) 198.2 633.33 P
1 F
1 ( support; an implementation) 217.65 633.33 P
2 F
1 (may) 336.65 633.33 P
1 F
1 ( support additional mechanisms, in an) 353.31 633.33 P
1 (implementation-speci\336c manner) 72 621.33 P
1 (.) 201.6 621.33 P
1 (The process of loading and executing a client program is described in two stages. The \336rst stage determines) 72 602.33 P
0.97 (what \336le to read into memory) 72 590.33 P
0.97 (. This is done by locating a \336le from the boot device, usually by means of a name) 194.8 590.33 P
1 (lookup within a directory contained within a disk "partition". The second stage examines the front portion) 72 578.33 P
1 (\050header\051 of the image for "well-known" program formats.  When the format of the image has been determined,) 72 566.33 P
1 (the loading is completed in a manner determined by that format.) 72 554.33 P
1 (The name of the \336le \050and, the partition in which it is contained\051 can be explicitly speci\336ed by the user via the) 72 535.33 P
5 F
2.4 (load) 72 523.33 P
1 F
1 ( or) 96 523.33 P
5 F
2.4 (boot) 111.33 523.33 P
1 F
1 ( command, or can be implicitly speci\336ed by the value of the) 135.33 523.33 P
3 F
2.4 ("boot-device") 389.8 523.33 P
1 F
1 ( property of the) 467.8 523.33 P
3 F
2.4 ("/options") 72 511.33 P
1 F
1 ( node. The \336lename is the) 132 511.33 P
3 F
2.4 (ARGUMENTS) 243.82 511.33 P
1 F
1 ( portion of the \336nal) 297.82 511.33 P
3 F
2.4 (COMPONENT) 382.54 511.33 P
1 F
1 ( of the) 436.54 511.33 P
3 F
2.4 (PATH_NAME) 467.59 511.33 P
1 F
1 (, as) 521.59 511.33 P
1 (described in section 4.3.1 of [1].) 72 499.33 P
1 (The syntax for explicit \336lename speci\336cation is as follows:) 72 480.33 P
3 F
([n][,f) 90 461.33 T
(ilename]) 126 461.33 T
1 F
1 (where) 72 442.33 P
3 F
2.4 (n) 99.93 442.33 P
1 F
1 ( is the partition number to be used and) 105.93 442.33 P
3 F
2.4 (f) 270.75 442.33 P
2.4 (ilename) 276.75 442.33 P
1 F
1 ( is the name of a \336le within that partition. If) 318.75 442.33 P
3 F
2.4 (n) 506.96 442.33 P
1 F
1 ( is) 512.96 442.33 P
1 (omitted, the default partition \050as determined by the partition format\051 is used. If) 72 430.33 P
3 F
2.4 (f) 401.35 430.33 P
2.4 (ilename) 407.35 430.33 P
1 F
1 ( is omitted, the) 449.35 430.33 P
1 (default \336lename \050i.e., the \336lename component of the) 72 418.33 P
3 F
2.4 ("boot-device") 291.91 418.33 P
1 F
1 ( path-name\051 is used. Partition number 0) 369.91 418.33 P
1 (refers to the entire device; this de\336nition is independent of the existence of the device partition information.) 72 406.33 P
0 12 Q
(4.1.1.  Partition formats) 72 381 T
1 10 Q
1 (The ") 72 364.33 P
5 F
2.4 (open) 95.13 364.33 P
1 F
1 (" method of the ") 119.13 364.33 P
5 F
2.4 (disk-label) 191.84 364.33 P
1 F
1 (" support package shall implement a disk partition recognition) 251.84 364.33 P
1 (algorithm that supports at least the set of disk formats that are supported by the following algorithm.  The) 72 352.33 P
1 (following algorithm is intended to support raw \050uninterpreted\051 disks, raw partitions of disks beginning with an) 72 340.33 P
1 (FDISK partition map, and \336les on F) 72 328.33 P
1 (A) 221.43 328.33 P
1 (T and ISO-9660 \336le systems both within FDISK partitions and by) 227.54 328.33 P
1 (themselves on disks without a partition map.) 72 316.33 P
1 (That ") 72 297.33 P
5 F
2.4 (open) 97.91 297.33 P
1 F
1 (" method shall accept an ar) 121.91 297.33 P
1 (gument string \050as returned by ") 234.95 297.33 P
5 F
2.4 (my-args) 364.29 297.33 P
1 F
1 ("\051 with the following syntax) 406.29 297.33 P
1 (\050according to the algorithm below\051, where brackets denote an optional component:) 72 285.33 P
3 F
([partition][,[filename]]) 90 266.33 T
1 F
1 (If the ar) 72 252.33 P
1 (gument string contains a comma, or if the ar) 105.47 252.33 P
1 (gument string begins with a decimal digit, the partition) 290.21 252.33 P
1 (component is deemed to be present.) 72 240.33 P
1 (If the partition component is present, it selects the desired partition, where partition 0 refers to the entire disk,) 72 221.33 P
1 (partition 1 refers to the \336rst partition, partition 2 to the second, and so forth.  If the partition component is) 72 209.33 P
1 (absent and the disk has an FDISK partition map, the \336rst "bootable" partition is used, otherwise the \336rst non-) 72 197.33 P
1 (null partition is used.) 72 185.33 P
1 (If the \336lename component is present, it selects a particular \336le within the \336le system on the disk or partition) 72 166.33 P
(thereof.) 72 154.33 T
3 F
(OPEN algorithm) 90 135.33 T
(   Set D.SIZE to -1) 90 113.33 T
(   If the first character of ARGUMENT$ is in the range '0'..'9') 90 91.33 T
(        LEFT-PARSE \050 ARGUMENT$ \051 -> PARTITION$, FILENAME$) 90 80.33 T
52 706 54 720 R
V
52 77 54 389 R
V
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(5 of 15) 506 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
3 10 Q
0 X
0 0 0 1 0 0 0 K
(   Else) 90 713.33 T
(        Set PARTITION$ to the null string) 90 702.33 T
(        Set FILENAME$ to ARGUMENT$) 90 691.33 T
(   If PARTITION$ is not the null string) 90 669.33 T
(        If PARTITION$ cannot be parsed as a decimal number) 90 658.33 T
(                Return FALSE) 90 647.33 T
(        DECIMAL_STRING_TO_NUMBER\050 PARTITION$ \051 -> PARTITION) 90 636.33 T
(        If PARTITION is 0) 90 625.33 T
(                Set OFFSET to 0) 90 614.33 T
(                If the parent device has a "#blocks" method) 90 603.33 T
(                        Execute the parent's "#blocks" and "block-size") 90 592.33 T
(                        methods, and set D.SIZE to the product of the) 90 581.33 T
(                        two result values.) 90 570.33 T
(        Else) 90 559.33 T
(                Read the first 512 bytes of the device into a buffer) 90 548.33 T
(                SELECT_EXPLICIT_PARTITION\050PARTITION\051) 90 537.33 T
(                If SELECT_EXPLICIT_PARTITION returned an error indication) 90 526.33 T
(                        Return FALSE) 90 515.33 T
(   Else  \134 PARTITION$ is NULL) 90 493.33 T
(        Read the first 512 bytes of the device into a buffer) 90 482.33 T
(        SELECT_ACTIVE_PARTITION) 90 471.33 T
(        If SELECT_ACTIVE_PARTITION returned an error indication) 90 460.33 T
(                Return FALSE) 90 449.33 T
-1.12 (   \134 At this point, D.OFFSET is set to the beginning of the selected partition) 90 427.33 P
-0.63 (   \134 and D.SIZE is set to the size of that partition.  If the entire disk was) 90 416.33 P
(   \134 selected, D.OFFSET is 0 and D.SIZE is the size of the disk.) 90 405.33 T
(   Call parent's "seek" method with an argument of 0 0.) 90 383.33 T
(   If FILENAME$ is not NULL) 90 361.33 T
(        If the partition contains an ISO 9660 file system) 90 339.33 T
(                Interpose the ISO 9660 file system handler, with FILENAME$) 90 317.33 T
(                as its argument) 90 306.33 T
(        Else If the partition contains a FAT file system) 90 284.33 T
(                Interpose the FAT file system handler, with FILENAME$) 90 262.33 T
(                as its argument) 90 251.33 T
(        Else If the implementation recognizes the file system type and) 90 229.33 T
(        has a handler for that file system) 90 218.33 T
(                Interpose the handler for that file system, with FILENAME$) 90 196.33 T
(                as its argument) 90 185.33 T
(        Else) 90 163.33 T
(                Return FALSE) 90 152.33 T
(   Return TRUE) 90 130.33 T
(   CHECK_FOR_BPB procedure) 90 97.33 T
(        If the 16-bit little-endian quantity beginning at buffer offset 510) 90 75.33 T
52 72 54 720 R
V
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(6 of 15) 506 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
3 10 Q
0 X
0 0 0 1 0 0 0 K
-0.35 (        is 0xaa55, and the 16-bit little-endian quantity beginning at buffer) 90 713.33 P
-0.3 (        offset 11 \050which is the BPB "bytes per sector" field\051 is either 256,) 90 702.33 P
(        512, or 1024, and the byte at offset 16 \050the BPB "number of FATs") 90 691.33 T
(        field\051 is either 1 or 2, the sector is deemed to contain a BPB.) 90 680.33 T
(        Otherwise, the sector does not contain a BPB.) 90 669.33 T
(   CHECK_FOR_ISO_9660 procedure) 90 647.33 T
-1 (        Read 512-byte sector 64 \050the beginning of logical 2048-byte sector 16\051) 90 625.33 P
(        into a buffer) 90 614.33 T
(        If the byte at offset 0 contains the binary number "1", and the 5) 90 592.33 T
(        bytes beginning at offset 1 contains the text string "CD001", the) 90 581.33 T
(        partition or raw disk is deemed to contain an ISO 9660 file system.) 90 570.33 T
(        Otherwise, the partition or raw disk is deemed not to contain an) 90 559.33 T
(        ISO 9660 file system.) 90 548.33 T
(   GET_DISK_SIZE procedure) 90 515.33 T
(        If the parent device has a "#blocks" method) 90 493.33 T
(                Execute the parent's "#blocks" and "block-size") 90 471.33 T
(                methods, and set D.SIZE to the product of the) 90 460.33 T
(                two result values.) 90 449.33 T
(   CHECK_FOR_FDISK procedure) 90 416.33 T
(        If the buffer does not contain an FDisk partition map signature of) 90 394.33 T
(        "aa55" as a 16-bit little-endian number beginning at buffer offset) 90 383.33 T
(        510, the buffer is deemed not to contain an FDISK partition map.) 90 372.33 T
(        If the partition map area \050the bytes of the buffer between offsets) 90 350.33 T
(        0x1ae and 0x1fd inclusive\051 contains all zero bytes, the buffer is) 90 339.33 T
(        deemed not to contain an FDISK partition map.) 90 328.33 T
(        If none of the partition type codes \050the bytes at buffer offsets) 90 306.33 T
(        0x1b2, 0x1c2, 0x1d2, and 0x1e2\051 contains a recognizable partition) 90 295.33 T
(        type code \0504, 5, 6, 0x41, 0x96, or other types that may be) 90 284.33 T
(        recognized by the implementation\051, the buffer is deemed not to) 90 273.33 T
(        contain an FDISK partition map.) 90 262.33 T
(        Otherwise, the buffer is deemed to contain an FDISK partition map.) 90 240.33 T
(        The implementation may, at its option, apply additional tests to) 90 218.33 T
(        determine whether or not the buffer contains a valid partition map.) 90 207.33 T
(   INTERPOSE_BY_TYPE procedure) 90 185.33 T
(        If FILENAME$ is not the null string) 90 163.33 T
(                If PARTITION-TYPE is 0x96) 90 141.33 T
(                        INTERPOSE \050ISO-9660 File System package, FILENAME$\051) 90 130.33 T
(                Else) 90 119.33 T
(                        INTERPOSE \050FAT File System package, FILENAME$\051) 90 108.33 T
(   SELECT_ACTIVE_PARTITION procedure) 90 86.33 T
52 72 54 720 R
V
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(7 of 15) 506 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
3 10 Q
0 X
0 0 0 1 0 0 0 K
(        CHECK_FOR_BPB) 90 713.33 T
(        If the buffer contains a BPB) 90 702.33 T
(                Set OFFSET to 0) 90 691.33 T
(                Set D.SIZE to the maximum size of the disk in bytes, as) 90 669.33 T
(                indicated by the information in the BIOS Parameter Block) 90 658.33 T
(                If FILENAME$ is not the null string) 90 636.33 T
(                        INTERPOSE \050FAT File System package, FILENAME$\051) 90 614.33 T
(                Return OKAY) 90 592.33 T
(        CHECK_FOR_FDISK) 90 570.33 T
(        If the buffer does not contain an FDISK partition map) 90 559.33 T
(                CHECK_FOR_ISO_9660) 90 537.33 T
(                If it is an ISO 9660 disk) 90 526.33 T
(                        Set OFFSET to 0) 90 504.33 T
(                        GET_DISK_SIZE) 90 482.33 T
(                        If FILENAME$ is not the null string) 90 460.33 T
-1.3 (                                INTERPOSE \050ISO-9660 File System package, FILENAME$\051) 90 438.33 P
(                        Return OKAY) 90 405.33 T
(                Return ERROR) 90 383.33 T
(        Search the FDisk partition map, reading new 512-byte sectors) 90 361.33 T
(        into the buffer if necessary to "chain" to extended partition) 90 350.33 T
(        entries \050i.e. ones whose type byte at offset 4 contain "5"\051) 90 339.33 T
(        for the first partition entry whose "bootable" field \050at) 90 328.33 T
(        offset 0 in the partition entry\051 contains 0x80.) 90 317.33 T
(        If one is found:) 90 306.33 T
(                Set PARTITION-TYPE to that entry's "type" field) 90 295.33 T
(                \050the byte at offset 4\051) 90 284.33 T
(                Set D.OFFSET to the byte offset from the beginning) 90 262.33 T
(                of the disk of the beginning of the partition) 90 251.33 T
(                denoted by that entry.) 90 240.33 T
(                Set D.SIZE to the size of the partition denoted by) 90 218.33 T
(                that entry.) 90 207.33 T
(                INTERPOSE_BY_TYPE) 90 185.33 T
(                Return OKAY) 90 163.33 T
0 9 Q
0.9 (Note: An implementation is r) 108 135 P
0.9 (equir) 223.43 135 P
0.9 (ed to support only the "logical sector number" format) 243.76 135 P
0.9 (of FDISK partition map entries.  It may) 108 125 P
0.9 (, but is not r) 266.8 125 P
0.9 (equir) 316.99 125 P
0.9 (ed to, support the "head/) 337.33 125 P
0.9 (cylinder/sector" format.) 108 115 P
3 10 Q
(        \134 No partition was marked "bootable") 90 89.33 T
52 75 54 720 R
V
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(8 of 15) 506 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
3 10 Q
0 X
0 0 0 1 0 0 0 K
(        Search the FDisk partition map beginning in 512-byte sector 0,) 90 713.33 T
(        reading new 512-byte sectors into the buffer if necessary to) 90 702.33 T
(        "chain" to extended partition entries, for the first partition) 90 691.33 T
(        entry whose "type" byte is neither 0 nor 5 \0505 is the type code) 90 680.33 T
(        that indicates a "chained" extended partition entry\051.) 90 669.33 T
(        If one is found:) 90 658.33 T
(                Set PARTITION-TYPE to that entry's "type" field) 90 636.33 T
(                \050the byte at offset 4\051) 90 625.33 T
(                Set D.OFFSET to the byte offset from the beginning) 90 603.33 T
(                of the disk of the beginning of the partition) 90 592.33 T
(                denoted by that entry.) 90 581.33 T
(                Set D.SIZE to the size of the partition in bytes denoted) 90 559.33 T
(                by that entry.) 90 548.33 T
(                INTERPOSE_BY_TYPE) 90 526.33 T
(                Return OKAY) 90 504.33 T
(        \134 The partition map did not contain any valid partition entries) 90 482.33 T
(        Return ERROR) 90 460.33 T
(   GET-DISK-SIZE procedure) 90 438.33 T
(        If the parent has a "#blocks" method) 90 416.33 T
(                Execute the parent's "#blocks" and "block-size" methods) 90 405.33 T
(                Set D.SIZE to the product of the numbers they returned) 90 394.33 T
(        Else) 90 383.33 T
(                Set D.SIZE to -1) 90 372.33 T
(   SELECT_EXPLICIT_PARTITION\050PARTITION\051 procedure) 90 350.33 T
(        If the buffer contains a BPB) 90 328.33 T
(                If PARTITION is 1) 90 306.33 T
(                        Set OFFSET to 0) 90 284.33 T
(                        GET-DISK-SIZE) 90 262.33 T
(                        If FILENAME$ is not the null string) 90 240.33 T
-0.49 (                                INTERPOSE \050FAT File System package, FILENAME$\051) 90 218.33 P
(                        Return OKAY) 90 196.33 T
(                Else) 90 174.33 T
(                        Return ERROR) 90 163.33 T
(        Else) 90 152.33 T
-0.72 (                Search the FDisk partition map beginning in 512-byte sector 0,) 90 141.33 P
-0.24 (                reading new 512-byte sectors into the buffer if necessary to) 90 130.33 P
(                "chain" to extended partition entries, for the Nth, where) 90 119.33 T
(                N is the value of PARTITION, partition entry whose "type") 90 108.33 T
(                byte is neither 0 nor 5 \0505 is the type code that indicates) 90 97.33 T
(                a "chained" extended partition entry\051.) 90 86.33 T
(                If one is found:) 90 75.33 T
52 72 54 720 R
V
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(9 of 15) 506 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
3 10 Q
0 X
0 0 0 1 0 0 0 K
(                        Set PARTITION-TYPE to that entry's "type" field) 90 702.33 T
(                        \050the byte at offset 4\051) 90 691.33 T
(                        Set D.OFFSET to the byte offset from the beginning) 90 669.33 T
(                        of the disk of the beginning of the partition) 90 658.33 T
(                        denoted by that entry.) 90 647.33 T
(                        Set D.SIZE to the size of the partition in bytes) 90 625.33 T
(                        denoted by that entry.) 90 614.33 T
(                        INTERPOSE_BY_TYPE) 90 592.33 T
(                        Return OKAY) 90 570.33 T
(                Else) 90 548.33 T
(                        Return ERROR) 90 526.33 T
0 9 Q
0.9 (Note: Some vendors wish to supply a CD-ROM that contains both an ISO-9660 \336le) 108 483 P
0.9 (system, and also a separate boot image in another format.  One way do so, that will work) 108 473 P
0.9 (with the algorithm described above, is as follows:) 108 463 P
0.9 (Put the ISO-9660 \336le system on the CD-ROM in its usual location \050i.e. beginning at 2048-) 108 449 P
0.9 (byte sector number 16\051.) 108 440 P
0.9 (Put the boot image, in one of the de\336ned partition formats \050e.g. as a F) 108 427 P
0.9 (A) 385.67 427 P
0.9 (T \336le system or a) 391.5 427 P
0.9 ("41" partition\051 on the CD-ROM in some ar) 108 418 P
0.9 (ea beyond that which is used by the ISO-9660) 280.86 418 P
0.9 (\336le system.) 108 409 P
0.9 ( Put an FDISK partition map in the \336rst 512 bytes of the CD-ROM \050i.e. in the \336rst) 108 396 P
0.9 (quarter of the \336rst 2048-byte sector\051.  That partition map should contain:) 108 387 P
0.9 (a\051 An entry describing the boot image partition.  The logical sector numbers in that entry) 108 374 P
0.9 (should be in units of 512 bytes.  That entry should be marked "bootable" \050i.e. the \336rst) 108 365 P
0.9 (byte of the entry should be 0x80\051.) 108 356 P
(and) 108 343 T
0.9 (b\051 An entry describing the ISO-9660 \336le system.  The logical sector numbers in that entry) 108 330 P
0.9 (should be in units of 512 bytes.  The beginning sector number \336eld in that entry should) 108 321 P
0.9 (contain 0, thus "including" the FDISK partition map within the ISO-9660 partition.) 108 312 P
1 10 Q
1 (Although the above algorithm works independent of the device type, the following formats are strongly) 72 298.33 P
1 (recommended for devices for portability) 72 286.33 P
1 (.) 236.98 286.33 P
124.96 266.34 72 266.34 2 L
V
0.95 H
0 Z
N
0 F
1 (Floppy Disk) 72 267.33 P
1 F
1 (1.44/2.88 MB, MFM \337oppy disks should be in F) 72 252.33 P
1 (A) 274.01 252.33 P
1 (T) 280.12 252.33 P
1 (-12 format, as described in [4].) 285.31 252.33 P
117.73 232.34 72 232.34 2 L
V
N
0 F
1 (Hard Disk) 72 233.33 P
1 F
1 (Hard Disks should have an FDISK partition map, as described in [4].) 72 218.33 P
0 9 Q
0.9 (Note: since the bootsector is used to contain boot pr) 108 200 P
0.9 (ogram for \337oppies and the FDISK) 313.67 200 P
0.9 (partition map for hard disks, the) 108 190 P
3 F
2.16 ("disk-label") 241.66 190 P
0 F
0.9 ( package must use the value of the) 306.46 190 P
3 F
2.16 (bsMedia) 108 180 P
0 F
0.9 ( byte \050located at offset) 145.8 180 P
3 F
2.16 (15h) 237.02 180 P
0 F
0.9 (\051 to determine whether a partition map is pr) 253.22 180 P
0.9 (esent. If) 429.74 180 P
0.9 (the value is) 108 170 P
3 F
2.16 (0F8h) 155.95 170 P
0 F
0.9 (, it indicates a hard disk and a partition map should be pr) 177.55 170 P
0.9 (esent in the) 409.48 170 P
0.9 (bootsector; any other value indicates a \337oppy disk.) 108 160 P
114.21 144.34 72 144.34 2 L
V
N
0 10 Q
(CD-ROM) 72 145.33 T
1 F
1 (CD-ROMs should be formatted according to ISO-9660, as described in [7].) 72 130.33 P
52 295 54 720 R
V
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(10 of 15) 500 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
0 12 Q
0 X
0 0 0 1 0 0 0 K
(4.1.2.  Pr) 72 712 T
(ogram-image formats.) 117.44 712 T
1 10 Q
1 (Open Firmware must recognize a client program that is formatted as either ELF [3][8] or PE [5]. PE format) 72 695.33 P
1 (support is provided only for booting NT) 72 683.33 P
1 (; all other clients) 238 683.33 P
2 F
1 (shall) 311.44 683.33 P
1 F
1 ( use ELF) 330.89 683.33 P
1 (. Other formats) 368.2 683.33 P
2 F
1 (may) 434.52 683.33 P
1 F
1 ( be handled in an) 451.18 683.33 P
1 (implementation-speci\336c manner) 72 671.33 P
1 (.) 201.6 671.33 P
1 (After locating the \336le, Open Firmware reads the image into memory at the location speci\336ed by the) 72 652.33 P
5 F
2.4 (load-) 488.94 652.33 P
2.3 (base) 72 640.33 P
1 F
0.96 ( Con\336guration V) 96 640.33 P
0.96 (ariable. Then, Open Firmware must perform the following procedure to prepare the image) 164.59 640.33 P
1 (for execution.) 72 628.33 P
5 F
(init-program) 72 609.33 T
3 F
(.) 144 609.33 T
(examine the header of the image.) 90 595.33 T
(set restart?) 90 584.33 T
5 F
(false) 168 584.33 T
3 F
(if the image is in ELF format) 90 573.33 T
(if the) 117 562.33 T
5 F
(EI_DATA) 159 562.33 T
3 F
( field does not match) 201 562.33 T
5 F
(little-endian?) 329.5 562.33 T
3 F
(set) 144 551.33 T
5 F
(little-endian?) 168 551.33 T
3 F
( appropriately.) 252 551.33 T
(set restart?) 144 540.33 T
5 F
(true) 222 540.33 T
3 F
(locate the PowerPC Note Section) 117 529.33 T
(if the Note Section\325s descriptor is not correct) 117 518.33 T
(set Configuration Variables appropriately) 144 507.33 T
(set restart?) 144 496.33 T
5 F
(true) 222 496.33 T
3 F
(if restart?) 117 485.33 T
(restart the system, possibly by executing) 144 474.33 T
5 F
(reset-all) 396 474.33 T
3 F
(else) 117 463.33 T
(move and/or relocate the ELF image.) 144 452.33 T
(else) 90 441.33 T
(if the file is in PE format) 90 430.33 T
(if) 117 419.33 T
5 F
(little-endian?) 131.5 419.33 T
3 F
(is) 218 419.33 T
5 F
(false) 232.5 419.33 T
3 F
(set) 144 408.33 T
5 F
(little-endian?) 168 408.33 T
3 F
( to) 252 408.33 T
5 F
(true) 276 408.33 T
1 F
(.) 300 408.33 T
3 F
(restart the system, possibly by executing) 144 397.33 T
5 F
(reset-all) 396 397.33 T
3 F
(else) 117 386.33 T
(move and/or relocate the PE image.) 144 375.33 T
(else) 90 364.33 T
(FAIL, in an implementation -specific manner.) 117 353.33 T
0 14 Q
(4.2.) 72 323.67 T
5 F
("obp-tftp") 100 323.67 T
0 F
( Support Package) 184 323.67 T
1 10 Q
1 (The) 72 306.33 P
3 F
2.4 ("obp-tftp") 91.05 306.33 P
1 F
1 ( Support Package of an Open Firmware implementation \050used to) 151.05 306.33 P
5 F
2.4 (load) 421.57 306.33 P
1 F
1 ( from) 445.57 306.33 P
3 F
2.4 ("network") 472.01 306.33 P
1 F
1 (devices\051) 72 294.33 P
2 F
1 (shall) 108.82 294.33 P
1 F
1 ( support the BOOTP protocol, as described in [6] and) 128.27 294.33 P
2 F
1 (shall) 354.63 294.33 P
1 F
1 ( not require the server to support any) 374.08 294.33 P
1 (vendor extensions.) 72 282.33 P
0 14 Q
(5.  Pr) 72 251.67 T
(operties) 104.02 251.67 T
1 10 Q
1 (This section describes the standard properties of PowerPC Reference Platform Open Firmware implementation.) 72 234.33 P
0 14 Q
(5.1.  Root node pr) 72 203.67 T
(operties) 178.3 203.67 T
1 10 Q
1 (The following properties of the root node \050") 72 186.33 P
3 F
2.4 (/) 254.44 186.33 P
1 F
1 ("\051 shall be creates by an Open Firmware implementation.) 260.44 186.33 P
0 9 Q
0.9 (Note: The r) 108 168 P
0.9 (oot node typically corr) 154.12 168 P
0.9 (esponds to the common pr) 243.4 168 P
0.9 (ocessor bus in a PowerPC) 347.84 168 P
(system) 108 158 T
5 10 Q
("#address-cells") 72 143.33 T
1 F
1 (Standard property) 90 128.33 P
1 (, encoded as with) 162.28 128.33 P
5 F
2.4 (encode-int) 238.21 128.33 P
1 F
1 (, that speci\336es the number of cells required to represent) 298.21 128.33 P
1 (physical addresses on the processor bus; the value of ") 90 118.33 P
5 F
2.4 (#address-cells) 316.65 118.33 P
1 F
1 (" for the processor bus) 400.65 118.33 P
2 F
1 (shall) 498.32 118.33 P
1 F
1 ( be) 517.77 118.33 P
(1.) 90 108.33 T
5 F
("clock-frequency") 72 90.33 T
1 F
1 (Standard property) 90 75.33 P
1 (, encoded as with) 162.28 75.33 P
5 F
2.4 (encode-int) 238.21 75.33 P
1 F
1 (, that represents the primary system bus speed \050in hertz\051.) 298.21 75.33 P
52 72 54 213 R
V
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(11 of 15) 500 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
5 10 Q
0 X
0 0 0 1 0 0 0 K
("system-id") 72 713.33 T
1 F
1 (Standard property) 90 698.33 P
1 (, encoded as with) 162.28 698.33 P
5 F
2.4 (encode-string) 238.21 698.33 P
1 F
1 (, that contains the identi\336cation of the computer) 316.21 698.33 P
1 (system.  This string shall be unique across all systems and all manufacturers.  If the system-id begins with) 90 688.33 P
1 ("0", it shall be of the form "0nnnnnnmmmmmm" where nnnnnn is a sequence of 6 uppercase hexadecimal) 90 678.33 P
1 (digits representing a 24-bit Or) 90 668.33 P
1 (ganizationally Unique Identi\336er \050OUI\051 assigned by the IEEE Registration) 214.36 668.33 P
0.93 (Authority Committee, and mmmmmm is a sequence of 6 uppercase hexadecimal digits representing a 24-bit) 90 658.33 P
1 (binary number assigned by the manufacturer to assure uniqueness.) 90 648.33 P
0 9 Q
0.9 (Note: For systems with built-in ethernet or other IEEE 802-style interfaces, the 6-byte) 108 631 P
0.9 (MAC addr) 108 621 P
0.9 (ess assigned to that interface meets the r) 150.98 621 P
0.9 (equir) 311.34 621 P
0.9 (ements and should be used as the) 331.68 621 P
(system-id.) 108 611 T
0 14 Q
(6.  Halt/Reboot) 72 581.67 T
1 10 Q
1 (The "halt procedure" feature de\336ned in earlier versions of this binding has been deleted in this version in favor) 72 564.33 P
1 (of a similar service provided by the "R) 72 552.33 P
1 (T) 233.29 552.33 P
1 (AS" services de\336ned by the CHRP binding[12].  PR*P \336rmware that) 238.6 552.33 P
1 (wishes to provide a reboot service that will work after an operating system has rendered the Open Firmware) 72 540.33 P
1 (client interface inoperable should implement the R) 72 528.33 P
1 (T) 280.15 528.33 P
1 (AS "reboot" service.) 285.46 528.33 P
0 14 Q
(7.  Client Pr) 72 497.67 T
(ogram Requir) 144.07 497.67 T
(ements) 228.2 497.67 T
(7.1.  Client Pr) 72 465.67 T
(ogram Format) 154.57 465.67 T
1 10 Q
1 (The data format of a client program compliant with this speci\336cation) 72 448.33 P
2 F
1 (shall) 361.02 448.33 P
1 F
1 ( be either ELF \050Executable and) 380.47 448.33 P
1 (Linkage Format\051 as de\336ned by [3][8], and extended by section) 72 436.33 P
1 (7.1.1., or PE \050Portable Executable\051 as de\336ned by) 333.45 436.33 P
1 ([5]. The standard ELF format contains explicit indication as to the program's execution modes \050e.g., 32- or 64-) 72 424.33 P
1 (bit, Big- or Little-Endian\051; this version of the speci\336cation only deals with the 32-bit version \050i.e.,) 72 412.33 P
3 F
(ELFCLASS32) 72 400.33 T
1 F
(\051.) 132 400.33 T
0 9 Q
0.9 (Note: other client pr) 108 382 P
0.9 (ogram formats may be supported, in an implementation speci\336c) 188.77 382 P
0.9 (manner) 108 372 P
0.9 (, by an Open Firmwar) 137.17 372 P
0.9 (e implementation.) 226.36 372 P
1 10 Q
1 (A standard) 72 357.33 P
2 F
1 (client pr) 120.1 357.33 P
1 (ogram) 154.34 357.33 P
1 F
1 ( shall be statically linked, requiring no relocation of the image. The program's entry) 180.45 357.33 P
1 (point \050) 72 345.33 P
3 F
2.4 (e_entry) 99.39 345.33 P
1 F
1 (\051) 141.39 345.33 P
2 F
1 (shall) 148.22 345.33 P
1 F
1 ( contain the address of the \336rst PowerPC instruction of the client program. It is the) 167.67 345.33 P
1 (responsibility of the client program to establish the appropriate value of the T) 72 333.33 P
1 (OC \050) 393.78 333.33 P
3 F
2.4 (%r2) 414.5 333.33 P
1 F
1 (\051, if necessary) 432.5 333.33 P
1 (.) 489.66 333.33 P
0 9 Q
0.9 (Note: the entry point is the addr) 108 315 P
0.9 (ess of the \336rst instruction of the client pr) 236.73 315 P
0.9 (ogram, not that) 399.25 315 P
0.9 (of a pr) 108 305 P
0.9 (ocedur) 135.13 305 P
0.9 (e descriptor) 161.47 305 P
0.9 (.) 207.28 305 P
0 12 Q
(7.1.1.  ELF Note Section) 72 281 T
1 10 Q
1 (Part of the process of loading a client program involves verifying its environmental requirements \050e.g., endian-) 72 264.33 P
1 (ness and address translation mode\051 against the current \336rmware con\336guration. The client's endian-ness can be) 72 252.33 P
1 (directly determined by examining the ELF EI-DA) 72 240.33 P
1 (T) 276.86 240.33 P
1 (A value; ELFDA) 282.17 240.33 P
1 (T) 351.94 240.33 P
1 (A2LSB \0501\051 implies Little-Endian while) 357.25 240.33 P
0.93 (ELFDA) 72 228.33 P
0.93 (T) 103.11 228.33 P
0.93 (A2MSB \0502\051 implies Big-Endian. However) 108.42 228.33 P
0.93 (, the other client requirements \050e.g., address translation mode\051) 281.43 228.33 P
1 (are de\336ned by means of an ELF Note Section \050SHT_NOTE\051. The following describes the format of the Note) 72 216.33 P
1 (Section for a client program \336le.) 72 204.33 P
0.99 (As de\336ned by [3], an ELF \336le can be "annotated" by means of Note Sections within the executable \336le. A Note) 72 185.33 P
1 (Section contains a "header" followed by a \050possibly null\051 "descriptor", as follows:) 72 173.33 P
52 170 54 720 R
V
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(12 of 15) 500 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
0.9 (Note: the endian format of the values corr) 108 536 P
0.9 (esponds to the endian-ness speci\336ed by the) 275.36 536 P
3 10 Q
2.4 (EI-) 446.92 536 P
2.4 (DATA) 108 526 P
0 9 Q
0.9 ( \336eld of the \336le.) 132 526 P
1 10 Q
1 (The format of a Note Section header can be described by an Open Firmware struct  as:) 72 511.33 P
3 F
(struct) 90 492.33 T
(\134 Note Section header for Open Firmware) 144 492.33 T
(/L) 90 481.33 T
(field) 117 481.33 T
(ns.namesz) 171 481.33 T
(\134 length of ns.name, including NULL) 252 481.33 T
(/L) 90 470.33 T
(field) 117 470.33 T
(ns.descrsz) 171 470.33 T
(/L) 90 459.33 T
(field) 117 459.33 T
(ns.type) 171 459.33 T
(0) 90 448.33 T
(field) 117 448.33 T
(ns.name) 171 448.33 T
(\134 NULL-terminated, /L padded) 252 448.33 T
1 F
1 (The ns.name \336eld of the PowerPC Open Firmware Note Section) 72 434.33 P
2 F
1 (shall) 341.69 434.33 P
1 F
1 ( be "PowerPC"; the) 361.14 434.33 P
3 F
2.4 (ns.type) 445.52 434.33 P
1 F
1 ( \336eld) 487.52 434.33 P
2 F
1 (shall) 512.3 434.33 P
1 F
1 (be) 72 422.33 P
3 F
2.4 (0x1275) 84.94 422.33 P
1 F
1 (.) 120.94 422.33 P
1 (Following the Note Section header is a descriptor \050) 72 403.33 P
3 F
2.4 (desc) 283.86 403.33 P
1 F
1 (\051; the length \050in bytes\051 of the descriptor is speci\336ed by) 307.86 403.33 P
1 (a word in the Note Section\325) 72 391.33 P
1 (s header \050) 186.71 391.33 P
3 F
2.4 (descsz) 227.58 391.33 P
1 F
1 (\051. The interpretation of the descriptor depends upon the kind of) 263.58 391.33 P
1 (Note Section in which it is contained. For Open Firmware, the format of the Note Section\325) 72 379.33 P
1 (s descriptor can be) 448.35 379.33 P
1 (described by an Open Firmware struct, as follows:) 72 367.33 P
3 F
(struct) 90 348.33 T
(\134 Note Section descriptor) 144 348.33 T
(/L) 90 337.33 T
(field) 117 337.33 T
(ns.real-mode) 171 337.33 T
(/L) 90 326.33 T
(field) 117 326.33 T
(ns.real-base) 171 326.33 T
(/L) 90 315.33 T
(field) 117 315.33 T
(ns.real-size) 171 315.33 T
(/L) 90 304.33 T
(field) 117 304.33 T
(ns.virt-base) 171 304.33 T
(/L) 90 293.33 T
(field) 117 293.33 T
(ns.virt-size) 171 293.33 T
0 12 Q
(7.1.2.  Handling ELF-format Client Pr) 72 269 T
(ograms) 268.45 269 T
(7.1.2.1.  Recognizing ELF-format Pr) 72 243 T
(ograms) 257.76 243 T
1 10 Q
1 ("Init-program" shall recognize client program images that conform to all the  requirements listed below as) 72 226.33 P
1 ("ELF-format" programs.) 72 214.33 P
0.86 (In the description below , \336eld names refer to \336elds within the ELF "\336le  header" structure, which is assumed to) 72 195.33 P
1 (begin at) 72 183.33 P
3 F
2.4 (load-base) 108.44 183.33 P
1 F
1 (, and of) 162.44 183.33 P
1 (fsets are  relative to the beginning of that structure.  Multi-byte numerical \336elds) 194.53 183.33 P
1 (are interpreted according to the endianness speci\336ed by the "data" \336eld  at of) 72 171.33 P
1 (fset 5.) 392.08 171.33 P
5 11 Q
(a\051) 108 152.33 T
1 10 Q
(The ") 126 152.33 T
3 F
(ident) 148.13 152.33 T
1 F
(" \336eld \050at of fset 0\051 contains the string ") 178.13 152.33 T
3 F
(\1347fELF) 336.55 152.33 T
1 F
(", where '\134) 372.55 152.33 T
3 F
(7f) 413.14 152.33 T
1 F
(' is a byte whose value) 425.14 152.33 T
(is \050hex\051 7f.  This indicates the beginning of an ELF \336le header) 126 140.33 T
(.) 374.58 140.33 T
5 11 Q
(b\051) 108 125.33 T
1 10 Q
(The ") 126 125.33 T
3 F
(class) 148.13 125.33 T
1 F
(" \336eld \050at of fset 4\051 contains the value 1. This indicates the 32-bit variant of the ELF) 178.13 125.33 T
(format.) 126 113.33 T
5 11 Q
(c\051) 108 98.33 T
1 10 Q
(The ") 126 98.33 T
3 F
(type) 148.13 98.33 T
1 F
(" \336eld \050at of) 172.13 98.33 T
(fset 16\051 contains the value 2.  This indicates that the ELF image is execut-) 220.19 98.33 T
(able.) 126 86.33 T
72 551 513 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
144 558 216 711 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
144 684 216 684 2 L
N
144 657 216 657 2 L
N
144 630 216 630 2 L
N
144 594 216 594 2 L
N
3 10 Q
(namesz) 162 695.76 T
(descsz) 162 668.76 T
(type) 168 641.76 T
(name) 168 614.07 T
(. . .) 165 605.07 T
(desc) 165 578.07 T
(. . .) 165 569.07 T
216 711 234 648 2 L
N
234 648 216 594 2 L
N
(header) 241.57 643 T
216 594 234 576 2 L
N
216 558 234 576 2 L
N
(descriptor) 241.57 572.43 T
0 0 612 792 C
52 83 54 720 R
0 X
0 0 0 1 0 0 0 K
V
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(13 of 15) 500 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
5 11 Q
0 X
0 0 0 1 0 0 0 K
(d\051) 108 713.33 T
1 10 Q
(The ") 126 713.33 T
3 F
(machine) 148.13 713.33 T
1 F
(" \336eld \050at of fset 18\051 contains the value 20.  This indicates that the ELF image is) 190.13 713.33 T
(for the PowerPC instruction set.) 126 701.33 T
0 12 Q
(7.1.2.2.  Pr) 72 676 T
(eparing ELF-format pr) 126.44 676 T
(ograms for execution) 246.22 676 T
1 10 Q
0.79 (Upon recognition of the client program image at load-base as an ELF-format  program, ") 72 659.33 P
5 F
1.89 (init-program) 438.45 659.33 P
1 F
0.79 (" shall) 510.45 659.33 P
0.85 (prepare the program for execution by performing the following sequence of steps.  In the description below , the) 72 647.33 P
1 (\336elds mentioned by name are within ELF "program header" structures, unless speci\336ed otherwise.) 72 635.33 P
5 11 Q
(a\051) 108 616.33 T
1 10 Q
-0.23 (Search for an ELF "note" section of type ") 126 616.33 P
3 F
-0.56 (1275) 293.56 616.33 P
1 F
-0.23 (" as de\336ned in Section) 317.56 616.33 P
-0.23 (7.1.1. on page) 408.76 616.33 P
-0.23 (1) 467.17 616.33 P
-0.23 (1.  If one is) 471.8 616.33 P
(found, and the values speci\336ed by its descriptor do not match the \336rmware's current operating) 126 604.33 T
(mode,  set the appropriate con\336guration variables to the values speci\336ed in the note section) 126 592.33 T
-0.31 (descriptor , and restart the \336rmware so that it will re-execute the ") 126 580.33 P
5 F
-0.74 (boot) 385.48 580.33 P
1 F
-0.31 (" command that resulted in) 409.48 580.33 P
(the execution of) 126 568.33 T
5 F
(init-program) 192.93 568.33 T
5 11 Q
(b\051) 108 553.33 T
1 10 Q
(Allocate and map suf) 126 553.33 T
(\336cient physical memory for all the program  sections of type ") 211.08 553.33 T
3 F
(PT_LOAD) 459.85 553.33 T
1 F
(") 501.85 553.33 T
(\050i.e. whose ") 126 541.33 T
3 F
(p_type) 176.18 541.33 T
1 F
(" \336eld contains the value 1\051 listed in the ELF image's program headers.) 212.18 541.33 T
5 11 Q
(c\051) 108 526.33 T
1 10 Q
-0.08 (Copy the program headers to a "safe" location to guard against the possibility of them being over) 126 526.33 P
-0.08 (-) 512.65 526.33 P
(written by the following steps.) 126 514.33 T
5 11 Q
(d\051) 108 499.33 T
1 10 Q
(For each program section of type ") 126 499.33 T
3 F
(PT_LOAD) 265.05 499.33 T
1 F
(":) 307.05 499.33 T
5 11 Q
(1.) 126 484.33 T
1 10 Q
( Copy the initialized portion of the program section from its current location in the loaded) 139.2 484.33 T
(image to the location given by the section's ") 144 472.33 T
3 F
(p_vaddr) 323.2 472.33 T
1 F
(" \336eld.) 365.2 472.33 T
5 11 Q
(2.) 126 457.33 T
1 10 Q
(Fill the rest of the copied section with zero bytes \050i.e.  \336ll ") 139.2 457.33 T
3 F
(p_f) 374.65 457.33 T
(ilez - p_memsz) 392.65 457.33 T
1 F
(" bytes) 476.65 457.33 T
(beginning at the address ") 144 445.33 T
3 F
(p_vaddr + p_f) 247.51 445.33 T
(ilesz) 325.51 445.33 T
1 F
("\051.) 355.51 445.33 T
5 11 Q
(e\051) 108 430.33 T
1 10 Q
(Set the saved program state so that subsequent execution of ") 126 430.33 T
5 F
(go) 370.6 430.33 T
1 F
(" will begin execution at the vir-) 382.6 430.33 T
(tual address given by the ") 126 418.33 T
3 F
(e_entry) 232.01 418.33 T
1 F
("\336eld in the ELF \336le header .) 274.01 418.33 T
1 (The implementation need not take precautions to ensure that the process of copying and zeroing program) 72 403.33 P
1 (sections does not overwrite the portions of the load image that have not yet been copied.  In order to guarantee) 72 391.33 P
1 (correct copying, the value of the "load-base" con\336guration variable and the destination addresses of the various) 72 379.33 P
1 (sections must be such that such overwriting does not occur) 72 367.33 P
1 (.  One suf) 315.7 367.33 P
1 (\336cient condition is that the region of) 357.4 367.33 P
1 (memory beginning at load-base, of size equal to the size of the loaded image, be disjoint from the regions of) 72 355.33 P
1 (memory to which the program sections are copied and zero-\336lled.  There are other less-stringent suf) 72 343.33 P
1 (\336cient) 486.73 343.33 P
1 (conditions, especially for simple ELF images with a small number of program sections that are to be copied to) 72 331.33 P
1 (contiguous regions.) 72 319.33 P
1 (An example of another suf) 72 300.33 P
1 (\336cient condition would be as follows:) 182.46 300.33 P
1 (An ELF client program consists of two segments: a text segment \050read/execute\051 and a data segment \050read/write/) 72 281.33 P
1 (execute\051.  Only the data segment may have a memory size greater than the \336le size \050implied "bss"\051. Further , to) 72 269.33 P
1 (ease the problem of mapping the image for V) 72 257.33 P
1 (irtual mode, the page of) 261.03 257.33 P
1 (fsets within memory must equal the page) 360.11 257.33 P
1 (of) 72 245.33 P
1 (fsets within the \336le.  The de\336nition of "page of) 80.15 245.33 P
1 (fset" is those bits of an address which are below the) 276.37 245.33 P
1 (granularity of memory allocation or mapping. \050i.e. page size of 4K implies page of fset mask of 4K - 1\051) 72 233.33 P
1 (An implementation shall permit the ELF image to contain other sections in addition to those described above,) 72 214.33 P
1 (but need not take any action beyond that de\336ned above as a result of the presence of such other sections.) 72 202.33 P
0 14 Q
(8.  Extensions for PowerPC Refer) 72 171.67 T
(ence Platform systems) 272.37 171.67 T
1 10 Q
0.95 (This section describes the properties, methods, and device subtrees that are applicable to devices required by the) 72 154.33 P
1 (PowerPC Reference Platform architecture. It is strongly recommended that other platforms follow these) 72 142.33 P
1 (de\336nitions for the corresponding devices.) 72 130.33 P
52 167 54 720 R
V
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(14 of 15) 500 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(8.1.  Display devices) 72 710.67 T
1 10 Q
1 (Display device packages \050i.e..,) 72 693.33 P
3 F
2.4 (device_type) 200.41 693.33 P
1 F
1 ( =) 266.41 693.33 P
3 F
2.4 ("display") 279.05 693.33 P
1 F
1 (\051 for PowerPC Reference Platform systems) 333.05 693.33 P
1 (should include in their implementation all the properties and methods called for in [10] and [1) 72 681.33 P
1 (1].) 462.42 681.33 P
0 14 Q
(8.2.  Device support) 72 650.67 T
1 10 Q
1 (Open Firmware implementations for PowerPC Reference Platform systems must implement those device types) 72 633.33 P
1 (from the IEEE 1275 Device Support Extensions document [9] that are appropriate to the hardware present.) 72 621.33 P
0 14 Q
(8.3.  Conventions for devices on ISA and SCSI buses) 72 590.67 T
1 10 Q
1 (This section de\336nes the naming and device type conventions for typical devices on ISA and SCSI buses. The) 72 573.33 P
1 (following lists are the values of the "name" and "device-type" properties of the devices on an ISA bus:) 72 561.33 P
5 F
(name) 90 542.33 T
(device_type) 198 542.33 T
(8042) 90 531.33 T
(kbd) 117 520.33 T
3 F
("keyboard") 198 520.33 T
5 F
(mouse) 117 509.33 T
3 F
("mouse") 198 509.33 T
5 F
(fdc) 90 498.33 T
3 F
("fdc") 198 498.33 T
5 F
(disk) 117 487.33 T
3 F
("block") 198 487.33 T
5 F
(tape) 117 476.33 T
3 F
("byte") 198 476.33 T
5 F
(com) 90 465.33 T
3 F
("serial") 198 465.33 T
5 F
(timer) 90 454.33 T
3 F
("timer") 198 454.33 T
5 F
(lpt) 90 443.33 T
3 F
("parallel") 198 443.33 T
5 F
(ide) 90 432.33 T
3 F
("ide") 198 432.33 T
5 F
(disk) 117 421.33 T
3 F
("block") 198 421.33 T
5 F
(cdrom) 117 410.33 T
3 F
("block") 198 410.33 T
5 F
(nvram) 90 399.33 T
3 F
("nvram") 198 399.33 T
5 F
(rtc) 90 388.33 T
3 F
("rtc") 198 388.33 T
0 9 Q
0.9 (Note: The "kbd" and "mouse" names ar) 108 371 P
0.9 (e indented to show that they ar) 269.72 371 P
0.9 (e the child nodes) 393.45 371 P
0.9 (of the 8042 node.) 108 361 P
1 10 Q
1 (Some systems use an I/O controller) 72 346.33 P
1 (, often called a super I/O chip, which provides control functions of multiple) 218.53 346.33 P
1 (I/O devices. When a system uses a super I/O chip, a device node representing the super I/O chip itself need not) 72 334.33 P
1 (exist. Instead, the device nodes of the devices attached to the super I/O chip may be direct children of the bus) 72 322.33 P
1 (node representing the bus to which the super I/O chip is attached.) 72 310.33 P
1 (The following are the values of the name and device-type properties of the devices on SCSI bus:) 72 291.33 P
5 F
(name) 90 272.33 T
(device_type) 198 272.33 T
(scsi) 90 261.33 T
3 F
("scsi-2") 198 261.33 T
5 F
(disk) 117 250.33 T
3 F
("block") 198 250.33 T
5 F
(tape) 117 239.33 T
3 F
("byte") 198 239.33 T
0 9 Q
0.9 (Note: SCSI contr) 108 222 P
0.9 (oller is consider) 175.63 222 P
0.9 (ed a bus device in the device tr) 237.76 222 P
0.9 (ee for PowerPC Open) 361.14 222 P
0.9 (Firmwar) 108 212 P
0.9 (e. The "disk" and "tape" names ar) 142.33 212 P
0.9 (e indented to show that they ar) 282.3 212 P
0.9 (e the child) 406.03 212 P
0.9 (nodes of the scsi node.) 108 202 P
1 10 Q
1 (It is strongly recommended that the "compatible" property be implemented for ISA and SCSI bus devices to) 72 187.33 P
1 (help operating systems \336nd appropriate device drivers for these devices.) 72 175.33 P
0 14 Q
(8.4.  /aliases node pr) 72 144.67 T
(operties) 192.32 144.67 T
1 10 Q
1 (An implementation of Open Firmware for the PowerPC Reference Platform shall provide the following aliases) 72 127.33 P
1 (under ") 72 115.33 P
3 F
2.4 (/aliases) 102.35 115.33 P
1 F
1 (" node if an applicable device exists:) 150.35 115.33 P
3 F
(disk) 90 96.33 T
(tape) 90 85.33 T
52 473 54 516 R
V
52 396 54 439 R
V
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(          PowerPC Refer) 144.91 748 T
(ence Platform binding to Open Firmwar) 254.99 748 T
(e) 461.76 748 T
(August 5, 1996 Revision 0.03 DRAFT) 72 36 T
(15 of 15) 500 36 T
72 738 540 738 2 L
1 H
2 Z
N
72 54 540 54 2 L
N
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
27 72 54 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27 72 54 720 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(1) 36 711 T
(2) 36 699 T
(3) 36 687 T
(4) 36 675 T
(5) 36 663 T
(6) 36 651 T
(7) 36 639 T
(8) 36 627 T
(9) 36 615 T
(10) 36 603 T
(11) 36 591 T
(12) 36 579 T
(13) 36 567 T
(14) 36 555 T
(15) 36 543 T
(16) 36 531 T
(17) 36 519 T
(18) 36 507 T
(19) 36 495 T
(20) 36 483 T
(21) 36 471 T
(22) 36 459 T
(23) 36 447 T
(24) 36 435 T
(25) 36 423 T
(26) 36 411 T
(27) 36 399 T
(28) 36 387 T
(29) 36 375 T
(30) 36 363 T
(31) 36 351 T
(32) 36 339 T
(33) 36 327 T
(34) 36 315 T
(35) 36 303 T
(36) 36 291 T
(37) 36 279 T
(38) 36 267 T
(39) 36 255 T
(40) 36 243 T
(41) 36 231 T
(42) 36 219 T
(43) 36 207 T
(44) 36 195 T
(45) 36 183 T
(46) 36 171 T
(47) 36 159 T
(48) 36 147 T
(49) 36 135 T
(50) 36 123 T
(51) 36 111 T
(52) 36 99 T
(53) 36 87 T
(54) 36 75 T
27 72 54 720 C
0 0 612 792 C
3 10 Q
0 X
0 0 0 1 0 0 0 K
(cdrom) 90 713.33 T
(keyboard) 90 702.33 T
(screen) 90 691.33 T
(scsi) 90 680.33 T
(com1) 90 669.33 T
(The serial port at I/O address 0x3f8) 144 669.33 T
(com2) 90 658.33 T
(The serial port at I/O address 0x2f8) 144 658.33 T
(floppy) 90 647.33 T
(The primary floppy drive) 144 647.33 T
(net) 90 636.33 T
52 644 54 676 R
V
FMENDPAGE
%%EndPage: "15" 15
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 15
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier
%%+ Times-BoldItalic
%%+ Courier-Bold
%%EOF
