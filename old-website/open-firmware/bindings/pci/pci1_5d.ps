%!PS-Adobe-3.0
%%Title: (PCI Binding 1.5)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (16:51 Friday, March 24, 1995)
%%For: (Ron Hochsprung)
%%Pages: 21
%%DocumentFonts: Times-Bold Times-BoldItalic Times-Roman Symbol Times-Italic Courier-Bold Courier Courier-BoldOblique Courier-Oblique
%%DocumentNeededFonts: Times-Bold Times-BoldItalic Times-Roman Symbol Times-Italic Courier-Bold Courier Courier-BoldOblique Courier-Oblique
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -31 761 581
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 202 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
statusdict /manualfeed false put
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Cassette

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
lettersmall
%%EndFeature
}featurecleanup
(Ron Hochsprung)setjob
/pT[1 0 0 -1 31 761]def/mT[1 0 0 -1 31 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-BoldItalic
%%IncludeFont: Times-Roman
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Courier-Bold
%%IncludeFont: Courier
%%IncludeFont: Courier-BoldOblique
%%IncludeFont: Courier-Oblique
/f0_1/Times-Bold :mre
/f0_24 f0_1 24 scf
/f0_10 f0_1 10 scf
/f0_9 f0_1 9 scf
/f1_1/Times-BoldItalic :mre
/f1_24 f1_1 24 scf
/f1_10 f1_1 10 scf
/f1_9 f1_1 9 scf
/f2_1/Times-Roman :mre
/f2_12 f2_1 12 scf
/f2_10 f2_1 10 scf
/f2_9 f2_1 9 scf
/f3_1/Symbol :bsr
240/apple pd
:esr /f3_10 f3_1 10 scf
/f3_9 f3_1 9 scf
/f4_1/Times-Italic :mre
/f4_10 f4_1 10 scf
/f4_9 f4_1 9 scf
/f5_1 f3_1 :mi
/f5_10 f5_1 10 scf
/f6_1 f4_1 :v def
/f7_1 f2_1 :v def
/f8_1 f2_1 1.087 scf
/f8_12 f8_1 12 scf
/f9_1/Courier-Bold :mre
/f9_10 f9_1 10 scf
/f9_9 f9_1 9 scf
/f10_1 f3_1 def
/f10_10 f10_1 10 scf
/f11_1/Courier :mre
/f11_10 f11_1 10 scf
/f11_9 f11_1 9 scf
/f14_1/Courier-BoldOblique :mre
/f14_10 f14_1 10 scf
/f14_9 f14_1 9 scf
/f16_1/Courier-Oblique :mre
/f16_10 f16_1 10 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 1 of 21)setjob
%%EndPageSetup
gS 0 0 552 730 rC
-1 -1 53 28 1 1 52 27 @b
-1 -1 53 28 1 1 52 27 @b
53 28 -1 1 525 27 1 53 27 @a
-1 -1 526 28 1 1 525 27 @b
-1 -1 526 28 1 1 525 27 @b
-1 -1 53 52 1 1 52 28 @b
-1 -1 526 52 1 1 525 28 @b
176 74 :M
f0_24 sf
5.455 .546(PCI Bus Binding to)J
-1 -1 53 80 1 1 52 52 @b
-1 -1 526 80 1 1 525 52 @b
-1 -1 53 108 1 1 52 80 @b
-1 -1 526 108 1 1 525 80 @b
193 126 :M
10.285 1.028(IEEE 1275-1994)J
-1 -1 53 132 1 1 52 108 @b
-1 -1 526 132 1 1 525 108 @b
94 154 :M
7.998 .8(Standard for Boot \(Initialization,)J
-1 -1 53 160 1 1 52 132 @b
-1 -1 526 160 1 1 525 132 @b
144 178 :M
8.783 .878(Configuration\) Firmware)J
-1 -1 53 184 1 1 52 160 @b
-1 -1 526 184 1 1 525 160 @b
-1 -1 53 206 1 1 52 184 @b
-1 -1 526 206 1 1 525 184 @b
-1 -1 53 228 1 1 52 206 @b
-1 -1 526 228 1 1 525 206 @b
215 250 :M
11.434 1.143(Revision 1.5)J
-1 -1 53 256 1 1 52 228 @b
-1 -1 526 256 1 1 525 228 @b
245 278 :M
f1_24 sf
1.998(DRAFT)A
-1 -1 53 284 1 1 52 256 @b
-1 -1 526 284 1 1 525 256 @b
-1 -1 53 312 1 1 52 284 @b
-1 -1 526 312 1 1 525 284 @b
257 326 :M
f2_10 sf
.123 .012(20 March, 1995)J
-1 -1 53 328 1 1 52 312 @b
-1 -1 526 328 1 1 525 312 @b
162 342 :M
-.024(Prepared by the Open Firmware Task Force of the PCI Alliance)A
-1 -1 53 344 1 1 52 328 @b
-1 -1 526 344 1 1 525 328 @b
52 362 -1 2 525 360 1 52 360 @a
-2 -1 526 362 2 1 525 360 @b
-1 -1 53 360 1 1 52 344 @b
-1 -1 526 360 1 1 525 344 @b
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 2 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
306 396 :M
f8_12 sf
.739 .074( )J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 3 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
86 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
410 46 :M
-.005(PCI Bus Binding to Open Firmware)A
84 49 -1 1 556 48 1 84 48 @a
317 754 :M
(1)S
169 76 :M
f0_10 sf
2.521 .252(Foreword by the Chairman of the IEEE 1275 Working Group)J
63 76 :M
f2_10 sf
(1)S
222 88 :M
-.006(\(This foreword is not a part of the Specification.\))A
63 88 :M
(2)S
86 118 :M
f0_10 sf
.506(Introduction)A
63 118 :M
f2_10 sf
(3)S
86 134 :M
.749 .075(Firmware is the ROM-based software that controls a computer between the time it is turned on and the time the)J
63 134 :M
(4)S
86 146 :M
.556 .056(primary operating system takes control of the machine. Firmware's responsibilities include testing and initializing)J
63 146 :M
(5)S
86 158 :M
.853 .085(the hardware, determining the hardware configuration, loading \(or booting\) the operating system, and providing)J
63 158 :M
(6)S
86 170 :M
-.062(interactive debugging facilities in case of faulty hardware or software.)A
63 170 :M
(7)S
86 200 :M
f0_10 sf
4.98 .498(Historical Perspective)J
63 200 :M
f2_10 sf
(8)S
86 216 :M
1.517 .152(Historically, firmware designs have been proprietary and often specific to a particular bus or instruction set)J
63 216 :M
(9)S
86 228 :M
.973 .097(architecture \(ISA\). This need not be the case. Firmware can be designed to be machine-independent and easily)J
58 228 :M
(10)S
86 240 :M
-.004(portable to different hardware. There is a strong analogy with operating systems in this respect. Prior to the advent of)A
58 240 :M
(11)S
86 252 :M
.507 .051(the portable UNIX operating system in the mid-seventies, the prevailing wisdom was that operating systems must)J
58 252 :M
(12)S
86 264 :M
-.016(be heavily tuned to a particular computer system design and thus effectively proprietary to the vendor of that system.)A
58 264 :M
(13)S
86 286 :M
-.05(The )A
f4_10 sf
-.046(IEEE 1275-1994 Standard for Boot \(Initialization, Configuration\), Core Requirements and Practices)A
f2_10 sf
-.042(  \(referred to)A
58 286 :M
(14)S
86 298 :M
1.206 .121(in the remainder of this document as Open Firmware\) specification is based on Sun Microsystem's OpenBoot)J
58 298 :M
(15)S
86 310 :M
.556 .056(firmware. The OpenBoot design effort began in 1988, when Sun was building computers based on three different)J
58 310 :M
(16)S
86 322 :M
1.535 .154(processor families, thus OpenBoot was designed from the outset to be ISA-independent \(independent of the)J
58 322 :M
(17)S
86 334 :M
.544 .054(Instruction Set Architecture\). The first version of OpenBoot was introduced on Sun's SPARCstation 1 computers.)J
58 334 :M
(18)S
86 346 :M
2.087 .209(Based on experience with those machines, OpenBoot version 2 was developed, and was first shipped on)J
58 346 :M
(19)S
86 358 :M
.082 .008(SPARCstation 2 computers. This standard is based on OpenBoot version 2.)J
58 358 :M
(20)S
86 388 :M
f0_10 sf
2.941 .294(Purpose and Features of the Open Firmware Specification)J
58 388 :M
f2_10 sf
(21)S
86 404 :M
-.022(Open Firmware has the following features:)A
58 404 :M
(22)S
104 420 :M
-.019(Mechanism for loading and executing programs \(such as operating systems\) from disks, tapes, network)A
58 420 :M
(23)S
104 432 :M
-.114(interfaces, and other devices.)A
58 432 :M
(24)S
104 448 :M
-.082(ISA-independent method for identifying devices "plugged-in" to expansion buses, and for providing firmware and)A
58 448 :M
(25)S
104 460 :M
-.093(diagnostics drivers for these devices.)A
58 460 :M
(26)S
104 476 :M
-.037(An extensible and programmable command language based on the Forth programming language.)A
58 476 :M
(27)S
104 492 :M
-.018(Methods for managing user-configurable options stored in non-volatile memory.)A
58 492 :M
(28)S
104 508 :M
-.021(A "call back" interface allowing other programs to make use of Open Firmware services.)A
58 508 :M
(29)S
104 524 :M
-.064(Debugging tools for hardware, firmware, firmware drivers, and system software.)A
58 524 :M
(30)S
86 554 :M
f0_10 sf
3.197 .32(Purpose of this Bus Binding)J
58 554 :M
f2_10 sf
(31)S
86 570 :M
2.133 .213(This document specifies the application of Open Firmware to the PCI Local Bus, including PCI-specific)J
58 570 :M
(32)S
86 582 :M
-.086(requirements and practices for address format, interrupts, probing, and related properties and methods.)A
58 582 :M
(33)S
86 604 :M
-.051(The core requirements and practices specified by Open Firmware must be augmented by system-specific requirements)A
58 604 :M
(34)S
86 616 :M
.167 .017(to form a complete specification for the firmware for a particular system. This document establishes such additional)J
58 616 :M
(35)S
86 628 :M
-.002(requirements pertaining to PCI.)A
58 628 :M
(36)S
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 4 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
57 46 :M
f2_10 sf
-.005(PCI Bus Binding to Open Firmware)A
437 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
55 49 -1 1 527 48 1 55 48 @a
288 754 :M
(2)S
57 82 :M
f0_10 sf
2.707 .271(Task Group Members)J
34 82 :M
f2_10 sf
(1)S
57 98 :M
-.04(The following individuals were members of the Task Group that produced this document:)A
34 98 :M
(2)S
57 114 :M
.235 .023(Ron Hochsprung, Apple Computer, Inc.)J
34 114 :M
(3)S
57 130 :M
-.005(Mitch Bradley, FirmWorks \(Chair, IEEE P1275 Working Group\))A
34 130 :M
(4)S
57 146 :M
.083 .008(David Kahn, Sun Microsystems, Inc. \(Vice Chair, IEEE P1275 Working Group\))J
34 146 :M
(5)S
34 162 :M
(6)S
57 178 :M
.013(TRADEMARKS)A
34 178 :M
(7)S
57 194 :M
f0_10 sf
.831 .083(Sun Microsystems)J
f2_10 sf
.423 .042( is a registered trademark of Sun Microsystems, Inc. in the United States and other countries.)J
34 194 :M
(8)S
57 210 :M
f0_10 sf
.149(OpenBoot)A
f2_10 sf
.417 .042( is a trademark of Sun Microsystems, Inc.)J
34 210 :M
(9)S
57 226 :M
f0_10 sf
(UNIX)S
f2_10 sf
-.002( is a registered trademark of UNIX System Laboratories, Inc.)A
29 226 :M
(10)S
57 242 :M
f0_10 sf
.189(SPARC)A
f2_10 sf
.476 .048( is a registered trademark of SPARC International, Inc. Products bearing the SPARC trademark are based)J
29 242 :M
(11)S
57 254 :M
-.031(on an architecture developed by Sun Microsystems, Inc.)A
29 254 :M
(12)S
57 270 :M
f0_10 sf
.153(SPARCstation)A
f2_10 sf
.496 .05( is a trademark of SPARC International, Inc., licensed exclusively to Sun Microsystems, Inc.)J
29 270 :M
(13)S
57 286 :M
-.004(All other products or services mentioned in this document are identified by the trademarks, service marks, or product)A
29 286 :M
(14)S
57 298 :M
.272 .027(names as designated by the companies who market those products. Inquiries concerning such trademarks should be)J
29 298 :M
(15)S
57 310 :M
-.042(made directly to those companies.)A
29 310 :M
(16)S
29 326 :M
(17)S
57 342 :M
f0_10 sf
5.45 .545(Revision History)J
29 342 :M
f2_10 sf
(18)S
57 358 :M
f0_10 sf
5.875 .587(Revision 0.1)J
129 358 :M
4.018 .402(Oct. 7, 1993)J
237 358 :M
f2_10 sf
.353 .035(First revision distributed outside of task group \(the number 0.1 did not)J
29 358 :M
(19)S
201 370 :M
-.042(appear on  the cover\).)A
29 370 :M
(20)S
57 386 :M
f0_10 sf
5.875 .587(Revision 0.2)J
129 386 :M
4.205 .42(Oct. 28, 1993)J
237 386 :M
f2_10 sf
1.395 .139(Changed the designator for 64-bit memory space from "M" to "x".)J
29 386 :M
(21)S
201 398 :M
.061 .006(Changed the parts of the specification related to PCI to PCI bridges to reflect the)J
29 398 :M
(22)S
201 410 :M
-.071(0.4 bridge architecture spec.)A
29 410 :M
(23)S
57 426 :M
f0_10 sf
5.875 .587(Revision 1.0)J
129 426 :M
4.16 .416(April 14, 1994)J
237 426 :M
f2_10 sf
.685 .069(Changed references from P1275 to Open Firmware.  Changed size of)J
29 426 :M
(24)S
201 438 :M
-.079(fields for I/O address representations to reflect PCI architecture.)A
29 438 :M
(25)S
57 454 :M
f0_10 sf
3.589 .359(Revision 1.1  June 28, 1994)J
237 454 :M
f2_10 sf
-.119(Added 't'-bit for aliasing, and discussion of "hard-decode" cases.)A
29 454 :M
(26)S
57 470 :M
f0_10 sf
5.875 .587(Revision 1.2)J
129 470 :M
4.226 .423(August 7, 1994)J
237 470 :M
f2_10 sf
-.132(Added note about DD encoding.  Added new standard properties for those)A
29 470 :M
(27)S
201 482 :M
.828 .083(of draft Rev 2.1 PCI spec.  Deleted enabling of Memory space at post-probe.)J
29 482 :M
(28)S
201 494 :M
-.156(Added driver encapsulation description.)A
29 494 :M
(29)S
57 510 :M
f0_10 sf
5.875 .587(Revision 1.3)J
129 510 :M
4.166 .417(September 27, 1994)J
237 510 :M
f2_10 sf
.128 .013(Changed generated name for Subsystem, if present.  Added rule for I/O)J
29 510 :M
(30)S
201 522 :M
-.022(assignment.  Added discussion of PCI-PCI bridge probing.)A
29 522 :M
(31)S
57 538 :M
f0_10 sf
5.875 .587(Revision 1.4)J
129 538 :M
3.945 .394(December 16, 1994)J
237 538 :M
f2_10 sf
-.021(Added Expansion ROM address assignment, 't' bit for "below 1 MB".)A
29 538 :M
(32)S
57 554 :M
f0_10 sf
5.875 .587(Revision 1.5)J
129 554 :M
3.523 .352(March 20, 1995)J
237 554 :M
f2_10 sf
.699 .07(Added Legacy devices section, "clock-frequencey" property, clarified)J
29 554 :M
(33)S
201 566 :M
-.082(address assignment, added 't' bit for relocatable I/O space.)A
29 566 :M
(34)S
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 5 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
86 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
410 46 :M
-.005(PCI Bus Binding to Open Firmware)A
84 49 -1 1 556 48 1 84 48 @a
317 754 :M
(3)S
86 82 :M
f0_10 sf
2.767 .277( Overview and References)J
63 82 :M
f2_10 sf
(1)S
86 98 :M
.559 .056(This specification describes the application of Open Firmware to computer systems that use the PCI Local bus as)J
63 98 :M
(2)S
86 110 :M
1.56 .156(defined in )J
f4_10 sf
1.907 .191(PCI Local Bus Specification, Revision 2.0, April 30, 1993)J
f2_10 sf
.879 .088( and )J
f4_10 sf
2.084 .208(PCI to PCI Bridge Architecture)J
63 110 :M
f2_10 sf
(3)S
86 122 :M
f4_10 sf
.347 .035(Specification, Revision 1.0 April 5, 1994)J
f2_10 sf
.28 .028( and is to be used in conjunction with those documents.)J
63 122 :M
(4)S
86 137 :M
f4_10 sf
10 f6_1 :p
329.998 :m
.193 .019(Note: this version applies to Revisision 2.1 which is currently undergoing review.)J
63 137 :M
f2_10 sf
(5)S
86 168 :M
f0_10 sf
3.551 .355( Definitions of Terms)J
63 168 :M
f2_10 sf
(6)S
86 184 :M
f0_10 sf
.974 .097(bus controller:)J
f2_10 sf
.539 .054(  a hardware device that implements a PCI bus.)J
63 184 :M
(7)S
86 200 :M
f0_10 sf
.253 .025(hard decode:)J
f2_10 sf
.129 .013(  a decoding which is not based upon a base register, but, rather, is fixed.)J
63 200 :M
(8)S
86 216 :M
f0_10 sf
1.766 .177(PCI device:)J
f2_10 sf
.911 .091(  a hardware device that connects to or "plugs in" to a PCI bus PCI function:  one of a number of)J
63 216 :M
(9)S
86 228 :M
.089 .009(logically-independent parts of a PCI device. Many PCI devices have only one function per device; in such cases, the)J
58 228 :M
(10)S
86 240 :M
-.046(terms "PCI function" and "PCI device" can be used interchangeably.)A
58 240 :M
(11)S
86 256 :M
f0_10 sf
.932 .093(PCI to PCI bridge:)J
f2_12 sf
.15 .015(  )J
f2_10 sf
.819 .082(a hardware device that is, from an electrical standpoint, a single PCI function on one PCI)J
58 256 :M
(12)S
86 268 :M
-.01(bus \(the "parent" bus\) and the bus controller of a secondary PCI bus \(the "child" bus\).)A
58 268 :M
(13)S
86 284 :M
f0_10 sf
.71 .071(PCI domain:)J
f2_10 sf
.357 .036(  a group of PCI buses connected together in a tree topology by PCI to PCI bridges.)J
58 284 :M
(14)S
86 300 :M
f0_10 sf
.3 .03(relocatable region:)J
f2_10 sf
.152 .015(  a range of PCI address space whose base address is established by a single base address register.)J
58 300 :M
(15)S
86 316 :M
f0_10 sf
.853 .085(Master PCI bus:)J
f2_10 sf
.533 .053(  within a PCI domain, the PCI bus that forms the root of the tree structure.)J
58 316 :M
(16)S
86 332 :M
f0_10 sf
.868 .087(bus node:)J
f2_10 sf
.559 .056(  an Open Firmware device node that represents a bus controller.  In cases where a node represents the)J
58 332 :M
(17)S
86 344 :M
.165 .016(interface, or "bridge", between one bus and another, the node is both a bus node relative to the bus it controls, and a)J
58 344 :M
(18)S
86 356 :M
.494 .049(child node of its parent bus.  Note that an Open Firmware device node is not in itself a physical hardware device;)J
58 356 :M
(19)S
86 368 :M
-.075(rather, it is a software abstraction that describes a hardware device.)A
58 368 :M
(20)S
86 384 :M
f0_10 sf
.319 .032(child node:)J
f2_10 sf
.194 .019(  an Open Firmware device node that represents a PCI function.  Such a node can correspond to either a)J
58 384 :M
(21)S
86 396 :M
.311 .031(device that is "hardwired" to a planar PCI bus, or to an "add in" expansion card that is plugged into a standard PCI)J
58 396 :M
(22)S
86 408 :M
.046 .005(Expansion Connector.)J
58 408 :M
(23)S
86 438 :M
f0_10 sf
3.313 .331( Bus Characteristics)J
58 438 :M
f2_10 sf
(24)S
86 468 :M
f0_10 sf
3.314 .331(Address Spaces)J
58 468 :M
f2_10 sf
(25)S
86 484 :M
-.063(PCI has several address spaces \(Memory, I/O, Configuration\), with different addressing characteristics.)A
58 484 :M
(26)S
86 514 :M
f0_10 sf
3.744 .374(Memory Space)J
58 514 :M
f2_10 sf
(27)S
86 530 :M
-.023(Memory Space is the primary address space of PCI; it corresponds to traditional memory and "memory-mapped" I/O.)A
58 530 :M
(28)S
86 542 :M
.622 .062(PCI allows for a full 64-bit address range in Memory Space; however, most devices will not require a full 64-bit)J
58 542 :M
(29)S
86 554 :M
1.268 .127(range.  In order to provide compatibility between devices designed for 64-bit addressing and those for 32-bit)J
58 554 :M
(30)S
86 566 :M
-.029(addressing, the 32-bit address space appears as the first 4 GB region of the 64-bit space; i.e., 64-bit addresses with the)A
58 566 :M
(31)S
86 578 :M
.369 .037(32 most-significant bits equal to 0 are used to access 32-bit devices.  64-bit initiators are required to use the 32-bit)J
58 578 :M
(32)S
86 590 :M
-.021(address protocol for any 64-bit address in which the upper 32 bits are all 0.)A
58 590 :M
(33)S
86 612 :M
.113 .011(The PCI specification requires that all of a device's relocatable resources must be mappable in Memory Space, i.e. it)J
58 612 :M
(34)S
86 624 :M
-.015(is not permissible for a resource to be mappable only in I/O Space \(described below\).)A
58 624 :M
(35)S
86 646 :M
-.004(The regions of Memory Space to which a PCI device responds are assigned dynamically during system initialization,)A
58 646 :M
(36)S
86 658 :M
.146 .015(by setting device base address registers in Configuration Space \(see below\).  The size of each such region must be a)J
58 658 :M
(37)S
86 670 :M
-.038(power of two, and the assigned base address must be aligned on a boundary equal to the size of the region.)A
58 670 :M
(38)S
86 692 :M
-.058(And encoding of the base address registers for Memory Space allow a resource to require address allocation within the)A
-1 -1 84 694 1 1 83 678 @b
58 692 :M
(39)S
86 704 :M
.332 .033(first 1 MB.  This requirement is reflected in the )J
f9_10 sf
.156("reg")A
f2_10 sf
.345 .034( property entry for that base register by having the )J
f11_10 sf
.156('t')A
f2_10 sf
.261 .026( bit)J
-1 -1 84 706 1 1 83 694 @b
58 704 :M
(40)S
86 716 :M
.131(set.)A
-1 -1 84 724 1 1 83 706 @b
58 716 :M
(41)S
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 6 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
57 46 :M
f2_10 sf
-.005(PCI Bus Binding to Open Firmware)A
437 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
55 49 -1 1 527 48 1 55 48 @a
288 755 :M
(4)S
57 64 :M
.332 .033(Memory Space addressing is "flat" across a PCI domain, in that addresses are not transformed as they cross PCI to)J
34 64 :M
(1)S
57 76 :M
.552 .055(PCI bridges.  The flat address space is not necessarily limited to a single PCI domain; the PCI design attempts to)J
34 76 :M
(2)S
57 88 :M
.385 .038(make it possible to have a flat address across multiple PCI domains that are peers of one another on a higher-level)J
34 88 :M
(3)S
57 100 :M
-.065(host address bus.)A
34 100 :M
(4)S
57 122 :M
.494 .049(An early revision of the PCI specification admitted the possibility that some devices might respond to fixed \(non-)J
-1 -1 55 124 1 1 54 108 @b
34 122 :M
(5)S
57 134 :M
.338 .034(relocatable\) address ranges. The current revision permits this behavior for VGA and IDE devices, but it is possible)J
-1 -1 55 136 1 1 54 124 @b
34 134 :M
(6)S
57 146 :M
.061 .006(that some other devices still behave that way.  The current specification allows devices to respond to fixed addresses)J
-1 -1 55 148 1 1 54 136 @b
34 146 :M
(7)S
57 158 :M
-.052(after a system reset, but provides a standard way to disable such response, which devices are required to implement.)A
-1 -1 55 166 1 1 54 148 @b
34 158 :M
(8)S
57 194 :M
f0_10 sf
3.366 .337(I/O Space)J
34 194 :M
f2_10 sf
(9)S
57 210 :M
1.348 .135(I/O Space is similar to Memory Space, except that it is intended as to be used with the special "I/O access")J
29 210 :M
(10)S
57 222 :M
-.029(instructions that some processors have. As with Memory Space, I/O Space addresses are assigned dynamically during)A
29 222 :M
(11)S
57 234 :M
.008 .001(system initialization, and the addressing is "flat" across a PCI domain.)J
29 234 :M
(12)S
57 250 :M
-.065(Relocatable I/O Space )A
f4_10 sf
-.061(shall)A
f2_10 sf
-.06( be allocated at addresses of the form )A
f11_9 sf
-.084(aaaa.aaaa.aaaa.aaaa.aaaa.aa00.aaaa.aaaa)A
f2_10 sf
(.)S
29 250 :M
(13)S
57 262 :M
.157 .016(This guarantees that relocatable I/O addresses will not conflict with hard-decoded address that have non-zero bits in)J
29 262 :M
(14)S
57 274 :M
.699 .07(AD[9\3118].  Because PCI-PCI bridges restrict I/O address space to 16 bits, relocatable I/O Space across PCI-PCI)J
29 274 :M
(15)S
57 286 :M
-.197(bridges )A
f4_10 sf
-.192(shall)A
f2_10 sf
-.191( be of the form )A
f11_9 sf
-.273(0000.0000.0000.0000.aaaa.aa00.aaaa.aaaa.)A
29 286 :M
f2_10 sf
(16)S
57 302 :M
f4_10 sf
.406 .041(Note:  although the PCI specification allows 32-bit I/O Space addresses, many of the processors that have special)J
29 302 :M
f2_10 sf
(17)S
57 314 :M
f4_10 sf
.257 .026(I/O access instructions present only a 16-bit I/O address.  However, Open Firmware allows for the specification of)J
29 314 :M
f2_10 sf
(18)S
57 326 :M
f4_10 sf
.046 .005(the full 32-bit range.)J
29 326 :M
f2_10 sf
(19)S
57 342 :M
.135 .013(PCI also allows devices to have I/O base address registers that implement only the low-order 16 bits.  I.e., the upper)J
-1 -2 55 344 1 2 53 328 @b
-1 -2 529 344 1 2 527 328 @b
29 342 :M
(20)S
57 354 :M
.3 .03(16 bits are assumed to be 0.  When probing, after writing all 1s, the data read back will have the high-order 16 bits)J
-1 -2 55 356 1 2 53 344 @b
-1 -2 529 356 1 2 527 344 @b
29 354 :M
(21)S
57 366 :M
.617 .062(equal to 0, while the low-order 16 bits will reflect the address space requirement.  Address space for such a base)J
-1 -2 55 368 1 2 53 356 @b
-1 -2 529 368 1 2 527 356 @b
29 366 :M
(22)S
57 378 :M
.167 .017(register must be allocated within the first 64 KB of I/O Space.  This requirement is reflected in the )J
f9_10 sf
.074("reg")A
f2_10 sf
.248 .025( property)J
-1 -2 55 380 1 2 53 368 @b
-1 -2 529 380 1 2 527 368 @b
29 378 :M
(23)S
57 390 :M
.262 .026(for that base register by having the )J
f11_10 sf
.119('t')A
f2_10 sf
.24 .024(-bit set.  This is interpretation of the )J
f11_10 sf
.119('t')A
f2_10 sf
.319 .032(-bit for I/O Space is distinquished)J
-1 -2 55 392 1 2 53 380 @b
-1 -2 529 392 1 2 527 380 @b
29 390 :M
(24)S
57 402 :M
.984 .098(from the "alias" case by having the )J
f11_10 sf
.44('n')A
f2_10 sf
.712 .071(-bit equal to 0 in its )J
f9_10 sf
.44("reg")A
f2_10 sf
1.002 .1( entry;  the corresponding )J
f9_10 sf
.489("assigned-)A
-1 -2 55 404 1 2 53 392 @b
-1 -2 529 404 1 2 527 392 @b
29 402 :M
f2_10 sf
(25)S
57 414 :M
f9_10 sf
.303(addresses")A
f2_10 sf
.478 .048( entry )J
f4_10 sf
.197(shall)A
f2_10 sf
.488 .049( have the )J
f11_10 sf
.303('t')A
f2_10 sf
.655 .065(-bit equal to 0.)J
-1 -2 55 416 1 2 53 404 @b
-1 -2 529 416 1 2 527 404 @b
29 414 :M
(26)S
57 444 :M
f0_10 sf
2.328 .233(Hard-decoded Spaces)J
-1 -1 55 446 1 1 54 416 @b
29 444 :M
f2_10 sf
(27)S
57 460 :M
-.023(PCI allows devices to "hard-decode" Memory and I/O addresses;  i.e., the addresses are not subject to relocation via a)A
-1 -1 55 462 1 1 54 446 @b
29 460 :M
(28)S
57 472 :M
-.035(base register.  These address ranges are represented by having the non-relocatable bit \()A
f11_10 sf
-.053('n')A
f2_10 sf
-.036(\) set in their corresponding)A
-1 -1 55 474 1 1 54 462 @b
29 472 :M
(29)S
57 484 :M
f9_10 sf
.38("reg")A
f2_10 sf
.493 .049( and )J
f9_10 sf
.38("assigned-addresses")A
f2_10 sf
.922 .092( properties, where the base-register field of the )J
f4_10 sf
.259(phys.hi)A
f2_10 sf
.486 .049( is 0.)J
-1 -1 55 486 1 1 54 474 @b
29 484 :M
(30)S
57 500 :M
-.054(Furthermore, such devices are allowed to "alias" their hard-decoded I/O addresses by ignoring all but the lower 10 bits)A
-1 -1 55 502 1 1 54 486 @b
29 500 :M
(31)S
57 512 :M
.125 .013(of an I/O address.  To conserve )J
f9_10 sf
.06("reg")A
f2_10 sf
.118 .012( property space, a bit \(the )J
f11_10 sf
.06('t')A
f2_10 sf
.143 .014(-bit, for ten-bit\) is included in the encoding of)J
-1 -1 55 514 1 1 54 502 @b
29 512 :M
(32)S
57 524 :M
1.717 .172(hard-decoded \(non-relocatable, )J
f11_10 sf
.412('n')A
f2_10 sf
.798 .08(-bit = 1\) I/O address )J
f9_10 sf
.412("reg")A
f2_10 sf
.534 .053( and )J
f9_10 sf
.412("assigned-addresses")A
f2_10 sf
.903 .09( entries to)J
-1 -1 55 526 1 1 54 514 @b
29 524 :M
(33)S
57 536 :M
-.084(indicated that the address range includes all such aliases.)A
-1 -1 55 538 1 1 54 526 @b
29 536 :M
(34)S
57 566 :M
f0_10 sf
4.628 .463(Configuration Space)J
29 566 :M
f2_10 sf
(35)S
57 582 :M
.908 .091(Configuration Space is used primarily during device initialization.  Each device contains a set of Configuration)J
29 582 :M
(36)S
57 594 :M
.081 .008(Registers which are used to identify and configure the device.  Configuration Cycles access a device's Configuration)J
29 594 :M
(37)S
57 606 :M
.071 .007(Registers, including the "address base registers" which must be initialized before the device will respond to Memory)J
29 606 :M
(38)S
57 618 :M
-.114(and I/O Space accesses.)A
29 618 :M
(39)S
57 640 :M
.466 .047(In contrast to Memory and I/O Space addressing, Configuration Space addressing is effectively "geographical", in)J
29 640 :M
(40)S
57 652 :M
.33 .033(that the Configuration Space address of a particular device is determined by its physical location on a PCI bus \(i.e.)J
29 652 :M
(41)S
57 664 :M
.735 .073(the slot in which it is installed\), or more generally, its physical location within a "tree" of interconnected PCI to)J
29 664 :M
(42)S
57 676 :M
(PCI bridges.)S
29 676 :M
(43)S
57 698 :M
.014 .001(The method for generating Configuration Cycles is system-dependent.  In some systems, special registers are used to)J
29 698 :M
(44)S
57 710 :M
.374 .037(generate Configuration Space cycles. In other systems, Configuration Space might be memory-mapped as a region)J
29 710 :M
(45)S
57 722 :M
-.001(within a large physical address space.  In particular, the hardware method for specifying the Bus Number and Device)A
29 722 :M
(46)S
57 734 :M
.787 .079(Number is system-dependent.  Bus Number and Device Number are described below as though they are binary-)J
29 734 :M
(47)S
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 7 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
86 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
410 46 :M
-.005(PCI Bus Binding to Open Firmware)A
84 49 -1 1 556 48 1 84 48 @a
317 754 :M
(5)S
86 64 :M
1.151 .115(encoded fields within an address; in practice, that is not necessarily true at the hardware level.  However, the)J
63 64 :M
(1)S
86 76 :M
-.043(representation described below is adequate as an internal software representation, because it is capable of representing)A
63 76 :M
(2)S
86 88 :M
-.026(the entire possible space of PCI Configuration Space addresses.)A
63 88 :M
(3)S
86 110 :M
-.053(A Configuration Space address consists of several fields:)A
63 110 :M
(4)S
86 140 :M
f0_10 sf
2.874 .287(Bus Number:  8 bits.)J
63 140 :M
f2_10 sf
(5)S
86 156 :M
.933 .093(Each PCI bus within a PCI domain is assigned a unique identifying number, known as the "bus number".  The)J
63 156 :M
(6)S
86 168 :M
.535 .054(assignments occur during system initialization, when the bus controllers for the PCI buses within the PCI domain)J
63 168 :M
(7)S
86 180 :M
.091 .009(are located. The bus number for a particular bus is written into a register in that bus's bus controller.)J
63 180 :M
(8)S
86 202 :M
.269 .027(During a Configuration Cycle, each bus controller compares the bus number field of the address to its assigned bus)J
63 202 :M
(9)S
86 214 :M
.585 .059(number.  If they match, the bus controller selects one of the devices on its PCI bus, according to the value of the)J
58 214 :M
(10)S
86 226 :M
.082 .008(Device Number field.  Otherwise, the bus controller either forwards the configuration cycle to its subordinate PCI to)J
58 226 :M
(11)S
86 238 :M
.016 .002(PCI bridges \(if the bus number is for one of its subordinate bridges\) or ignores the cycle.)J
58 238 :M
(12)S
86 268 :M
f0_10 sf
2.994 .299(Device Number:  5 bits)J
58 268 :M
f2_10 sf
(13)S
86 284 :M
.083 .008(During a Configuration Cycle, the bus controller selected by the bus number field decodes the Device Number field,)J
58 284 :M
(14)S
86 296 :M
.073 .007(activating the single corresponding "IDSEL" device select line to enable one of the PCI devices on that bus. For PCI)J
58 296 :M
(15)S
86 308 :M
.312 .031(buses with plug-in slots, the Device Number field effectively selects a particular slot.  Electrical limitations restrict)J
58 308 :M
(16)S
86 320 :M
.433 .043(the number of devices on an individual PCI bus to fewer than the 32 that could otherwise be selected by this 5-bit)J
58 320 :M
(17)S
86 332 :M
-.165(field.)A
58 332 :M
(18)S
86 354 :M
.161 .016(Some PCI bus controllers use the same physical wires for the IDSEL lines and higher-numbered address lines, thus,)J
58 354 :M
(19)S
86 366 :M
.302 .03(on the bus that is selected by the bus number field, the Device Number does not appear on the address bus in its 5-)J
58 366 :M
(20)S
86 378 :M
-.052(bit binary-encoded form.  Rather, the 5-bit field is decoded to a "one of n" select that asserts exactly one upper address)A
58 378 :M
(21)S
86 390 :M
-.04(line.  This fact does not affect the logical representation of the Device Number as a 5-bit binary-encoded field.)A
58 390 :M
(22)S
86 406 :M
f4_10 sf
1.293 .129(Note:  the decoding mechanism \(e.g., the address bit selected\) from the Device Number is system dependent.)J
58 406 :M
f2_10 sf
(23)S
86 418 :M
f4_10 sf
.353 .035(Furthermore, the implementation of the Open Firmware )J
f14_10 sf
.114(config-xx)A
f4_10 sf
.251 .025( words can "hide" this detail.  However, it is)J
58 418 :M
f2_10 sf
(24)S
86 430 :M
f4_10 sf
-.019(recommended that an Open Firmware implementation choose a numbering which is meaningful to the user.)A
58 430 :M
f2_10 sf
(25)S
86 460 :M
f0_10 sf
3.055 .305(Function Number:  3 bits)J
58 460 :M
f2_10 sf
(26)S
86 476 :M
.409 .041(Each PCI device can have from one to eight logically-independent functions, each with its own independent set of)J
58 476 :M
(27)S
86 488 :M
.455 .045(configuration registers.  A PCI device that is selected during a Configuration Cycle decodes the Function Number)J
58 488 :M
(28)S
86 500 :M
.388 .039(field to select the appropriate set of configuration registers for that function. The assignment of Function Numbers)J
58 500 :M
(29)S
86 512 :M
.45 .045(to particular functions is a hard-wired characteristic of the individual PCI device.  For a PCI device with only one)J
58 512 :M
(30)S
86 524 :M
.201 .02(function, the Function Number must be zero.)J
58 524 :M
(31)S
86 554 :M
f0_10 sf
3.023 .302(Register Number:  8 bits)J
58 554 :M
f2_10 sf
(32)S
86 570 :M
.651 .065(The register number field, decoded by the PCI device, selects a particular register within the set of configuration)J
58 570 :M
(33)S
86 582 :M
.44 .044(registers corresponding to the selected function.  The layout \(locations and meanings of particular bits\) of the first)J
58 582 :M
(34)S
86 594 :M
1.799 .18(few configuration registers \(i.e. those with small register numbers\) is specified by the PCI standard; other)J
58 594 :M
(35)S
86 606 :M
.063 .006(configuration registers are device-specific.  The standard configuration registers perform such functions as assigning)J
58 606 :M
(36)S
86 618 :M
-.112(Memory Space and I/O Space base addresses for the device's addressable regions.)A
58 618 :M
(37)S
86 640 :M
.873 .087(In many PCI hardware implementations, Configuration Space does not appear as a direct subset of the system's)J
58 640 :M
(38)S
86 652 :M
-.085(physical address space; instead, Configuration Space accesses are performed by a sequence of reads or writes to special)A
58 652 :M
(39)S
86 664 :M
.138 .014(system registers.)J
58 664 :M
(40)S
86 694 :M
f0_10 sf
4.107 .411("Address-less" Cycles)J
58 694 :M
f2_10 sf
(41)S
86 710 :M
.258 .026(In addition to these address spaces, PCI has two types of transactions in which the address bus is not used.  Special)J
58 710 :M
(42)S
86 722 :M
.794 .079(Cycles \(writes\) are "broadcast" cycles in which the data conveys all of the information.  Interrupt Acknowledge)J
58 722 :M
(43)S
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 8 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
57 46 :M
f2_10 sf
-.005(PCI Bus Binding to Open Firmware)A
437 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
55 49 -1 1 527 48 1 55 48 @a
288 755 :M
(6)S
57 64 :M
-.003(Cycles \(reads\) are intended to support interrupt control hardware associated with PCI devices.  The PCI specification)A
34 64 :M
(1)S
57 76 :M
-.046(does not specify the details of such interrupt control hardware.)A
34 76 :M
(2)S
57 106 :M
f0_10 sf
2.744 .274(Low-order Address Bits)J
34 106 :M
f2_10 sf
(3)S
57 122 :M
1.229 .123(The address characteristics described above do not take into account the way that the PCI bus uses the least-)J
34 122 :M
(4)S
57 134 :M
.197 .02(significant two address bits.  In general, at the hardware level, the PCI bus uses the two low address bits \(AD[1::0]\))J
34 134 :M
(5)S
57 146 :M
-.001(not to identify the particular byte to be accessed, but instead to convey additional information about the data transfer,)A
34 146 :M
(6)S
57 158 :M
-.02(such as the type of address incrementing for burst transfers.  The bytes are selected with "byte enable" signals.)A
34 158 :M
(7)S
57 180 :M
1.221 .122(That hardware subtlety is irrelevant for the purposes of this specification; within the Open Firmware domain,)J
34 180 :M
(8)S
57 192 :M
.538 .054(addresses identify individual 8-bit, 16-bit, and 32-bit registers or memory locations in the usual way.  Within this)J
34 192 :M
(9)S
57 204 :M
.061 .006(document, "address" refers to that software view of an address, which in the case of the two lower address bits is not)J
29 204 :M
(10)S
57 216 :M
-.009(necessarily the same as what is on the PCI address wires.)A
29 216 :M
(11)S
57 246 :M
f0_10 sf
2.791 .279( Address Formats and Representations)J
29 246 :M
f2_10 sf
(12)S
57 276 :M
f0_10 sf
3.123 .312( Physical Address Formats)J
29 276 :M
f2_10 sf
(13)S
57 306 :M
f0_10 sf
3.647 .365( Numerical Representation)J
29 306 :M
f2_10 sf
(14)S
57 322 :M
.243 .024(\(The Numerical Representation of an address is the format that Open Firmware uses for storing an address within a)J
29 322 :M
(15)S
57 334 :M
-.013(property value and on the stack, as an argument to a package method.\) The numerical representation of a PCI address)A
29 334 :M
(16)S
57 346 :M
.214 .021(consists of three cells, encoded as follows.  For this purpose, the least-significant 32 bits of a cell is used; if the cell)J
29 346 :M
(17)S
57 358 :M
.031 .003(size is larger than 32 bits, any additional high-order bits are zero.  Bit# 0 refers to the least-significant bit.)J
29 358 :M
(18)S
57 374 :M
f11_10 sf
.003 0(                 Bit#:  33222222 22221111 11111100 00000000)J
29 374 :M
f2_10 sf
(19)S
172 386 :M
f11_10 sf
.005 0(     10987654 32109876 54321098 76543210)J
29 386 :M
f2_10 sf
(20)S
114 404 :M
f11_10 sf
.007 .001(phys.hi cell:  npt000ss bbbbbbbb dddddfff rrrrrrrr)J
29 404 :M
f2_10 sf
(21)S
114 416 :M
f11_10 sf
.007 .001(phys.mid cell: hhhhhhhh hhhhhhhh hhhhhhhh hhhhhhhh)J
29 416 :M
f2_10 sf
(22)S
114 428 :M
f11_10 sf
.007 .001(phys.lo cell:  llllllll llllllll llllllll llllllll)J
29 428 :M
f2_10 sf
(23)S
114 456 :M
-.24(where:)A
29 456 :M
(24)S
114 480 :M
(n)S
172 480 :M
-.019(is 0 if the address is relocatable, 1 otherwise)A
29 480 :M
(25)S
114 492 :M
(p)S
172 492 :M
-.038(is 1 if the addressable region is "prefetchable", 0 otherwise)A
29 492 :M
(26)S
114 504 :M
(t)S
174 504 :M
.265 .027(is 1 if the address is aliased \(for non-relocatable I/O\), below 1 MB \(for Memory\), or)J
-1 -2 55 506 1 2 53 494 @b
-1 -2 521 506 1 2 519 494 @b
29 504 :M
(27)S
174 516 :M
-.055(below 64 KB \(for relocatable I/O\).)A
-1 -2 55 518 1 2 53 506 @b
-1 -2 521 518 1 2 519 506 @b
29 516 :M
(28)S
114 528 :M
.222(ss)A
172 528 :M
-.099(is the space code, denoting the address space)A
29 528 :M
(29)S
114 540 :M
(bbbbbbbb)S
172 540 :M
.146 .015(is the 8-bit Bus Number)J
29 540 :M
(30)S
114 552 :M
-1.25(ddddd)A
172 552 :M
.024 .002(is the 5-bit Device Number)J
29 552 :M
(31)S
114 564 :M
-.491(fff)A
172 564 :M
.285 .029(is the 3-bit Function Number)J
29 564 :M
(32)S
114 576 :M
-.374(rrrrrrrr)A
172 576 :M
.171 .017(is the 8-bit Register Number)J
29 576 :M
(33)S
114 588 :M
.2(hh..hh)A
172 588 :M
.054 .005(is a 32-bit unsigned number)J
29 588 :M
(34)S
114 600 :M
.377(ll..ll)A
172 600 :M
.054 .005(is a 32-bit unsigned number)J
29 600 :M
(35)S
114 628 :M
1.637 .164(When the hh..hh and ll..ll fields are concatenated to form a larger number, hh..hh is the most)J
29 628 :M
(36)S
114 640 :M
.319 .032(significant portion and ll..ll is the least significant portion.)J
29 640 :M
(37)S
114 656 :M
-.036(The 'p' bit reflects the state of the "P" bit in the corresponding hardware Base Address register.)A
29 656 :M
(38)S
57 686 :M
f0_10 sf
2.749 .275(Encoding of type code "ss":)J
29 686 :M
f2_10 sf
(39)S
57 704 :M
.025 .002(00 denotes  Configuration Space, in which case:)J
29 704 :M
(40)S
114 716 :M
(n)S
229 716 :M
-.008(must be zero)A
29 716 :M
(41)S
114 728 :M
(p)S
229 728 :M
-.008(must be zero)A
29 728 :M
(42)S
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 9 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
86 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
410 46 :M
-.005(PCI Bus Binding to Open Firmware)A
84 49 -1 1 556 48 1 84 48 @a
317 754 :M
(7)S
143 64 :M
(t)S
258 64 :M
-.008(must be zero)A
63 64 :M
(1)S
143 76 :M
-.275(bbbbbbbb,ddddd,fff,rrrrrrrrr)A
258 76 :M
-.056(is the Configuration Space address)A
63 76 :M
(2)S
143 88 :M
.282(hh..hh,ll..ll)A
258 88 :M
-.008(must be zero)A
63 88 :M
(3)S
63 100 :M
(4)S
86 112 :M
.005 .001(01 denotes  I/O Space, in which case:)J
63 112 :M
(5)S
143 124 :M
(p)S
172 124 :M
.5 .05( )J
258 124 :M
-.008(must be zero)A
63 124 :M
(6)S
143 136 :M
(t)S
258 136 :M
.044 .004(is set if 10-bit aliasing is present \(for non-relocatable\),)J
63 136 :M
(7)S
258 148 :M
-.113(or below 64 KB required \(for relocatable\).)A
-1 -2 84 150 1 2 82 138 @b
-1 -2 558 150 1 2 556 138 @b
63 148 :M
(8)S
143 160 :M
-.273(bbbbbbbb,ddddd,fff,rrrrrrrr)A
258 160 :M
-.084(identifies the region's Base Address Register)A
-1 -2 84 162 1 2 82 150 @b
-1 -2 558 162 1 2 556 150 @b
63 160 :M
(9)S
258 172 :M
-.005(rrrrrrrr can be 0x10, 0x14, 0x18, 0x1c, 0x20 or 0x24 \(for relocatable\))A
-1 -2 84 174 1 2 82 162 @b
-1 -2 558 174 1 2 556 162 @b
58 172 :M
(10)S
258 184 :M
-.089(rrrrrrrr is 0x00 for non-relocatable)A
-1 -2 84 186 1 2 82 174 @b
-1 -2 558 186 1 2 556 174 @b
58 184 :M
(11)S
143 196 :M
.2(hh..hh)A
258 196 :M
-.008(must be zero)A
-1 -2 84 198 1 2 82 186 @b
-1 -2 558 198 1 2 556 186 @b
58 196 :M
(12)S
86 208 :M
.409 .041(    If n is 0:)J
143 208 :M
1.492 .149(ll..ll )J
258 208 :M
.031 .003(is the 32-bit offset from the start of the relocatable region of I/O Space)J
58 208 :M
(13)S
86 220 :M
.409 .041(    If n is 1:)J
143 220 :M
1.492 .149(ll..ll )J
258 220 :M
-.048(is the 32-bit I/O Space address)A
58 220 :M
(14)S
58 232 :M
(15)S
86 244 :M
-.051(10 denotes  32-bit-address Memory Space, in which case:)A
58 244 :M
(16)S
143 256 :M
(p)S
172 256 :M
.5 .05( )J
258 256 :M
.109 .011(may be either 0 or 1)J
58 256 :M
(17)S
143 268 :M
(t)S
258 268 :M
-.066(is set if an address below 1 MB is required)A
58 268 :M
(18)S
143 280 :M
-.273(bbbbbbbb,ddddd,fff,rrrrrrrr)A
258 280 :M
-.09(identifies the relocatable region's Base Address Register)A
58 280 :M
(19)S
258 292 :M
.066 .007(rrrrrrrr can be 0x10, 0x14, 0x18, 0x1c, 0x20, 0x24, 0x30 \(relocatable\))J
58 292 :M
(20)S
258 304 :M
-.089(rrrrrrrr is 0x00 for non-relocatable)A
-1 -1 84 306 1 1 83 294 @b
58 304 :M
(21)S
143 316 :M
.937 .094(hh..hh )J
258 316 :M
-.008(must be zero)A
-1 -1 84 318 1 1 83 306 @b
58 316 :M
(22)S
86 328 :M
.409 .041(    If n is 0:)J
143 328 :M
.377(ll..ll)A
172 328 :M
-.015(is the 32-bit offset from the start of the relocatable region of 32-bit address Memory Space)A
58 328 :M
(23)S
86 340 :M
.409 .041(    If n is 1:)J
143 340 :M
.377(ll..ll)A
172 340 :M
-.047(is the 32-bit Memory Space address)A
58 340 :M
(24)S
58 352 :M
(25)S
86 364 :M
-.051(11 denotes  64-bit-address Memory Space, in which case:)A
58 364 :M
(26)S
143 376 :M
(p)S
258 376 :M
.109 .011(may be either 0 or 1)J
58 376 :M
(27)S
143 388 :M
(t)S
258 388 :M
.398 .04(must be 0)J
58 388 :M
(28)S
143 400 :M
-.273(bbbbbbbb,ddddd,fff,rrrrrrrr)A
258 400 :M
-.062(identifies the first register of the relocatable region's Base Address )A
58 400 :M
(29)S
258 412 :M
.141 .014(Register pair.  rrrrrrrr can be 0x10, 0x14, 0x18, 0x1c, or 0x20)J
58 412 :M
(30)S
86 424 :M
.409 .041(    If n is 0:)J
143 424 :M
.282(hh..hh,ll..ll)A
258 424 :M
.076 .008(is the 64-bit offset from the start of the relocatable region of 64-bit)J
58 424 :M
(31)S
258 436 :M
-.03(address Memory Space to the start of the subregion)A
58 436 :M
(32)S
86 448 :M
.409 .041(    If n is 1:)J
143 448 :M
.282(hh..hh,ll..ll)A
258 448 :M
-.047(is the 64-bit Memory Space address)A
58 448 :M
(33)S
86 464 :M
f4_10 sf
.451 .045(Note:  Although the bit format of the phys.hi cell is generally consistent with the bit format of a particular kind of)J
58 464 :M
f2_10 sf
(34)S
86 476 :M
f4_10 sf
-.057(hardware mechanism for Configuration Space access that is recommended by the PCI standard, the use of that format)A
58 476 :M
f2_10 sf
(35)S
86 488 :M
f4_10 sf
.186 .019(does not imply that the hardware must use the same format. The numerical representation specified herein contains)J
58 488 :M
f2_10 sf
(36)S
86 500 :M
f4_10 sf
.553 .055(the information needed to select a particular hardware device, specifying the format by which that information is)J
58 500 :M
f2_10 sf
(37)S
86 512 :M
f4_10 sf
.091 .009(communicated among elements of Open Firmware firmware and client programs.  A driver for a particular PCI bus)J
58 512 :M
f2_10 sf
(38)S
86 524 :M
f4_10 sf
-.129(hardware implementation is free to extract that information and reformat as necessary for the hardware.)A
58 524 :M
f2_10 sf
(39)S
86 546 :M
f4_10 sf
.605 .061(Note:  Although the )J
f2_10 sf
.897 .09(PCI Local Bus Specification)J
f4_10 sf
.936 .094( defines both prefetchable and non-prefetchable 64-bit-address)J
58 546 :M
f2_10 sf
(40)S
86 558 :M
f4_10 sf
.405 .041(Memory Space, the )J
f2_10 sf
.472 .047(PCI to PCI Bridge Architecture Specification)J
f4_10 sf
.378 .038( does not specify a standard means of supporting)J
58 558 :M
f2_10 sf
(41)S
86 570 :M
f4_10 sf
-.106(non-prefetchable 64-bit-address Memory Space across PCI to PCI bridges.)A
58 570 :M
f2_10 sf
(42)S
86 600 :M
f0_10 sf
3.485 .348( Text Representation)J
58 600 :M
f2_10 sf
(43)S
86 616 :M
-.002(The text representation of a PCI address is one of the following forms:)A
58 616 :M
(44)S
143 632 :M
-.438(DD)A
58 632 :M
(45)S
143 644 :M
.167(DD,F)A
58 644 :M
(46)S
143 656 :M
-.021([n]i[t]DD,F,RR,NNNNNNNN)A
58 656 :M
(47)S
143 668 :M
-.045([n]m[t][p]DD,F,RR,NNNNNNNN)A
58 668 :M
(48)S
143 680 :M
-.089([n]x[p]DD,F,RR,NNNNNNNNNNNNNNNN)A
58 680 :M
(49)S
86 708 :M
-.24(where:)A
58 708 :M
(50)S
144 720 :M
-.438(DD)A
207 720 :M
.5 .05( )J
258 720 :M
.153 .015(   is an ASCII hexadecimal number in the range 0..1F)J
58 720 :M
(51)S
144 732 :M
(F)S
207 732 :M
.476 .048(  )J
258 732 :M
.275 .028(   is an ASCII numeral in the range 0..7)J
58 732 :M
(52)S
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 10 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
57 46 :M
f2_10 sf
-.005(PCI Bus Binding to Open Firmware)A
437 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
55 49 -1 1 527 48 1 55 48 @a
288 755 :M
(8)S
115 64 :M
.66(RR)A
229 64 :M
.18 .018(   is an ASCII hexadecimal number in the range 0..FF)J
34 64 :M
(1)S
115 76 :M
-.251(NNNNNNNN)A
237 76 :M
.302 .03(is an ASCII hexadecimal number in the range 0..FFFFFFFF)J
34 76 :M
(2)S
115 88 :M
-.234(NNNNNNNNNNNNNNNN)A
237 88 :M
.533 .053(is an ASCII hexadecimal number in the range 0..FFFFFFFFFFFFFFFF)J
34 88 :M
(3)S
115 112 :M
-.328([n])A
237 112 :M
.177 .018(is the letter 'n', whose presence is optional)J
34 112 :M
(4)S
115 124 :M
-.217([t])A
237 124 :M
.197 .02(is the letter 't', whose presence is optional)J
-1 -2 113 126 1 2 111 114 @b
34 124 :M
(5)S
115 136 :M
-.328([p])A
237 136 :M
.177 .018(is the letter 'p', whose presence is optional)J
34 136 :M
(6)S
115 148 :M
(i)S
237 148 :M
.369 .037(is the letter 'i')J
34 148 :M
(7)S
115 160 :M
(m)S
237 160 :M
.369 .037(is the letter 'm')J
34 160 :M
(8)S
115 172 :M
(x)S
237 172 :M
.321 .032(is the letter 'x')J
34 172 :M
(9)S
115 184 :M
(,)S
237 184 :M
-.026(is the character ',' \(comma\))A
29 184 :M
(10)S
57 212 :M
-.06(The correspondence between the text representations and numerical representation is as follows:)A
29 212 :M
(11)S
111 240 :M
-.438(DD)A
29 240 :M
(12)S
129 256 :M
-.049(corresponds to a Configuration Space address with the numerical value:)A
29 256 :M
(13)S
147 268 :M
.222(ss)A
210 268 :M
.594 .059(is 00)J
29 268 :M
(14)S
147 280 :M
(bbbbbbbb)S
210 280 :M
.155 .016(is the parent's bus number)J
29 280 :M
(15)S
147 292 :M
-1.25(ddddd)A
210 292 :M
-.013(is the binary encoding of DD)A
29 292 :M
(16)S
147 304 :M
-.491(fff)A
210 304 :M
-.062(is zero)A
29 304 :M
(17)S
147 316 :M
-.374(rrrrrrrr)A
210 316 :M
-.062(is zero)A
29 316 :M
(18)S
147 328 :M
.2(hh..hh)A
210 328 :M
-.062(is zero)A
29 328 :M
(19)S
147 340 :M
.377(ll..ll)A
210 340 :M
-.062(is zero)A
29 340 :M
(20)S
115 362 :M
.167(DD,F)A
29 362 :M
(21)S
129 378 :M
-.049(corresponds to a Configuration Space address with the numerical value:)A
29 378 :M
(22)S
147 390 :M
.222(ss)A
210 390 :M
.594 .059(is 00)J
29 390 :M
(23)S
147 402 :M
(bbbbbbbb)S
210 402 :M
.155 .016(is the parent's bus number)J
29 402 :M
(24)S
147 414 :M
-1.25(ddddd)A
210 414 :M
-.013(is the binary encoding of DD)A
29 414 :M
(25)S
147 426 :M
-.491(fff)A
210 426 :M
.07 .007(is the binary encoding of F)J
29 426 :M
(26)S
147 438 :M
-.374(rrrrrrrr)A
210 438 :M
-.062(is zero)A
29 438 :M
(27)S
147 450 :M
.2(hh..hh)A
210 450 :M
-.062(is zero)A
29 450 :M
(28)S
147 462 :M
.377(ll..ll)A
210 462 :M
-.062(is zero)A
29 462 :M
(29)S
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 11 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
86 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
410 46 :M
-.005(PCI Bus Binding to Open Firmware)A
84 49 -1 1 556 48 1 84 48 @a
317 754 :M
(9)S
143 68 :M
-.021([n]i[t]DD,F,RR,NNNNNNNN)A
63 68 :M
(1)S
158 84 :M
-.006(corresponds to a relocatable \(if 'n' is not present\) or a non-relocatable \(if 'n' is present\) 32-bit I/O)A
63 84 :M
(2)S
158 96 :M
-.014(Space address with the numerical value.  If 't' is present, only the low-order 10 bits of an I/O address)A
63 96 :M
(3)S
158 108 :M
-.019(range is indicated;  aliases are assumed to for all high-order bits.  The numerical value is:)A
63 108 :M
(4)S
176 120 :M
.222(ss)A
239 120 :M
.594 .059(is 01)J
63 120 :M
(5)S
176 132 :M
(bbbbbbbb)S
239 132 :M
.155 .016(is the parent's bus number)J
63 132 :M
(6)S
176 144 :M
-1.25(ddddd)A
239 144 :M
-.013(is the binary encoding of DD)A
63 144 :M
(7)S
176 156 :M
-.491(fff)A
239 156 :M
.07 .007(is the binary encoding of F)J
63 156 :M
(8)S
176 168 :M
-.374(rrrrrrrr)A
239 168 :M
.097 .01(is the binary encoding of RR)J
63 168 :M
(9)S
176 180 :M
.2(hh..hh)A
239 180 :M
-.062(is zero)A
58 180 :M
(10)S
176 192 :M
.377(ll..ll)A
239 192 :M
-.05(is the binary encoding of NNNNNNNN)A
58 192 :M
(11)S
143 220 :M
-.045([n]m[t][p]DD,F,RR,NNNNNNNN)A
58 220 :M
(12)S
158 236 :M
1.282 .128(corresponds to a relocatable \(if 'n' is not present\) or a non-relocatable \(if 'n' is present\) 32-bit)J
58 236 :M
(13)S
158 248 :M
.771 .077(Memory Space address.  If 't' is present, the address is within the first 1 MB of memory address)J
58 248 :M
(14)S
158 260 :M
.091 .009(space.   The the numerical value is:)J
58 260 :M
(15)S
176 272 :M
.222(ss)A
239 272 :M
.594 .059(is 10)J
58 272 :M
(16)S
176 284 :M
(bbbbbbbb)S
239 284 :M
.155 .016(is the parent's bus number)J
58 284 :M
(17)S
176 296 :M
-1.25(ddddd)A
239 296 :M
-.013(is the binary encoding of DD)A
58 296 :M
(18)S
176 308 :M
-.491(fff)A
239 308 :M
.07 .007(is the binary encoding of F)J
58 308 :M
(19)S
176 320 :M
-.374(rrrrrrrr)A
239 320 :M
.097 .01(is the binary encoding of RR)J
58 320 :M
(20)S
176 332 :M
.2(hh..hh)A
239 332 :M
-.062(is zero)A
58 332 :M
(21)S
176 344 :M
.377(ll..ll)A
239 344 :M
-.05(is the binary encoding of NNNNNNNN)A
58 344 :M
(22)S
143 372 :M
-.089([n]x[p]DD,F,RR,NNNNNNNNNNNNNNNN)A
58 372 :M
(23)S
158 388 :M
-.008(corresponds to a relocatable \(if 'n' is not present\) or a non-relocatable \(if 'n' is present\) 64-bit)A
58 388 :M
(24)S
158 400 :M
-.06(Memory Space address with the numerical value:)A
58 400 :M
(25)S
176 412 :M
.222(ss)A
239 412 :M
.594 .059(is 10)J
58 412 :M
(26)S
176 424 :M
(bbbbbbbb)S
239 424 :M
.155 .016(is the parent's bus number)J
58 424 :M
(27)S
176 436 :M
-1.25(ddddd)A
239 436 :M
-.013(is the binary encoding of DD)A
58 436 :M
(28)S
176 448 :M
-.491(fff)A
239 448 :M
.07 .007(is the binary encoding of F)J
58 448 :M
(29)S
176 460 :M
-.374(rrrrrrrr)A
239 460 :M
.097 .01(is the binary encoding of RR)J
58 460 :M
(30)S
176 472 :M
.282(hh..hh,ll..ll)A
239 472 :M
-.083(is the binary encoding of NNNNNNNNNNNNNNNN)A
58 472 :M
(31)S
86 500 :M
-.006(Conversion of hexadecimal numbers from text representation to numeric representation shall be case-insensitive, and)A
58 500 :M
(32)S
86 512 :M
-.062(leading zeros shall be permitted but not required.)A
58 512 :M
(33)S
86 534 :M
.668 .067(Conversion from numeric representation to text representation shall use the lower case forms of the hexadecimal)J
58 534 :M
(34)S
86 546 :M
.883 .088(digits in the range )J
f11_10 sf
.427(a..f)A
f2_10 sf
1.136 .114(, suppressing leading zeroes, and the DD form shall be used for Configuration Space)J
58 546 :M
(35)S
86 558 :M
-.112(addresses where )A
f11_10 sf
-.159(fff)A
f2_10 sf
-.104( is zero.)A
58 558 :M
(36)S
86 588 :M
f0_10 sf
3.096 .31( Unit Address Representation)J
58 588 :M
f2_10 sf
(37)S
86 604 :M
1.205 .121(As required by this specification's definition of the )J
f9_10 sf
.473("reg")A
f2_10 sf
1.283 .128( property, a function's "unit-number" \(i.e. the first)J
58 604 :M
(38)S
86 616 :M
.488 .049(component of its ")J
f9_10 sf
.19(reg")A
f2_10 sf
.537 .054( value\) is the Configuration Space address of the function's configuration registers. Since)J
58 616 :M
(39)S
86 628 :M
.656 .066(the "unit-number" is the address that appears in an Open Firmware 'device path', it follows that only the DD and)J
58 628 :M
(40)S
86 640 :M
-.003(DD,FF forms of the text representation can appear in a 'device path'.)A
58 640 :M
(41)S
86 656 :M
f4_10 sf
.383 .038(Note:  Since the predominant use of the text representation is within 'device paths', text representations of I/O and)J
58 656 :M
f2_10 sf
(42)S
86 668 :M
f4_10 sf
-.154(Memory Space addresses are rarely seen by casual users.)A
58 668 :M
f2_10 sf
(43)S
86 684 :M
f4_10 sf
1.245 .125(Note:  The bus number does not appear in the text representation.  If the bus number were present, then the)J
58 684 :M
f2_10 sf
(44)S
86 696 :M
f4_10 sf
-.014(pathname of a particular device would depend on the particular assignment of bus numbers to bus controllers, so the)A
58 696 :M
f2_10 sf
(45)S
86 708 :M
f4_10 sf
-.076(pathname could change if PCI to PCI bridges were added or removed from other slots.  \(It is generally undesirable for)A
58 708 :M
f2_10 sf
(46)S
86 720 :M
f4_10 sf
-.051(the pathname of a particular device to depend on the presence or absence of other devices that are not its ancestors in)A
58 720 :M
f2_10 sf
(47)S
86 732 :M
f4_10 sf
.138 .014(the device tree.\)  The combination of a device node's position in the device tree, its Device Number and its Function)J
58 732 :M
f2_10 sf
(48)S
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 12 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
57 46 :M
f2_10 sf
-.005(PCI Bus Binding to Open Firmware)A
437 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
55 49 -1 1 527 48 1 55 48 @a
286 755 :M
(10)S
57 64 :M
f4_10 sf
.867 .087(Number uniquely select an individual function based on physical characteristics of the system, so the function's)J
34 64 :M
f2_10 sf
(1)S
57 76 :M
f4_10 sf
-.007(pathname does not change unless the device is physically moved.)A
34 76 :M
f2_10 sf
(2)S
57 92 :M
f4_10 sf
1.645 .165(Note:  The bus number appears in the numerical representation because that makes it easier to implement)J
34 92 :M
f2_10 sf
(3)S
57 104 :M
f4_10 sf
.835 .083(Configuration Space access methods.  The )J
f14_10 sf
.293(decode-unit)A
f4_10 sf
.781 .078( method automatically inserts the bus number in the)J
34 104 :M
f2_10 sf
(4)S
57 116 :M
f4_10 sf
-.045(numerical representation; it can do so because each bus node knows the bus number of the bus it represents.)A
34 116 :M
f2_10 sf
(5)S
57 134 :M
.057 .006(Open Firmware implications:)J
34 134 :M
(6)S
57 156 :M
.114 .011(Since some processors cannot generate I/O cycles directly, I/O Space accesses must be done with the register access)J
34 156 :M
(7)S
57 168 :M
1.167 .117(words \(e.g., )J
f9_10 sf
.465(rb@)A
f2_10 sf
.323 .032(, )J
f9_10 sf
.465(rw!)A
f2_10 sf
.452(\).)A
34 168 :M
(8)S
57 190 :M
.332 .033(It is recommended that a range of virtual addresses be set aside for use by )J
f0_10 sf
.129(map-in)A
f2_10 sf
.318 .032( to I/O Space devices so that the)J
34 190 :M
(9)S
57 202 :M
-.102(register access words can determine when an I/O cycle needs to be generated.)A
29 202 :M
(10)S
57 224 :M
.502 .05(Since Configuration Space often does not appear as a subset of the system's physical address space, this firmware)J
29 224 :M
(11)S
57 236 :M
1.148 .115(specification provides bus-specific methods to access Configuration Space.  Likewise, it provides methods for)J
29 236 :M
(12)S
57 248 :M
-.06(Special Cycles and Interrupt Acknowledge Cycles.)A
29 248 :M
(13)S
57 278 :M
f0_10 sf
4.054 .405( Bus-specific Configuration Variables)J
29 278 :M
f2_10 sf
(14)S
57 294 :M
.61 .061(An Open Firmware-compliant User Interface on a system with a single built-in PCI bus )J
f4_10 sf
.216(may)A
f2_10 sf
.708 .071( implement the)J
29 294 :M
(15)S
57 306 :M
-.008(following PCI-specific Configuration Variable.)A
29 306 :M
(16)S
57 322 :M
f9_9 sf
.648(pci-probe-list)A
270 322 :M
f2_10 sf
.218 .022(\( -- list-str list-len \))J
518 322 :M
(N)S
29 322 :M
(17)S
75 334 :M
f2_9 sf
.869 .087(Holds list of slots to probe with )J
f9_9 sf
.421(probe-pci)A
f2_9 sf
.319 .032( .)J
29 334 :M
f2_10 sf
(18)S
75 350 :M
f2_9 sf
.878 .088(A configuration variable containing a string, formatted as described in the following section, indicating the set of)J
29 350 :M
f2_10 sf
(19)S
75 359 :M
f2_9 sf
.667 .067(slots that will be probed when )J
f9_9 sf
.297(probe-pci)A
f2_9 sf
.707 .071( is executed.  The maximum length shall be sufficient to contain a string)J
29 359 :M
f2_10 sf
(20)S
75 368 :M
f2_9 sf
.94 .094(listing all of the PCI bus's implemented slots.)J
29 368 :M
f2_10 sf
(21)S
75 380 :M
f0_9 sf
4.648 .465(Configuration Variable Type)J
f2_9 sf
2.897 .29(: string)J
29 380 :M
f2_10 sf
(22)S
75 392 :M
f0_9 sf
1.588 .159(Default value)J
f2_9 sf
1.163 .116(: a system-dependent value that includes all available slots, in numerically-ascending order.)J
29 392 :M
f2_10 sf
(23)S
75 404 :M
f4_9 sf
.822 .082(Note: )J
f9_9 sf
.319(pci-probe-list)A
f4_9 sf
.701 .07( is intended for the common case of a system with a single built-in PCI bus.  On systems)J
29 404 :M
f2_10 sf
(24)S
75 413 :M
f4_9 sf
.487 .049(with multiple PCI buses, fine-grained control over the probe order can be achieved by repeated execution of the)J
29 413 :M
f2_10 sf
(25)S
75 422 :M
f9_9 sf
.295(probe-self)A
f4_9 sf
.699 .07( method within individual bus nodes.  In any case, the ability to control the probe order is primarily)J
29 422 :M
f2_10 sf
(26)S
75 431 :M
f4_9 sf
.498 .05(intended as a convenience when debugging faulty expansion cards.  Normally, the default probe order \(all available)J
29 431 :M
f2_10 sf
(27)S
75 440 :M
f4_9 sf
.958 .096(slots\) is used.)J
29 440 :M
f2_10 sf
(28)S
57 469 :M
f0_10 sf
2.467 .247( Format of a Probe List)J
29 469 :M
f2_10 sf
(29)S
57 485 :M
.694 .069(A PCI probe list is a text string consisting of a series of lower-case hexadecimal numbers separated by commas.)J
29 485 :M
(30)S
57 497 :M
.309 .031(Each number is in the range )J
f11_9 sf
.128(0..1f)A
f2_10 sf
.332 .033(, corresponding to the slot with the same Device Number.  For a given PCI bus)J
29 497 :M
(31)S
57 509 :M
.13 .013(implementation, only the numbers corresponding to existing slots are valid.)J
29 509 :M
(32)S
57 531 :M
.109 .011(The first number in the series specifies the first slot to be probed, and so on.)J
29 531 :M
(33)S
57 567 :M
f0_10 sf
3.604 .36( FCode Evaluation Semantics)J
29 567 :M
f2_10 sf
(34)S
57 583 :M
.285 .029(See the description of )J
f9_10 sf
.121(probe-pci)A
f2_10 sf
.335 .033( for the precise specification of the FCode evaluation semantics.)J
29 583 :M
(35)S
57 613 :M
f0_10 sf
2.681 .268( Bus Nodes)J
29 613 :M
f2_10 sf
(36)S
57 629 :M
f4_10 sf
.889 .089(Note: A PCI to PCI bridge is a parent of one PCI bus and a child of another. Consequently, a device node)J
29 629 :M
f2_10 sf
(37)S
57 641 :M
f4_10 sf
-.042(representing a PCI bridge is both a Bus Node and a Child Node, with both sets of properties and methods.)A
29 641 :M
f2_10 sf
(38)S
57 671 :M
f0_10 sf
3.542 .354( Properties)J
29 671 :M
f2_10 sf
(39)S
57 701 :M
f0_10 sf
2.691 .269( Open Firmware-defined Properties for Bus Nodes)J
29 701 :M
f2_10 sf
(40)S
57 729 :M
-.028(The following standard properties, as defined in Open Firmware, have special meanings or interpretations for PCI.)A
29 729 :M
(41)S
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 13 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
86 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
410 46 :M
-.005(PCI Bus Binding to Open Firmware)A
84 49 -1 1 556 48 1 84 48 @a
315 754 :M
(11)S
86 64 :M
f9_9 sf
.651("device_type")A
494 64 :M
f2_10 sf
(S)S
63 64 :M
(1)S
104 77 :M
f2_9 sf
.732 .073(Standard )J
f4_9 sf
.178(prop-name)A
f2_9 sf
.568 .057(  to specify the implemented interface. prop-encoded-array:  a string encoded with )J
f9_9 sf
.256(encode-)A
63 77 :M
f2_10 sf
(2)S
104 86 :M
f9_9 sf
.679(string)A
f2_9 sf
(.)S
63 86 :M
f2_10 sf
(3)S
104 98 :M
f2_9 sf
.544 .054(The meaning of this property is as defined in Open Firmware.  A Standard Package conforming to this specification and)J
63 98 :M
f2_10 sf
(4)S
104 107 :M
f2_9 sf
.69 .069(corresponding to a device that implements a PCI bus shall implement this property with the string value ")J
f11_9 sf
.27(pci)A
f2_9 sf
.296(".)A
63 107 :M
f2_10 sf
(5)S
63 110 :M
(6)S
86 124 :M
f9_9 sf
.641("#address-cells")A
494 124 :M
f2_10 sf
(S)S
63 124 :M
(7)S
104 137 :M
f2_9 sf
.662 .066(Standard )J
f4_9 sf
.161(prop-name)A
f2_9 sf
.492 .049( to define the number of cells necessary to represent a physical address.)J
63 137 :M
f2_10 sf
(8)S
104 149 :M
f2_9 sf
.901 .09(prop-encoded-array:  Integer constant 3, encoded with )J
f9_9 sf
.306(encode-int)A
f2_9 sf
(.)S
63 149 :M
f2_10 sf
(9)S
104 161 :M
f2_9 sf
.558 .056(The value of )J
f9_9 sf
.272("#address-cells")A
f2_9 sf
.532 .053( for PCI Bus Nodes is 3.)J
58 161 :M
f2_10 sf
(10)S
58 164 :M
(11)S
86 178 :M
f9_9 sf
.651("#size-cells")A
494 178 :M
f2_10 sf
(S)S
58 178 :M
(12)S
104 191 :M
f2_9 sf
.728 .073(Standard )J
f4_9 sf
.177(prop-name)A
f2_9 sf
.524 .052( to define the number of cells necessary to represent the length of a physical address range.)J
58 191 :M
f2_10 sf
(13)S
104 203 :M
f4_9 sf
.203(prop-encoded-array)A
f2_9 sf
.621 .062(:  Integer constant 2, encoded as with)J
f9_9 sf
1.416 .142( encode-int)J
f2_9 sf
(.)S
58 203 :M
f2_10 sf
(14)S
104 215 :M
f2_9 sf
.514 .051(The value of )J
f9_9 sf
.25("#size-cells")A
f2_9 sf
.601 .06( for PCI Bus Nodes is 2, reflecting PCI's 64-bit address space.)J
58 215 :M
f2_10 sf
(15)S
58 218 :M
(16)S
86 232 :M
f9_9 sf
.752("reg")A
494 232 :M
f2_10 sf
(S)S
58 232 :M
(17)S
104 245 :M
f2_9 sf
.559 .056(Standard )J
f4_9 sf
.136(prop-name)A
f2_9 sf
.426 .043(  to define the package's unit-address.)J
58 245 :M
f2_10 sf
(18)S
104 257 :M
f2_9 sf
.493 .049(For nodes representing PCI to PCI bridges, the )J
f9_9 sf
.198("reg")A
f2_9 sf
.46 .046( property is as defined for PCI Child Nodes.  The value denotes)J
58 257 :M
f2_10 sf
(19)S
104 266 :M
f2_9 sf
.876 .088(the Configuration Space address of the bridge's configuration registers.)J
58 266 :M
f2_10 sf
(20)S
104 278 :M
f2_9 sf
.548 .055(For bridges from some other bus to PCI bus, the )J
f9_9 sf
.249("reg")A
f2_9 sf
.553 .055( property is as defined for that other bus.)J
58 278 :M
f2_10 sf
(21)S
58 281 :M
(22)S
86 309 :M
f0_10 sf
3.218 .322( Bus-specific Properties for Bus Nodes)J
58 309 :M
f2_10 sf
(23)S
86 325 :M
f9_9 sf
.639("clock-frequency")A
494 325 :M
f2_10 sf
(S)S
-1 -2 84 327 1 2 82 311 @b
58 325 :M
(24)S
104 338 :M
f4_9 sf
.146(prop-name)A
f2_9 sf
.488 .049(, denotes frequency of PCI clock.)J
-1 -2 102 339 1 2 100 327 @b
58 338 :M
f2_10 sf
(25)S
104 350 :M
f4_9 sf
.183(prop-encoded-array)A
f2_9 sf
.493 .049(:  An integer, encoded as with )J
f9_9 sf
.244(encode-int)A
f2_9 sf
.587 .059(, that represents the clock frequency, in hertz, of the)J
-1 -2 102 351 1 2 100 339 @b
58 350 :M
f2_10 sf
(26)S
104 359 :M
f2_9 sf
.561 .056(PCI bus for which this node is the parent.)J
-1 -2 102 360 1 2 100 351 @b
58 359 :M
f2_10 sf
(27)S
58 362 :M
(28)S
86 376 :M
f9_9 sf
.661("bus-range")A
494 376 :M
f2_10 sf
(S)S
58 376 :M
(29)S
104 389 :M
f4_9 sf
.194(prop-name)A
f2_9 sf
.593 .059(, denotes range of bus numbers controlled by this PCI bus.)J
58 389 :M
f2_10 sf
(30)S
104 401 :M
f4_9 sf
.169(prop-encoded-array)A
f2_9 sf
.486 .049(:  Two integers, each encoded as with )J
f9_9 sf
.225(encode-int)A
f2_9 sf
.532 .053(, the first representing the bus number of the)J
58 401 :M
f2_10 sf
(31)S
104 410 :M
f2_9 sf
.468 .047(PCI bus implemented by the bus controller represented by this node \(the )J
f4_9 sf
.768 .077(secondary bus)J
f2_9 sf
.416 .042( number in PCI to PCI bridge)J
58 410 :M
f2_10 sf
(32)S
104 419 :M
f2_9 sf
.58 .058(nomenclature\), and the second representing the largest bus number of any PCI bus in the portion of the PCI domain that)J
58 419 :M
f2_10 sf
(33)S
104 428 :M
f2_9 sf
.431 .043(is subordinate to this node \(the )J
f4_9 sf
.82 .082(subordinate bus)J
f2_9 sf
.515 .051( number in PCI to PCI bridge nomenclature\).)J
58 428 :M
f2_10 sf
(34)S
86 443 :M
f9_9 sf
.656("slot-names")A
494 443 :M
f2_10 sf
(S)S
58 443 :M
(35)S
104 456 :M
f4_9 sf
.248(prop-name)A
f2_9 sf
.842 .084(, describes external labeling of add-in slots.)J
58 456 :M
f2_10 sf
(36)S
104 468 :M
f4_9 sf
.17(prop-encoded-array)A
f2_9 sf
.456 .046(:  An integer, encoded as with )J
f9_9 sf
.226(encode-int)A
f2_9 sf
.508 .051(, followed by a list of strings, each encoded as with)J
58 468 :M
f2_10 sf
(37)S
104 477 :M
f9_9 sf
.638(encode-string)A
f2_9 sf
(.)S
58 477 :M
f2_10 sf
(38)S
104 489 :M
f2_9 sf
.699 .07(The integer portion of the property value is a bitmask of available slots; for each add-in slot on the bus, the bit)J
58 489 :M
f2_10 sf
(39)S
104 498 :M
f2_9 sf
.725 .072(corresponding to that slot's Device Number is set.  The least-significant bit corresponds to Device Number 0, the next)J
58 498 :M
f2_10 sf
(40)S
104 507 :M
f2_9 sf
.581 .058(bit corresponds to Device Number 1, etc.  The number of following strings is the same as the number of slots; the first)J
58 507 :M
f2_10 sf
(41)S
104 516 :M
f2_9 sf
.716 .072(string gives the label that is printed on the chassis for the slot with the smallest Device Number, and so on.)J
58 516 :M
f2_10 sf
(42)S
58 519 :M
(43)S
86 547 :M
f0_10 sf
3.111 .311( Methods)J
58 547 :M
f2_10 sf
(44)S
86 577 :M
f0_10 sf
2.595 .259( Open Firmware-defined Methods for Bus Nodes)J
58 577 :M
f2_10 sf
(45)S
86 593 :M
-.05(A Standard Package implementing the )A
f11_10 sf
-.069("pci")A
f2_10 sf
-.048( device type shall implement the following standard methods as defined)A
58 593 :M
(46)S
86 605 :M
.583 .058(in Open Firmware, with the physical address representations as specified in section 2.1 of this standard, and with)J
58 605 :M
(47)S
86 617 :M
-.066(additional PCI-specific semantics:)A
58 617 :M
(48)S
86 627 :M
f9_9 sf
.802(open)A
208 627 :M
f2_9 sf
.102 .01( \( -- okay? \))J
320 627 :M
.381 .038(Prepare this device for subsequent use)J
58 627 :M
f2_10 sf
(49)S
86 639 :M
f9_9 sf
.752(close)A
222 639 :M
f2_9 sf
-.096(\( -- \))A
320 639 :M
1.256 .126(Close this previously-open device)J
58 639 :M
f2_10 sf
(50)S
86 651 :M
f9_9 sf
.722(map-in)A
151 651 :M
f2_9 sf
.949 .095(\( phys.low phys.mid phys.hi size -- virt \))J
320 651 :M
.972 .097(Map the specified subregion.)J
58 651 :M
f2_10 sf
(51)S
104 664 :M
f2_9 sf
.56 .056(PCI to PCI bridges pass through addresses unchanged.  Consequently, a PCI to PCI bridge node's implementation of)J
58 664 :M
f2_10 sf
(52)S
104 673 :M
f9_9 sf
.315(map-in)A
f2_9 sf
.771 .077( typically just forwards the request to its parent.)J
58 673 :M
f2_10 sf
(53)S
104 685 :M
f2_9 sf
.647 .065(For a master PCI bus node in "probe state", if the physical address is relocatable, the )J
f9_9 sf
.283(map-in)A
f2_9 sf
.682 .068( method shall assign a)J
58 685 :M
f2_10 sf
(54)S
104 694 :M
f2_9 sf
.587 .059(base address and set the appropriate base address register to that address.  Such "probe state" assignments are temporary)J
58 694 :M
f2_10 sf
(55)S
104 703 :M
f2_9 sf
.836 .084(and are not necessarily valid after the corresponding )J
f9_9 sf
.318(map-out)A
f2_9 sf
(.)S
58 703 :M
f2_10 sf
(56)S
86 714 :M
f9_9 sf
.702(map-out)A
205 714 :M
f2_9 sf
.279 .028(\( virt size -- \))J
320 714 :M
.939 .094(Destroy mapping from previous map-in)J
58 714 :M
f2_10 sf
(57)S
104 727 :M
f2_9 sf
.56 .056(PCI to PCI bridges pass through addresses unchanged.  Consequently, a PCI to PCI bridge node's implementation of)J
58 727 :M
f2_10 sf
(58)S
104 736 :M
f9_9 sf
.323(map-out)A
f2_9 sf
.789 .079( typically just forwards the request to its parent.)J
58 736 :M
f2_10 sf
(59)S
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 14 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
57 46 :M
f2_10 sf
-.005(PCI Bus Binding to Open Firmware)A
437 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
55 49 -1 1 527 48 1 55 48 @a
286 755 :M
(12)S
75 63 :M
f2_9 sf
.571 .057(For a master PCI bus node in "probe state", if the physical address is relocatable and there are no other active mappings)J
34 63 :M
f2_10 sf
(1)S
75 72 :M
f2_9 sf
.872 .087(within the relocatable region containing that address, the )J
f9_9 sf
.317(map-out)A
f2_9 sf
.78 .078( method shall unassign the base address of the)J
34 72 :M
f2_10 sf
(2)S
75 81 :M
f2_9 sf
.43 .043(region, freeing the corresponding range of PCI address space for later re-use.  A Standard FCode program shall unmap)J
34 81 :M
f2_10 sf
(3)S
75 90 :M
f2_9 sf
.427 .043(\(as with )J
f9_9 sf
.216(map-out)A
f2_9 sf
.527 .053(\) all base addresses that it mapped and shall siable memory or I/O space access in the Command)J
34 90 :M
f2_10 sf
(4)S
75 99 :M
f2_9 sf
.345(Register.)A
34 99 :M
f2_10 sf
(5)S
57 110 :M
f9_9 sf
.677(dma-alloc)A
176 110 :M
f2_9 sf
.279 .028(\( size -- virt \))J
291 110 :M
.471 .047(Allocate a memory region for later use)J
34 110 :M
f2_10 sf
(6)S
57 122 :M
f9_9 sf
.687(dma-free)A
176 122 :M
f2_9 sf
.279 .028(\( virt size -- \))J
291 122 :M
.475 .048(Free memory allocated with dma-alloc)J
34 122 :M
f2_10 sf
(7)S
57 134 :M
f9_9 sf
.668(dma-map-in)A
136 134 :M
f2_9 sf
.265 .026(\( .. virt size cacheable? -- devaddr \))J
291 134 :M
.3 .03(Convert virtual address to device bus DMA address.)J
34 134 :M
f2_10 sf
(8)S
57 146 :M
f9_9 sf
.661(dma-map-out)A
161 146 :M
f2_9 sf
.041 .004(\( virt devaddr size -- \))J
291 146 :M
.311 .031(Free DMA mapping set up with dma-map-in)J
34 146 :M
f2_10 sf
(9)S
57 158 :M
f9_9 sf
.687(dma-sync)A
161 158 :M
f2_9 sf
.041 .004(\( virt devaddr size -- \))J
291 158 :M
.535 .054(Synchronize \(flush\) DMA memory caches)J
29 158 :M
f2_10 sf
(10)S
57 170 :M
f9_9 sf
1.426 .143(probe-self )J
f2_9 sf
.713 .071(\( arg-str arg-len reg-str reg-len fcode-str fcode-len -- \))J
345 170 :M
.509 .051(Interpret FCode, as a child of this node)J
29 170 :M
f2_10 sf
(11)S
57 182 :M
f9_9 sf
.661(decode-unit)A
126 182 :M
f2_9 sf
.783 .078(\( addr len -- phys.lo phys.mid phys.hi \))J
291 182 :M
.916 .092(Convert text representation of address to numerical representation)J
29 182 :M
f2_10 sf
(12)S
57 194 :M
f9_9 sf
.661(encode-unit)A
126 194 :M
f2_9 sf
.783 .078(\( phys.lo phys.mid phys.hi -- addr len \))J
291 194 :M
.916 .092(Convert numerical representation of address to text representation)J
29 194 :M
f2_10 sf
(13)S
57 210 :M
f4_10 sf
.539 .054(Note:  The PCI bus is little-endian; i.e. a byte address whose least-significant two bits are both zero uses the bus)J
29 210 :M
f2_10 sf
(14)S
57 222 :M
f4_10 sf
.037 .004(byte lane containing the least-significant portion of a 32-bit quantity.  Typically, a bridge from a big-endian bus to a)J
29 222 :M
f2_10 sf
(15)S
57 234 :M
f4_10 sf
1.176 .118(PCI bus will swap the byte lanes so that the order of a sequence of bytes is preserved when that sequence is)J
29 234 :M
f2_10 sf
(16)S
57 246 :M
f4_10 sf
.009 .001(transferred across the bridge.  As a result, the hardware changes the position of bytes within a 32-bit quantity that is)J
29 246 :M
f2_10 sf
(17)S
57 258 :M
f4_10 sf
-.046(viewed as a 32-bit unit, rather than as a sequence of individually-addressed bytes.  In order to properly implement the)A
29 258 :M
f2_10 sf
(18)S
57 270 :M
f4_10 sf
.443 .044(semantics of the Open Firmware register access words \(e.g.  )J
f1_10 sf
.1(rl!\))A
f4_10 sf
.482 .048(, the device node for such byte-swapping bridges)J
29 270 :M
f2_10 sf
(19)S
57 282 :M
f4_10 sf
-.022(must substitute versions of those words that "undo" the hardware byte-swapping.)A
29 282 :M
f2_10 sf
(20)S
57 312 :M
f0_10 sf
3.119 .312( Bus-specific Methods for Bus Nodes)J
29 312 :M
f2_10 sf
(21)S
57 342 :M
f0_10 sf
3.834 .383(Configuration Access Words)J
29 342 :M
f2_10 sf
(22)S
57 358 :M
.735 .073(The methods described below have execution semantics similar \(especially with respect to write-buffer flushing,)J
29 358 :M
(23)S
57 370 :M
.697 .07(atomicity, etc.\)  to those of the register access words \(e.g., )J
f9_10 sf
.308(r)A
f0_10 sf
.381(b@)A
f2_10 sf
.214 .021(, )J
f0_10 sf
.256(rw!)A
f2_10 sf
.966 .097(\); in most implementations, these methods)J
29 370 :M
(24)S
57 382 :M
-.032(will be implemented via the register access words.)A
29 382 :M
(25)S
57 397 :M
1.048 .105(The data type 'config-addr' refers to the 'phys.hi' cell of the numerical representation of a Configuration Space)J
29 397 :M
(26)S
57 408 :M
-.066(address.  The 'config-addr' shall be aligned to the data type of the access.)A
29 408 :M
(27)S
57 424 :M
f9_9 sf
.677(config-l@)A
270 424 :M
f2_9 sf
.009 .001(\( config-addr -- data \))J
29 424 :M
f2_10 sf
(28)S
93 436 :M
f2_9 sf
.828 .083(Performs a 32-bit Configuration Read.)J
29 436 :M
f2_10 sf
(29)S
29 443 :M
(30)S
57 457 :M
f9_9 sf
.677(config-l!)A
270 457 :M
f2_9 sf
.009 .001(\( data config-addr -- \))J
29 457 :M
f2_10 sf
(31)S
93 469 :M
f2_9 sf
.948 .095(Performs a 32-bit Configuration Write.)J
29 469 :M
f2_10 sf
(32)S
29 476 :M
(33)S
57 490 :M
f9_9 sf
.677(config-w@)A
270 490 :M
f2_9 sf
.009 .001(\( config-addr -- data \))J
29 490 :M
f2_10 sf
(34)S
93 502 :M
f2_9 sf
.828 .083(Performs a 16-bit Configuration Read.)J
29 502 :M
f2_10 sf
(35)S
29 509 :M
(36)S
57 523 :M
f9_9 sf
.677(config-w!)A
270 523 :M
f2_9 sf
.009 .001(\( data config-addr -- \))J
29 523 :M
f2_10 sf
(37)S
93 535 :M
f2_9 sf
.948 .095(Performs a 16-bit Configuration Write.)J
29 535 :M
f2_10 sf
(38)S
29 542 :M
(39)S
57 556 :M
f9_9 sf
.677(config-b@)A
270 556 :M
f2_9 sf
.009 .001(\( config-addr -- data \))J
29 556 :M
f2_10 sf
(40)S
93 568 :M
f2_9 sf
.828 .083(Performs an 8-bit Configuration Read.)J
29 568 :M
f2_10 sf
(41)S
29 575 :M
(42)S
57 589 :M
f9_9 sf
.677(config-b!)A
270 589 :M
f2_9 sf
.009 .001(\( data config-addr -- \))J
29 589 :M
f2_10 sf
(43)S
93 601 :M
f2_9 sf
.948 .095(Performs an 8-bit Configuration Write.)J
29 601 :M
f2_10 sf
(44)S
57 620 :M
f9_9 sf
.627(assign-package-addresses)A
285 620 :M
f2_9 sf
.182 .018(\( phandle -- \))J
29 620 :M
f2_10 sf
(45)S
93 632 :M
f2_9 sf
.181 .018(Assigns addresses \(i.e., creates )J
f11_9 sf
.063("assigned-addresses")A
f2_9 sf
.141 .014( property\) for the child node denoted by )J
f4_9 sf
.048(phandle)A
f2_9 sf
(.)S
29 632 :M
f2_10 sf
(46)S
29 639 :M
(47)S
57 667 :M
f0_10 sf
3.519 .352(Address-less Access Words)J
29 667 :M
f2_10 sf
(48)S
57 683 :M
f9_9 sf
.319(intr-ack)A
f9_10 sf
.322 .032( )J
f2_10 sf
.134 .013(      )J
f11_9 sf
.62 .062( \( -- \))J
29 683 :M
f2_10 sf
(49)S
75 695 :M
f2_9 sf
.442 .044(Performs a PCI Interrupt Acknowledge Cycle.)J
29 695 :M
f2_10 sf
(50)S
29 702 :M
(51)S
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 15 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
86 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
410 46 :M
-.005(PCI Bus Binding to Open Firmware)A
84 49 -1 1 556 48 1 84 48 @a
315 754 :M
(13)S
86 63 :M
f9_9 sf
.09(special-!)A
f2_10 sf
.038 .004(       )J
f11_9 sf
.261 .026(\( data bus# -- \))J
63 63 :M
f2_10 sf
(1)S
104 75 :M
f2_9 sf
.258 .026(Performs a PCI Special Cycle on the indicated )J
f11_9 sf
.104(bus#)A
f2_9 sf
(.)S
63 75 :M
f2_10 sf
(2)S
104 91 :M
f4_9 sf
.391 .039(Note: Standard PCI to PCI bridges provide a mechanism for converting Configuration Cycles with particular addresses)J
63 91 :M
f2_10 sf
(3)S
104 100 :M
f4_9 sf
.946 .095(to Special Cycles. Consequently, for a PCI to PCI bridge, the likely implementation of )J
f9_9 sf
.371(special-!)A
f4_9 sf
1.212 .121( involves)J
63 100 :M
f2_10 sf
(4)S
104 109 :M
f4_9 sf
1.151 .115(invoking the parent node's )J
f9_9 sf
.428(config-l!)A
f4_9 sf
1.444 .144( method.)J
63 109 :M
f2_10 sf
(5)S
63 112 :M
(6)S
86 140 :M
f0_10 sf
2.903 .29( Child Nodes)J
63 140 :M
f2_10 sf
(7)S
86 156 :M
f4_10 sf
1.368 .137(Note: A PCI to PCI bridge is a parent of one PCI bus and a child of another. Consequently, a device node)J
63 156 :M
f2_10 sf
(8)S
86 168 :M
f4_10 sf
-.042(representing a PCI bridge is both a Bus Node and a Child Node, with both sets of properties and methods.)A
63 168 :M
f2_10 sf
(9)S
86 198 :M
f0_10 sf
3.542 .354( Properties)J
58 198 :M
f2_10 sf
(10)S
86 228 :M
f0_10 sf
2.754 .275( Open Firmware-defined Properties for Child Nodes)J
58 228 :M
f2_10 sf
(11)S
86 244 :M
-.007(The following properties, as defined in Open Firmware, have special meanings or interpretations for PCI.)A
58 244 :M
(12)S
86 260 :M
f9_9 sf
.752("reg")A
494 260 :M
f2_10 sf
(S)S
58 260 :M
(13)S
104 273 :M
f2_9 sf
.662 .066(Standard )J
f4_9 sf
.161(prop-name)A
f2_9 sf
.643 .064(, defines device's addressable regions.)J
58 273 :M
f2_10 sf
(14)S
104 285 :M
f4_9 sf
.096(prop-encoded-array)A
f2_9 sf
.274 .027(:  Arbitrary number of \()J
f4_9 sf
.518 .052(phys-addr size)J
f2_9 sf
.35 .035(\) pairs.)J
58 285 :M
f2_10 sf
(15)S
104 297 :M
f4_9 sf
.267(phys-addr)A
f2_9 sf
.356 .036( is \()J
f4_9 sf
1.321 .132(phys.lo phys.mid phys.hi)J
f2_9 sf
.756 .076(\), encoded as with )J
f9_9 sf
.356(encode-phys)A
f2_9 sf
.247 .025(. )J
f4_9 sf
.222(size)A
f2_9 sf
.749 .075( is a pair of integers, each encoded as)J
58 297 :M
f2_10 sf
(16)S
104 306 :M
f2_9 sf
1.152 .115(with )J
f9_9 sf
.511(encode-int)A
f2_9 sf
.387 .039( .)J
58 306 :M
f2_10 sf
(17)S
104 318 :M
f2_9 sf
.825 .082(The first integer denotes the most-significant 32 bits of the 64-bit region size, and the second integer denotes the least)J
58 318 :M
f2_10 sf
(18)S
104 327 :M
f2_9 sf
1.497 .15(significant 32 bits thereof.)J
58 327 :M
f2_10 sf
(19)S
104 339 :M
f2_9 sf
.448 .045(This property is mandatory for PCI Child Nodes, as defined by Open Firmware.  The property value consists of a)J
58 339 :M
f2_10 sf
(20)S
104 348 :M
f2_9 sf
.636 .064(sequence of \()J
f4_9 sf
.954 .095(phys-addr, size)J
f2_9 sf
.409 .041(\) pairs.  In the first such pair, the )J
f4_9 sf
.177(phys-addr)A
f2_9 sf
.695 .069( component shall be the Configuration Space)J
58 348 :M
f2_10 sf
(21)S
104 357 :M
f2_9 sf
.612 .061(address of the beginning of the function's set of configuration registers \(i.e.  the rrrrrrrr field is zero\) and the )J
f4_9 sf
.224(size)A
58 357 :M
f2_10 sf
(22)S
104 366 :M
f2_9 sf
.582 .058(component shall be zero.  Each additional \()J
f4_9 sf
.919 .092(phys-addr, size)J
f2_9 sf
.554 .055(\) pair shall specify the address of an addressable region of)J
58 366 :M
f2_10 sf
(23)S
104 375 :M
f2_9 sf
.547 .055(Memory Space or I/O Space associated with the function.)J
58 375 :M
f2_10 sf
(24)S
104 387 :M
f2_9 sf
.485 .049(In the event that a function has an addressable region that can be accessed relative to more than one Base Address)J
58 387 :M
f2_10 sf
(25)S
104 396 :M
f2_9 sf
.659 .066(Register \(for example, in Memory Space relative to one Base Register, and in I/O Space relative to another\), only the)J
58 396 :M
f2_10 sf
(26)S
104 405 :M
f2_9 sf
.724 .072(primary access path \(typically, the one in Memory Space\) shall be listed in the )J
f9_9 sf
.302("reg")A
f2_9 sf
.854 .085( property, and the secondary)J
58 405 :M
f2_10 sf
(27)S
104 414 :M
f2_9 sf
.901 .09(access path shall be listed in the )J
f9_9 sf
.436("alternate-reg")A
f2_9 sf
1.487 .149( property.)J
58 414 :M
f2_10 sf
(28)S
58 417 :M
(29)S
86 431 :M
f9_9 sf
.656("interrupts")A
494 431 :M
f2_10 sf
(S)S
58 431 :M
(30)S
104 444 :M
f4_9 sf
.21(prop-name)A
f2_9 sf
.645 .065(, the presence of which indicates that the function represented by this node is connected to a PCI expansion)J
58 444 :M
f2_10 sf
(31)S
104 453 :M
f2_9 sf
1.559 .156(connector's interrupt line.)J
58 453 :M
f2_10 sf
(32)S
104 465 :M
f4_9 sf
.194(prop-encoded-array)A
f2_9 sf
.528 .053(:  Integer, encoded as with )J
f9_9 sf
.258(encode-int)A
f2_9 sf
.602 .06(.  The integer represents the interrupt line to which this)J
58 465 :M
f2_10 sf
(33)S
104 474 :M
f2_9 sf
.431 .043(function's interrupt is connected; INTA=1, INTB=2, INTC=3, INTD=4.  This value is determined from the contents of)J
58 474 :M
f2_10 sf
(34)S
104 483 :M
f2_9 sf
1.004 .1(the device's Configuration Interrupt Pin Register.)J
58 483 :M
f2_10 sf
(35)S
58 486 :M
(36)S
86 514 :M
f0_10 sf
3.284 .328( Bus-specific Properties for Child Nodes)J
58 514 :M
f2_10 sf
(37)S
86 530 :M
1.582 .158(Standard Packages corresponding to devices that are children of a PCI bus shall implement the following)J
58 530 :M
(38)S
86 542 :M
-.007(properties, if applicable.)A
58 542 :M
(39)S
58 558 :M
(40)S
86 574 :M
f9_9 sf
.644("alternate-reg")A
494 574 :M
f2_10 sf
(S)S
58 574 :M
(41)S
104 587 :M
f4_9 sf
.21(prop-name)A
f2_9 sf
.753 .075(, defines alternate access paths for addressable regions.)J
58 587 :M
f2_10 sf
(42)S
104 599 :M
f4_9 sf
.102(prop-encoded-array)A
f2_9 sf
.33 .033(: Arbitrary number of \()J
f4_9 sf
.546 .055(phys-addr size)J
f2_9 sf
.369 .037(\) pairs.)J
58 599 :M
f2_10 sf
(43)S
104 611 :M
f4_9 sf
1.259 .126(phys-addr )J
f2_9 sf
.522 .052(is \()J
f4_9 sf
1.304 .13(phys.lo phys.mid phys.hi)J
f2_9 sf
.746 .075(\), encoded as with )J
f9_9 sf
.351(encode-phys.)A
f2_9 sf
.133 .013( )J
f4_9 sf
.219(size)A
f2_9 sf
.739 .074( is a pair of integers, each encoded as)J
58 611 :M
f2_10 sf
(44)S
104 620 :M
f2_9 sf
1.152 .115(with )J
f9_9 sf
.511(encode-int)A
f2_9 sf
.387 .039( .)J
58 620 :M
f2_10 sf
(45)S
104 632 :M
f2_9 sf
.825 .082(The first integer denotes the most-significant 32 bits of the 64-bit region size, and the second integer denotes the least)J
58 632 :M
f2_10 sf
(46)S
104 641 :M
f2_9 sf
1.497 .15(significant 32 bits thereof.)J
58 641 :M
f2_10 sf
(47)S
104 653 :M
f2_9 sf
.807 .081(This property describes alternative access paths for the addressable regions described by the )J
f9_9 sf
.292("reg")A
f2_9 sf
.998 .1( property.)J
58 653 :M
f2_10 sf
(48)S
104 662 :M
f2_9 sf
.545 .054(Typically, an alternative access path exists when a particular part of a device can be accessed either in Memory Space)J
58 662 :M
f2_10 sf
(49)S
104 671 :M
f2_9 sf
.392 .039(or in I/O Space, with a separate Base Address register for each of the two access paths.  The primary access paths are)J
58 671 :M
f2_10 sf
(50)S
104 680 :M
f2_9 sf
.769 .077(described by the )J
f9_9 sf
.319("reg")A
f2_9 sf
.739 .074( property, and the secondary access paths, if any, are described by the )J
f9_9 sf
.342("alternate-reg")A
58 680 :M
f2_10 sf
(51)S
104 689 :M
f2_9 sf
.408(property.)A
58 689 :M
f2_10 sf
(52)S
104 701 :M
f2_9 sf
.809 .081(If the function has no alternative access paths, the device node shall have no )J
f9_9 sf
.346("alternate-reg")A
f2_9 sf
.66 .066( property.  If the)J
58 701 :M
f2_10 sf
(53)S
104 710 :M
f2_9 sf
.643 .064(device has alternative access paths, each entry \(i.e. each )J
f4_9 sf
1.026 .103(phys-addr size)J
f2_9 sf
.635 .063( pair\) of its value represents the secondary)J
58 710 :M
f2_10 sf
(54)S
104 719 :M
f2_9 sf
.717 .072(access path for the addressable region whose primary access path is in the corresponding entry of the )J
f9_9 sf
.288("reg")A
f2_9 sf
.97 .097( property)J
58 719 :M
f2_10 sf
(55)S
104 728 :M
f2_9 sf
.591 .059(value.  If the number of )J
f9_9 sf
.311("alternate-reg")A
f2_9 sf
.708 .071( entries exceeds the number of )J
f9_9 sf
.311("reg")A
f2_9 sf
.901 .09( property entries, the additional)J
58 728 :M
f2_10 sf
(56)S
104 737 :M
f2_9 sf
.72 .072(entries denote addressable regions that are not represented by )J
f9_9 sf
.266("reg")A
f2_9 sf
.618 .062( property entries, and are thus not intended to be)J
58 737 :M
f2_10 sf
(57)S
endp
%%Page: 16 16
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 16 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
57 46 :M
f2_10 sf
-.005(PCI Bus Binding to Open Firmware)A
437 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
55 49 -1 1 527 48 1 55 48 @a
286 755 :M
(14)S
75 63 :M
f2_9 sf
.67 .067(used in normal operation; such regions might, for example, be used for diagnostic functions. If the number of)J
34 63 :M
f2_10 sf
(1)S
75 72 :M
f9_9 sf
.378("alternate-reg")A
f2_9 sf
.743 .074( entries is less than the number of )J
f9_9 sf
.379("reg")A
f2_9 sf
.865 .086( entries, the regions described by the extra )J
f9_9 sf
.473("reg")A
34 72 :M
f2_10 sf
(2)S
75 81 :M
f2_9 sf
.875 .088(entries do not have alternative access paths.  An )J
f9_9 sf
.378("alternate-reg")A
f2_9 sf
.786 .079( entry whose )J
f4_9 sf
1.09 .109(phys.hi )J
f2_9 sf
1.284 .128(component is zero)J
34 81 :M
f2_10 sf
(3)S
75 90 :M
f2_9 sf
.614 .061(indicates that the corresponding region does not have an alternative access path; such an entry can be used as a "place)J
34 90 :M
f2_10 sf
(4)S
75 99 :M
f2_9 sf
.891 .089(holder" to preserve the positions of later entries relative to the corresponding )J
f9_9 sf
.347("reg")A
f2_9 sf
.694 .069( entries.  The first)J
34 99 :M
f2_10 sf
(5)S
75 108 :M
f9_9 sf
.394("alternate-reg")A
f2_9 sf
.938 .094( entry, corresponding to the )J
f9_9 sf
.394("reg")A
f2_9 sf
1.234 .123( entry describing the function's Configuration Space)J
34 108 :M
f2_10 sf
(6)S
75 117 :M
f2_9 sf
.953 .095(registers, shall have a )J
f4_9 sf
.281(phys.hi)A
f2_9 sf
1.147 .115( component of zero.)J
34 117 :M
f2_10 sf
(7)S
34 120 :M
(8)S
57 134 :M
f9_9 sf
.637("fcode-rom-offset")A
465 134 :M
f2_10 sf
(S)S
34 134 :M
(9)S
75 147 :M
f4_9 sf
.182(prop-name)A
f2_9 sf
.626 .063(, denotes offset of FCode image within the device's Expansion ROM.)J
29 147 :M
f2_10 sf
(10)S
75 159 :M
f4_9 sf
.186(prop-encode-arrray)A
f2_9 sf
.562 .056(: one integer, encoded as with )J
f9_9 sf
.252(encode-int)A
f2_9 sf
(.)S
29 159 :M
f2_10 sf
(11)S
75 171 :M
f2_9 sf
.636 .064(This property indicates the offset of the PCI Expansion ROM image within the device's Expansion ROM in which the)J
29 171 :M
f2_10 sf
(12)S
75 180 :M
f2_9 sf
.459 .046(FCode image was found;  i.e., the offset of the 0xAA55 signature of that image's PCI Expansion ROM Header. This)J
29 180 :M
f2_10 sf
(13)S
75 189 :M
f2_9 sf
.539 .054(value )J
f4_9 sf
.139(shall)A
f2_9 sf
.517 .052( be generated before the FCode is evaluated.  Note that the absence of this property indicates that no FCode)J
29 189 :M
f2_10 sf
(14)S
75 198 :M
f2_9 sf
.863 .086(exists for this device node.)J
29 198 :M
f2_10 sf
(15)S
29 201 :M
(16)S
57 215 :M
f9_9 sf
.633("assigned-addresses")A
465 215 :M
f2_10 sf
(S)S
29 215 :M
(17)S
75 228 :M
f4_9 sf
.21(prop-name)A
f2_9 sf
.845 .085(, denotes assigned physical addresses)J
29 228 :M
f2_10 sf
(18)S
75 240 :M
f4_9 sf
.112(prop-encoded-array)A
f2_9 sf
.215 .021(:  Zero to six \()J
f4_9 sf
.602 .06(phys-addr size)J
f2_9 sf
.407 .041(\) pairs.)J
29 240 :M
f2_10 sf
(19)S
75 252 :M
f4_9 sf
.267(phys-addr)A
f2_9 sf
.356 .036( is \()J
f4_9 sf
1.321 .132(phys.lo phys.mid phys.hi)J
f2_9 sf
.756 .076(\), encoded as with )J
f9_9 sf
.356(encode-phys)A
f2_9 sf
.247 .025(. )J
f4_9 sf
.222(size)A
f2_9 sf
.749 .075( is a pair of integers, each encoded as)J
29 252 :M
f2_10 sf
(20)S
75 261 :M
f2_9 sf
1.152 .115(with )J
f9_9 sf
.511(encode-int)A
f2_9 sf
.387 .039( .)J
29 261 :M
f2_10 sf
(21)S
75 273 :M
f2_9 sf
.827 .083(The first integer denotes the most-significant 32 bits of the 64-bit region size, and the second integer denotes the)J
29 273 :M
f2_10 sf
(22)S
75 282 :M
f2_9 sf
1.341 .134(least significant 32 bits thereof.)J
29 282 :M
f2_10 sf
(23)S
75 294 :M
f2_9 sf
.512 .051(Each entry \(i.e.  each )J
f4_9 sf
1.04 .104(phys-addr size)J
f2_9 sf
.59 .059( pair\) in this property value corresponds to either one or two \(in the case 64-bit-)J
29 294 :M
f2_10 sf
(24)S
75 303 :M
f2_9 sf
.645 .065(address Memory Space\) of the function's Configuration Space base address registers.  The entry indicates the physical)J
29 303 :M
f2_10 sf
(25)S
75 312 :M
f2_9 sf
.604 .06(address that has been assigned to that base address register, and the size in bytes of the assigned region.  The size shall)J
29 312 :M
f2_10 sf
(26)S
75 321 :M
f2_9 sf
.391 .039(be a power of two \(since the structure of PCI Base Address registers forces the decoding granularity to powers of two\).)J
29 321 :M
f2_10 sf
(27)S
75 330 :M
f2_9 sf
.411 .041(The 'n' bit of each )J
f4_9 sf
.176(phys-addr)A
f2_9 sf
.55 .055( shall be set to 1, indicating that the address is absolute \(within the PCI domain's address)J
29 330 :M
f2_10 sf
(28)S
75 339 :M
f2_9 sf
.654 .065(space\), not relative to the start of a relocatable region.  The type code shall not be '00' \(Configuration Space\).  The)J
29 339 :M
f2_10 sf
(29)S
75 348 :M
f2_9 sf
(')S
f11_9 sf
.033(bbbbbbbb,ddddd,fff,rrrrrrrr)A
f2_9 sf
.077 .008(' field indicates the base register to which the entry applies, and the)J
29 348 :M
f2_10 sf
(30)S
75 357 :M
f2_9 sf
(')S
f11_9 sf
.043(hh..hh,ll..ll)A
f2_9 sf
.121 .012(' field contains the assigned address.)J
29 357 :M
f2_10 sf
(31)S
75 369 :M
f2_9 sf
.878 .088(If addresses have not yet been assigned to the function's relocatable regions, this property shall be absent.)J
29 369 :M
f2_10 sf
(32)S
75 381 :M
f2_9 sf
.787 .079(The values reported in )J
f9_9 sf
.323("assigned-addresses")A
f2_9 sf
.808 .081( represent the physical addresses that have been assigned.  If)J
-1 -2 73 382 1 2 71 370 @b
29 381 :M
f2_10 sf
(33)S
75 390 :M
f2_9 sf
.464 .046(Open Firmware can not assign address space for a resource \(e.g., the address space has been exhausted\), that resourcs)J
-1 -2 73 391 1 2 71 382 @b
29 390 :M
f2_10 sf
(34)S
75 399 :M
f2_9 sf
.607 .061(will not have an entry in the )J
f9_9 sf
.317("assigned-addresses")A
f2_9 sf
.787 .079( property.  If no resources were assigned address space, the)J
-1 -2 73 400 1 2 71 391 @b
29 399 :M
f2_10 sf
(35)S
75 408 :M
f9_9 sf
.331("assigned-addresses")A
f2_9 sf
.715 .072( property )J
f4_9 sf
.215(shall)A
f2_9 sf
.448 .045( have a )J
f4_9 sf
.249(prop-encoded-array)A
f2_9 sf
.742 .074( of zero length.)J
-1 -2 73 409 1 2 71 400 @b
29 408 :M
f2_10 sf
(36)S
75 420 :M
f4_9 sf
.446 .045(Note: There is no implied correspondence between the order of entries in the )J
f14_9 sf
.178(")A
f9_9 sf
.178(reg)A
f14_9 sf
.178(")A
f4_9 sf
.448 .045( property value and order of entries)J
29 420 :M
f2_10 sf
(37)S
75 429 :M
f4_9 sf
.498 .05(in the )J
f14_9 sf
.323(")A
f9_9 sf
.323(assigned-addresses)A
f14_9 sf
.323(")A
f4_9 sf
.845 .084( property value.  The correspondence between the )J
f14_9 sf
.323(")A
f9_9 sf
.323(reg)A
f14_9 sf
.323(")A
f4_9 sf
.82 .082( entries and)J
29 429 :M
f2_10 sf
(38)S
75 438 :M
f14_9 sf
.331(")A
f9_9 sf
.331(assigned-addresses)A
f14_9 sf
.331(")A
f4_9 sf
.887 .089( entries is determined by matching the fields denoting the Base Address register.)J
29 438 :M
f2_10 sf
(39)S
29 441 :M
(40)S
57 455 :M
f9_9 sf
.635("power-consumption")A
465 455 :M
f2_10 sf
(S)S
29 455 :M
(41)S
75 468 :M
f4_9 sf
.168(prop-name)A
f2_9 sf
.713 .071(, describes function's power requirements)J
29 468 :M
f2_10 sf
(42)S
75 480 :M
f4_9 sf
.179(prop-encoded-array)A
f2_9 sf
.503 .05(: list of integers, encoded as with )J
f9_9 sf
.238(encode-int)A
f2_9 sf
.749 .075(, describing the device's maximum power)J
29 480 :M
f2_10 sf
(43)S
75 489 :M
f2_9 sf
.763 .076(consumption in microwatts, categorized by the various power rails and the device's power-management state \(standby)J
29 489 :M
f2_10 sf
(44)S
75 498 :M
f2_9 sf
.527 .053(or fully-on\).  The ints are encoded in the following order:)J
29 498 :M
f2_10 sf
(45)S
93 510 :M
f2_9 sf
.729 .073(unspecified standby, unspecified full-on, +5V standby, +5V full-on, +3.3V standby, +3.3V full-on, I/O pwr)J
29 510 :M
f2_10 sf
(46)S
93 519 :M
f2_9 sf
.666 .067(standby, I/O pwr full-on, reserved standby, reserved full-on)J
29 519 :M
f2_10 sf
(47)S
75 531 :M
f2_9 sf
.687 .069(The "unspecified" entries indicate that the power division among the various rails is unknown.  The "unspecified")J
29 531 :M
f2_10 sf
(48)S
75 540 :M
f2_9 sf
.577 .058(entries shall be zero if any of the other entries are non-zero.  The "unspecified" entries are provided so that the)J
29 540 :M
f2_10 sf
(49)S
75 549 :M
f9_9 sf
.311("power-consumption")A
f2_9 sf
.8 .08( property can be created for devices without FCode, from the information on the)J
29 549 :M
f2_10 sf
(50)S
75 558 :M
f2_9 sf
.576 .058(PRSNT1# and PRSNT2# connector pins.)J
29 558 :M
f2_10 sf
(51)S
75 570 :M
f2_9 sf
.579 .058(If the number of ints in the encoded property value is less than ten, the power consumption is zero for the cases)J
29 570 :M
f2_10 sf
(52)S
75 579 :M
f2_9 sf
.706 .071(corresponding to the missing entries.  For example, if there are four ints, they correspond to the two "unspecified" and)J
29 579 :M
f2_10 sf
(53)S
75 588 :M
f2_9 sf
.532 .053(the two "+5" numbers, and the others are zero.)J
29 588 :M
f2_10 sf
(54)S
29 591 :M
(55)S
57 619 :M
f0_10 sf
3.23 .323(Standard PCI Configuration Properties)J
29 619 :M
f2_10 sf
(56)S
57 635 :M
.359 .036(The following properties are created during the probing process, after the device node has been created, but before)J
29 635 :M
(57)S
57 647 :M
.932 .093(evaluating the device's FCode \(if any\).  They represent the values of standard PCI configuration registers. This)J
29 647 :M
(58)S
57 659 :M
.057 .006(information is likely to be useful for Client and User interfaces.)J
29 659 :M
(59)S
57 675 :M
-.05(Unless specified otherwise, each of the following properties has a )A
f4_10 sf
-.057(prop-encoded-array)A
f2_10 sf
-.052( whose value is an integer taken)A
29 675 :M
(60)S
57 687 :M
.183 .018(directly from the corresponding hardware register, encoded as with )J
f9_10 sf
.064(encode-int)A
f2_10 sf
(.)S
29 687 :M
(61)S
57 699 :M
f9_9 sf
.661("vendor-id")A
465 699 :M
f2_10 sf
(S)S
29 699 :M
(62)S
57 711 :M
f9_9 sf
.661("device-id")A
465 711 :M
f2_10 sf
(S)S
29 711 :M
(63)S
57 723 :M
f9_9 sf
.651("revision-id")A
465 723 :M
f2_10 sf
(S)S
29 723 :M
(64)S
57 735 :M
f9_9 sf
.656("class-code")A
465 735 :M
f2_10 sf
(S)S
29 735 :M
(65)S
endp
%%Page: 17 17
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 17 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
86 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
410 46 :M
-.005(PCI Bus Binding to Open Firmware)A
84 49 -1 1 556 48 1 84 48 @a
315 754 :M
(15)S
86 65 :M
f9_9 sf
.656("interrupts")A
494 65 :M
f2_10 sf
(S)S
63 65 :M
(1)S
104 75 :M
f2_9 sf
.804 .08(This property shall be present if the Interrupt Pin register is non-zero, and shall be absent otherwise.)J
63 75 :M
f2_10 sf
(2)S
86 87 :M
f9_9 sf
.661("min-grant")A
494 87 :M
f2_10 sf
(S)S
63 87 :M
(3)S
86 99 :M
f9_9 sf
.651("max-latency")A
494 99 :M
f2_10 sf
(S)S
63 99 :M
(4)S
86 111 :M
f9_9 sf
.648("devsel-speed")A
494 111 :M
f2_10 sf
(S)S
63 111 :M
(5)S
86 123 :M
f9_9 sf
.538("fast-back-to-back")A
f11_10 sf
.57 .057(  )J
494 123 :M
f2_10 sf
(S)S
63 123 :M
(6)S
104 133 :M
f4_9 sf
.063(prop-encoded-array)A
f2_9 sf
.296 .03(: <none>)J
63 133 :M
f2_10 sf
(7)S
104 143 :M
f2_9 sf
.741 .074(This property shall be present if the "Fast Back-to-Back" bit \(bit 7\) in the function's Status Register is set, and shall be)J
63 143 :M
f2_10 sf
(8)S
104 153 :M
f2_9 sf
1.741 .174(absent otherwise.)J
63 153 :M
f2_10 sf
(9)S
86 165 :M
f9_9 sf
.648("subsystem-id")A
58 165 :M
f2_10 sf
(10)S
104 175 :M
f2_9 sf
.788 .079(This property shall be present if the "Subsystem ID" register is non-zero, and shall be absent otherwise.)J
58 175 :M
f2_10 sf
(11)S
86 187 :M
f9_9 sf
.631("subsystem-vendor-id")A
58 187 :M
f2_10 sf
(12)S
104 197 :M
f2_9 sf
.732 .073(This property shall be present if the "Subsystem Vendor ID" register is non-zero, and shall be absent otherwise.)J
58 197 :M
f2_10 sf
(13)S
86 209 :M
f9_9 sf
.644("66mhz-capable")A
58 209 :M
f2_10 sf
(14)S
104 219 :M
f4_9 sf
.063(prop-encoded-array)A
f2_9 sf
.296 .03(: <none>)J
58 219 :M
f2_10 sf
(15)S
104 229 :M
f2_9 sf
.689 .069(This property shall be present if the "66 MHz Capable" bit \(bit 6\) in the function's Status Register is set, and shall be)J
58 229 :M
f2_10 sf
(16)S
104 239 :M
f2_9 sf
1.741 .174(absent otherwise.)J
58 239 :M
f2_10 sf
(17)S
86 251 :M
f9_9 sf
.644("udf-supported")A
58 251 :M
f2_10 sf
(18)S
104 261 :M
f4_9 sf
.063(prop-encoded-array)A
f2_9 sf
.296 .03(: <none>)J
58 261 :M
f2_10 sf
(19)S
104 271 :M
f2_9 sf
.658 .066(This property shall be present if the "UDF Supported" bit \(bit 5\) in the function's Status Register is set, and shall be)J
58 271 :M
f2_10 sf
(20)S
104 281 :M
f2_9 sf
1.741 .174(absent otherwise.)J
58 281 :M
f2_10 sf
(21)S
58 294 :M
(22)S
58 297 :M
(23)S
86 325 :M
f0_10 sf
3.111 .311( Methods)J
58 325 :M
f2_10 sf
(24)S
86 355 :M
f0_10 sf
3.182 .318( Bus-specific User Interface Commands)J
58 355 :M
f2_10 sf
(25)S
86 371 :M
.607 .061(An Open Firmware-compliant User Interface on a system with PCI )J
f4_10 sf
.162(should)A
f2_10 sf
.739 .074( implement the following PCI-specific)J
58 371 :M
(26)S
86 383 :M
-.106(user interface commands.)A
58 383 :M
(27)S
86 399 :M
f9_9 sf
.677(probe-pci)A
317 399 :M
f2_10 sf
.326 .033(        \( -- \))J
58 399 :M
(28)S
104 412 :M
f2_9 sf
.63 .063(Interprets FCode for all built-in PCI slots in numerical order.)J
58 412 :M
f2_10 sf
(29)S
104 424 :M
f2_9 sf
.847 .085(Enter "probe state", thus affecting subsequent behavior of the )J
f9_9 sf
.313(map-in)A
f2_9 sf
.406 .041( and )J
f9_9 sf
.313(map-out)A
f2_9 sf
1.128 .113( methods.)J
58 424 :M
f2_10 sf
(30)S
104 436 :M
f2_9 sf
.569 .057(Scan all slots in numerical order.  For each slot, read the header type field in the configuration register set for function)J
58 436 :M
f2_10 sf
(31)S
104 445 :M
f2_9 sf
.422 .042(number 0.  If the header type field indicates a PCI-PCI bridge, perform the function described in the Probing PCI-PCI)J
58 445 :M
f2_10 sf
(32)S
104 454 :M
f2_9 sf
.542 .054(bridges section.  If the header type field indicates a multi-function device, perform the following sequence for each of)J
58 454 :M
f2_10 sf
(33)S
104 463 :M
f2_9 sf
.423 .042(the functions that are present \(as determined by the presence of a non-FFFFh value in the Vendor ID field of the)J
58 463 :M
f2_10 sf
(34)S
104 472 :M
f2_9 sf
.62 .062(function's Configuration Space header\).  Otherwise, perform the following sequence for the card's function number 0.)J
58 472 :M
f2_10 sf
(35)S
104 481 :M
f2_9 sf
.598 .06(The first attempted access to each function )J
f4_9 sf
.153(shall)A
f2_9 sf
.227 .023( use  )J
f9_9 sf
.236(lpeek)A
f2_9 sf
.573 .057(, because in some systems an attempted access to a non-)J
58 481 :M
f2_10 sf
(36)S
104 490 :M
f2_9 sf
.803 .08(existent device might result in a processor exception \(e.g. a "bus error"\).)J
58 490 :M
f2_10 sf
(37)S
104 502 :M
f4_9 sf
.781 .078(Note:  Although some PCI implementations will not generate processor exceptions for aborted cycles, that is not an)J
58 502 :M
f2_10 sf
(38)S
104 511 :M
f4_9 sf
.862 .086(inherent limitation of PCI itself, but instead an implementation choice that is appropriate for some system)J
58 511 :M
f2_10 sf
(39)S
104 520 :M
f4_9 sf
.392 .039(architectures.  A PCI host bridge knows if it terminated a cycle with a master abort.  Since the PC system architecture)J
58 520 :M
f2_10 sf
(40)S
104 529 :M
f4_9 sf
.401 .04(lacks the notion of a bus error, PC to PCI host bridges cannot report a bus error to the PC, so they have to complete the)J
58 529 :M
f2_10 sf
(41)S
104 538 :M
f4_9 sf
.479 .048(cycle and return all ones to the x86 processor.  However, in a non-PC system, the PCI host bridge could terminate the)J
58 538 :M
f2_10 sf
(42)S
104 547 :M
f4_9 sf
.527 .053(processor cycle with a bus error.  Open Firmware )J
f1_9 sf
.169(peek)A
f4_9 sf
.287 .029( and )J
f1_9 sf
.175(poke)A
f4_9 sf
.506 .051( can behave in their normal way; if the processor can)J
58 547 :M
f2_10 sf
(43)S
104 556 :M
f4_9 sf
.574 .057(get a bus error, peek and poke can report it.  If not, )J
f1_9 sf
.241(peek)A
f4_9 sf
.408 .041( and )J
f1_9 sf
.248(poke)A
f4_9 sf
.621 .062( will never say they got a bus error, they will just)J
58 556 :M
f2_10 sf
(44)S
104 565 :M
f4_9 sf
.621 .062(return whatever data the cycle yielded.  This is not a problem, because the probing process involves doing a )J
f1_9 sf
.201(peek)A
f4_9 sf
.574 .057( and)J
58 565 :M
f2_10 sf
(45)S
104 574 :M
f4_9 sf
.634 .063(also looking at the data to see if it is right.)J
58 574 :M
f2_10 sf
(46)S
104 586 :M
f2_9 sf
.891 .089(Create the following properties from the information given in the configuration space header.)J
58 586 :M
f2_10 sf
(47)S
122 597 :M
f9_9 sf
.661("vendor-id")A
58 597 :M
f2_10 sf
(48)S
122 609 :M
f9_9 sf
.661("device-id")A
58 609 :M
f2_10 sf
(49)S
122 621 :M
f9_9 sf
.651("revision-id")A
58 621 :M
f2_10 sf
(50)S
122 633 :M
f9_9 sf
.656("class-code")A
58 633 :M
f2_10 sf
(51)S
122 645 :M
f9_9 sf
.656("interrupts")A
58 645 :M
f2_10 sf
(52)S
122 657 :M
f9_9 sf
.661("min-grant")A
230 657 :M
f2_9 sf
.386 .039(\(Unless Header Type is 01h\))J
58 657 :M
f2_10 sf
(53)S
122 669 :M
f9_9 sf
.651("max-latency")A
230 669 :M
f2_9 sf
.386 .039(\(Unless Header Type is 01h\))J
58 669 :M
f2_10 sf
(54)S
122 681 :M
f9_9 sf
.648("devsel-speed")A
58 681 :M
f2_10 sf
(55)S
122 693 :M
f9_9 sf
.635("fast-back-to-back")A
58 693 :M
f2_10 sf
(56)S
122 705 :M
f9_9 sf
.648("subsystem-id")A
58 705 :M
f2_10 sf
(57)S
122 717 :M
f9_9 sf
.631("subsystem-vendor-id")A
58 717 :M
f2_10 sf
(58)S
122 729 :M
f9_9 sf
.644("66mhz-capable")A
58 729 :M
f2_10 sf
(59)S
endp
%%Page: 18 18
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 18 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
57 46 :M
f2_10 sf
-.005(PCI Bus Binding to Open Firmware)A
437 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
55 49 -1 1 527 48 1 55 48 @a
286 755 :M
(16)S
93 63 :M
f9_9 sf
.644("udf-supported")A
34 63 :M
f2_10 sf
(1)S
93 76 :M
f4_9 sf
.811 .081(Note: The feasibility of automatically creating the above properties depends on the ability to recognize the)J
34 76 :M
f2_10 sf
(2)S
93 85 :M
f4_9 sf
.349 .035(configuration header format. At present, there are two such formats - the base format defined by the )J
f2_9 sf
.431 .043(PCI Local Bus)J
34 85 :M
f2_10 sf
(3)S
93 94 :M
f2_9 sf
.111(Specification)A
f4_9 sf
.341 .034( and the PCI to PCI bridge format defined by the )J
f2_9 sf
.527 .053(PCI to PCI Bridge Architecture Specification)J
f4_9 sf
.494 .049(. Those)J
34 94 :M
f2_10 sf
(4)S
93 103 :M
f4_9 sf
.694 .069(two formats are almost, but not entirely, consistent with respect to the fields defined above \(in particular, the)J
34 103 :M
f2_10 sf
(5)S
93 112 :M
f4_9 sf
.417 .042(max-latency and min-grant fields have a different meaning in the bridge header format\). If additional formats are)J
34 112 :M
f2_10 sf
(6)S
93 121 :M
f4_9 sf
.516 .052(defined in the future, then it is possible that firmware written before those formats are defined will not be able to)J
34 121 :M
f2_10 sf
(7)S
93 130 :M
f4_9 sf
.595 .06(recognize them. The question arises: Should the firmware assume that, with respect to the above fields, new)J
34 130 :M
f2_10 sf
(8)S
93 139 :M
f4_9 sf
.645 .065(formats are consistent with the existing ones, creating the properties without regard to header type, or should the)J
34 139 :M
f2_10 sf
(9)S
93 148 :M
f4_9 sf
.492 .049(firmware do nothing if it sees an unrecognized header type. The latter is, in some sense, safer, but it also precludes)J
29 148 :M
f2_10 sf
(10)S
93 157 :M
f4_9 sf
.932 .093(forwards compatibility, which is a serious deficiency.)J
29 157 :M
f2_10 sf
(11)S
75 169 :M
f2_9 sf
.614 .061(Then determine whether or not the function has a expansion ROM image containing an FCode Program.)J
29 169 :M
f2_10 sf
(12)S
93 181 :M
f4_9 sf
.516 .052(Note: The location of the Expansion ROM Base Address Register differs between the two currently-defined header)J
29 181 :M
f2_10 sf
(13)S
93 190 :M
f4_9 sf
.427 .043(types. Where will it be in future header types? Furthermore, the details of Expansion ROMs on PCI to PCI bridges)J
29 190 :M
f2_10 sf
(14)S
93 199 :M
f4_9 sf
.427 .043(are not specified by the current revision of the PCI to PCI bridge spec.)J
29 199 :M
f2_10 sf
(15)S
75 211 :M
f2_9 sf
.479 .048(If the function has an FCode Program, evaluate the FCode Program as follows:)J
29 211 :M
f2_10 sf
(16)S
93 223 :M
f2_9 sf
.476 .048(Copy the FCode program from expansion ROM into a temporary buffer in RAM and evaluate it as with )J
f9_9 sf
.237(byte-)A
29 223 :M
f2_10 sf
(17)S
93 232 :M
f9_9 sf
.249(load)A
f2_9 sf
.595 .06(.  \(The temporary RAM buffer may be deallocated afterwards.\)  Set the )J
f9_9 sf
.249("fcode-rom-offset")A
f2_9 sf
.837 .084( property)J
29 232 :M
f2_10 sf
(18)S
93 241 :M
f2_9 sf
.325 .032(to the offset of the ROM image at which the FCode was found.)J
29 241 :M
f2_10 sf
(19)S
93 253 :M
f2_9 sf
.932 .093(When the FCode Program begins execution, )J
f9_9 sf
.314(my-address)A
f2_9 sf
.408 .041( and )J
f9_9 sf
.314(my-space)A
f2_9 sf
.969 .097( together return the Configuration)J
29 253 :M
f2_10 sf
(20)S
93 262 :M
f2_9 sf
.712 .071(Space address of the device's configuration register set.)J
29 262 :M
f2_10 sf
(21)S
111 274 :M
f4_9 sf
.836 .084(Note: Since the phys.mid and phys.lo components of Configuration Spaces addresses must be zero, )J
f9_9 sf
.446(my-)A
29 274 :M
f2_10 sf
(22)S
111 283 :M
f9_9 sf
.316(address)A
f4_9 sf
.819 .082( returns a pair of zeros; the interesting phys.hi information, which is necessary for accessing the)J
29 283 :M
f2_10 sf
(23)S
111 292 :M
f4_9 sf
1.026 .103(configuration registers via the )J
f9_9 sf
.358(config-xx)A
f4_9 sf
.786 .079( methods, is returned by )J
f9_9 sf
.358(my-space)A
f4_9 sf
(.)S
29 292 :M
f2_10 sf
(24)S
93 304 :M
f2_9 sf
.809 .081(The FCode Program is responsible for creating the )J
f9_9 sf
.308("name")A
f2_9 sf
.399 .04( and )J
f9_9 sf
.308("reg")A
f2_9 sf
1.099 .11( properties.)J
29 304 :M
f2_10 sf
(25)S
75 316 :M
f2_9 sf
.481 .048(If the function does not have an FCode Program:)J
29 316 :M
f2_10 sf
(26)S
93 328 :M
f2_9 sf
.944 .094(Create the following properties from information in the device's Configuration Space registers:)J
29 328 :M
f2_10 sf
(27)S
93 340 :M
f9_9 sf
.752("reg")A
129 340 :M
f2_9 sf
.727 .073(Create entries for all active configuration base address registers, including the Expansion ROM base)J
29 340 :M
f2_10 sf
(28)S
129 349 :M
f2_9 sf
.782 .078(register, with size components describing the total size of the region mapped by each register.  \(Without)J
29 349 :M
f2_10 sf
(29)S
129 358 :M
f2_9 sf
.692 .069(FCode, it is not necessarily possible to determine whether or not there are multiple base address registers)J
29 358 :M
f2_10 sf
(30)S
129 367 :M
f2_9 sf
.866 .087(mapping the same resource, so it is not possible to create an )J
f9_9 sf
.391("alternate-reg")A
f2_9 sf
1.375 .137( property.\))J
29 367 :M
f2_10 sf
(31)S
129 379 :M
f4_9 sf
.401 .04(Note: the number of active base address registers depends in part on the header type configuration field;)J
29 379 :M
f2_10 sf
(32)S
129 388 :M
f4_9 sf
.336 .034(in particular, header types 0x01and 0x81, denoting the standard PCI to PCI bridge header format, have at)J
29 388 :M
f2_10 sf
(33)S
129 397 :M
f4_9 sf
.432 .043(most two base address registers, whereas header types 0x00 and 0x80have up to seven base address)J
29 397 :M
f2_10 sf
(34)S
129 406 :M
f4_9 sf
1.033 .103(registers \(including the Expansion ROM's\).)J
29 406 :M
f2_10 sf
(35)S
93 418 :M
f9_9 sf
.722("name")A
165 418 :M
f2_9 sf
.624 .062(Construct a name of the form )J
f9_9 sf
.278(pciVVVV,DDDD)A
f2_9 sf
.683 .068(. If the Subsystem ID field in the configuration)J
29 418 :M
f2_10 sf
(36)S
129 427 :M
f2_9 sf
.348 .035(registers for this device is non-zero, VVVV,DDDD )J
f4_9 sf
.077(shall)A
f2_9 sf
.313 .031( be the Subsystem Vendor ID and Subsystem ID)J
29 427 :M
f2_10 sf
(37)S
129 436 :M
f2_9 sf
.185 .019(respectively; otherwise VVVV,DDDD )J
f4_9 sf
.029(shall)A
f2_9 sf
.098 .01( be the value of the Vendor ID and Device ID fields.  VVVV)J
29 436 :M
f2_10 sf
(38)S
129 445 :M
f2_9 sf
.282 .028(and DDDD are ASCII hexadecimal numbers, lower case, without leading zeros.)J
29 445 :M
f2_10 sf
(39)S
93 457 :M
f2_9 sf
.661 .066(Create the )J
f9_9 sf
.284("power-consumption")A
f2_9 sf
.752 .075( property from the state of the PRSNT1# and PRSNT2# connector, if)J
29 457 :M
f2_10 sf
(40)S
93 466 :M
f2_9 sf
.532(possible.)A
29 466 :M
f2_10 sf
(41)S
75 478 :M
f2_9 sf
.759 .076(Disable fixed-address response by clearing the Command Register.)J
29 478 :M
f2_10 sf
(42)S
75 490 :M
f2_9 sf
.691 .069(After all slots have been so probed, exit "probe state", assign base addresses \(by allocating the address space and)J
-1 -2 73 491 1 2 71 479 @b
29 490 :M
f2_10 sf
(43)S
75 499 :M
f2_9 sf
.666 .067(setting the base address register\) for each distinct base address register \(or register pair\) listed in any child's )J
f9_9 sf
.342("reg")A
-1 -2 73 500 1 2 71 491 @b
29 499 :M
f2_10 sf
(44)S
75 508 :M
f2_9 sf
1.114 .111(property, and create )J
f9_9 sf
2.809 .281("assigned-addresses" )J
f2_9 sf
1.416 .142(properties describing those assignments in the corresponding)J
-1 -2 73 509 1 2 71 500 @b
29 508 :M
f2_10 sf
(45)S
75 517 :M
f2_9 sf
.73 .073(child device nodes.)J
-1 -2 73 518 1 2 71 509 @b
29 517 :M
f2_10 sf
(46)S
75 529 :M
f2_9 sf
.519 .052(On each PCI bus within the domain, set the Latency Timer registers for each master to values appropriate for the other)J
29 529 :M
f2_10 sf
(47)S
75 538 :M
f2_9 sf
.397 .04(devices on that bus, according to the values of the other device's MIN_GNT and MAX_LAT registers.)J
29 538 :M
f2_10 sf
(48)S
endp
%%Page: 19 19
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 19 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
86 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
410 46 :M
-.005(PCI Bus Binding to Open Firmware)A
84 49 -1 1 556 48 1 84 48 @a
315 754 :M
(17)S
104 63 :M
f2_9 sf
.665 .066(On each PCI bus within the domain, if all target devices on that bus have "fast back-to-back" capability, set the "fast)J
63 63 :M
f2_10 sf
(1)S
104 72 :M
f2_9 sf
.818 .082(back-to-back" enable bits in the Command registers of master devices.)J
63 72 :M
f2_10 sf
(2)S
86 87 :M
f9_9 sf
.644(make-properties)A
329 87 :M
f2_10 sf
-.062(\( -- \))A
63 87 :M
(3)S
104 100 :M
f2_9 sf
.545 .054(Create the default PCI properties \(as described above for )J
f9_9 sf
.211(probe-pci)A
f2_9 sf
.305 .03(\) for the )J
f4_9 sf
.882 .088(current instance)J
f2_9 sf
(.)S
63 100 :M
f2_10 sf
(4)S
104 112 :M
f2_9 sf
.55 .055(This user interface word is intended to be used for debugging FCode within the context of )J
f9_9 sf
.227(begin-package)A
f2_9 sf
.43 .043( \311)J
63 112 :M
f2_10 sf
(5)S
104 121 :M
f9_9 sf
.229(end-package)A
f2_9 sf
.366 .037(.  This word )J
f4_9 sf
.17(should)A
f2_9 sf
.589 .059( be exectuted before evaluating the FCode for the node.)J
63 121 :M
f2_10 sf
(6)S
86 136 :M
f9_9 sf
.641(assign-addresses)A
63 136 :M
f2_10 sf
(7)S
104 149 :M
f2_9 sf
.463 .046(Assign addresses for the )J
f4_9 sf
.757 .076(current instance)J
f2_9 sf
(.)S
63 149 :M
f2_10 sf
(8)S
104 161 :M
f2_9 sf
.584 .058(This user interface word is intended to be used for debugging Fcode within the context of )J
f9_9 sf
.243(begin-package)A
f2_9 sf
.264 .026( \311 )J
f9_9 sf
.324(end-)A
63 161 :M
f2_10 sf
(9)S
104 170 :M
f9_9 sf
.26(pacakge)A
f2_9 sf
.592 .059(.  Executing this word causes addresses to be assigned to this node \(based on the current )J
f9_9 sf
.26("reg")A
f2_9 sf
.876 .088( property)J
58 170 :M
f2_10 sf
(10)S
104 179 :M
f2_9 sf
.768 .077(value\), creating an )J
f9_9 sf
.3("assigned-addresses")A
f2_9 sf
.817 .082( property replecting those addresses.  This word should be executed)J
58 179 :M
f2_10 sf
(11)S
104 188 :M
f2_9 sf
.46 .046(after evaluating the FCode for  the node.)J
58 188 :M
f2_10 sf
(12)S
86 217 :M
f0_10 sf
3.603 .36(Probing PCI-PCI bridges)J
58 217 :M
f2_10 sf
(13)S
86 233 :M
.355 .036(The recursive algorithm described in this section allows bus number and address assignment to be done in a single)J
58 233 :M
(14)S
86 245 :M
.068 .007(depth-first manner.  Bus numbers are assigned on the way down the PCI bus heirarchy and addresses are assigned to)J
58 245 :M
(15)S
86 257 :M
.108 .011(on the way back up.  Another algorithm may be used.)J
58 257 :M
(16)S
86 273 :M
f4_10 sf
.915 .091(Note: while this is a simple algorithm \(e.g., it does not require a "global" address allocation pass\), it does not)J
58 273 :M
f2_10 sf
(17)S
86 285 :M
f4_10 sf
-.012(provide the most optimal system-wide address assignment.)A
58 285 :M
f2_10 sf
(18)S
86 301 :M
-.03(If the function is a standard PCI-PCI bridge \(as indicated by the class code and the header type fields\), set the bridge's)A
58 301 :M
(19)S
86 313 :M
.638 .064(Primary Bus # register to the bus number of the parent bus, assign the next bus number to that bridge, setting its)J
58 313 :M
(20)S
86 325 :M
.323 .032(Secondary Bus # register to that number, set the bridge's Subordinate Bus # register to )J
f11_10 sf
.133(0xFF)A
f2_10 sf
.376 .038(, and recursively scan)J
58 325 :M
(21)S
86 337 :M
.084 .008(the slots of that bridge's subordinate bus.)J
58 337 :M
(22)S
86 353 :M
.342 .034(When that recursive scanning process returns, set the bridge's Subordinate Bus # register to the largest bus number)J
58 353 :M
(23)S
86 365 :M
.637 .064(assigned during the recursive scan.   At this point, bus numbers have been assigned to all subordinate buses, and)J
58 365 :M
(24)S
86 377 :M
.232 .023(addresses have been assigned for all devices on the subordnate buses, for this bridge within the PCI domain.  Then,)J
58 377 :M
(25)S
86 389 :M
.527 .053(assign addresses to all devices on the Secondary Bus and set the Memory Base, Memory Limit, I/O Base and I/O)J
58 389 :M
(26)S
86 401 :M
1.181 .118(Limit registers of the bridge to their appropriate values and enable Memory and I/O transactions.  Due to the)J
58 401 :M
(27)S
86 413 :M
-.021(mapping characteristics of PCI-PCI bridges, the ranges of Memory addresses for subordinate devices )A
f4_10 sf
-.02(shall)A
f2_10 sf
-.022( be aligned)A
58 413 :M
(28)S
86 425 :M
-.054(to 1 MB boundaries, and the ranges of I/O addresses )A
f4_10 sf
-.052(shall)A
f2_10 sf
-.056( be aligned to 4 KB boundaries.)A
58 425 :M
(29)S
86 455 :M
f0_10 sf
4.092 .409(Legacy devices)J
-1 -2 84 457 1 2 82 427 @b
58 455 :M
f2_10 sf
(30)S
86 471 :M
-.1("Legacy" VGA and IDE devices that are implemented on PCI will typically have the same "hard-decoded" addresses as)A
-1 -2 84 473 1 2 82 457 @b
58 471 :M
(31)S
86 483 :M
-.011(they did on ISA.  Such devices that have FCode can use explicit indication of their address requirements as described)A
-1 -2 84 485 1 2 82 473 @b
58 483 :M
(32)S
86 495 :M
.041 .004(above.  However, for cards that have no FCode image, Open Firmware )J
f4_10 sf
.01(shall)A
f2_10 sf
.044 .004( assume the standard address ranges and)J
-1 -2 84 497 1 2 82 485 @b
58 495 :M
(33)S
86 507 :M
f4_10 sf
.027(shall)A
f2_10 sf
.072 .007( create the )J
f9_10 sf
.042("reg")A
f2_10 sf
.107 .011( property with these ranges, in addition to any relocatable regions that have base registers.)J
-1 -2 84 509 1 2 82 497 @b
58 507 :M
(34)S
86 523 :M
-.077(For VGA devices \(class-code = )A
f11_10 sf
-.108(0x000100)A
f2_10 sf
-.06( or )A
f11_10 sf
-.108(0x030000)A
f2_10 sf
-.071(\), the address ranges are:)A
-1 -2 84 525 1 2 82 509 @b
58 523 :M
(35)S
122 534 :M
f11_10 sf
(0x3B0-0x3BB)S
230 534 :M
f2_10 sf
-.08(\(I/O, aliased; t=1\))A
-1 -2 84 536 1 2 82 525 @b
58 534 :M
(36)S
122 545 :M
f11_10 sf
(0x3C0-0x3DF)S
230 545 :M
f2_10 sf
-.08(\(I/O, aliased; t=1\))A
-1 -2 84 547 1 2 82 536 @b
58 545 :M
(37)S
122 556 :M
f11_10 sf
(0xA0000-0xBFFFF)S
230 556 :M
f2_10 sf
(\(Memory, below 1MB, t=1\))S
-1 -2 84 558 1 2 82 547 @b
58 556 :M
(38)S
86 572 :M
-.102(For IDE devices \(class-code = )A
f11_10 sf
-.149(0x010100)A
f2_10 sf
-.098(\), the address ranges are:)A
-1 -2 84 574 1 2 82 558 @b
58 572 :M
(39)S
122 583 :M
f11_10 sf
(0x1F0-0x1F7)S
230 583 :M
f2_10 sf
-.048(Primary Command Block \(I/O\))A
-1 -2 84 585 1 2 82 574 @b
58 583 :M
(40)S
122 594 :M
f11_10 sf
(0x3F6)S
230 594 :M
f2_10 sf
-.005(Primary Control Block \(I/O\))A
-1 -2 84 596 1 2 82 585 @b
58 594 :M
(41)S
122 605 :M
f11_10 sf
(0x170-0x17F)S
230 605 :M
f2_10 sf
-.115(Secondary Command Block \(I/O\))A
-1 -2 84 607 1 2 82 596 @b
58 605 :M
(42)S
122 616 :M
f11_10 sf
(0x376)S
230 616 :M
f2_10 sf
-.076(Secondary Control Block \(I/O\))A
-1 -2 84 618 1 2 82 607 @b
58 616 :M
(43)S
58 626 :M
(44)S
58 656 :M
(45)S
endp
%%Page: 20 20
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 20 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
57 46 :M
f2_10 sf
-.005(PCI Bus Binding to Open Firmware)A
437 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
55 49 -1 1 527 48 1 55 48 @a
286 755 :M
(18)S
57 64 :M
f0_10 sf
2.44 .244( ROM Image Format for FCode:)J
34 64 :M
f2_10 sf
(1)S
102 80 :M
f0_10 sf
3.009 .301(Offset from start)J
34 80 :M
f2_10 sf
(2)S
102 92 :M
f0_10 sf
2.768 .277(of ROM Image)J
273 92 :M
.484(Data)A
34 92 :M
f2_10 sf
(3)S
106 108 :M
f11_10 sf
(00h - 01h)S
183 108 :M
f2_10 sf
-.004(ROM signature field of ROM Header \(PCI spec 6.3.1.1\))A
34 108 :M
(4)S
106 124 :M
f11_10 sf
(02h - 03h)S
183 124 :M
f2_10 sf
.191 .019(Pointer to FCode program.  This is a 16-bit field that is the offset from the start of)J
34 124 :M
(5)S
183 136 :M
.114 .011(the ROM image and points to the FCode Program.  The field is in little-endian)J
34 136 :M
(6)S
183 148 :M
-.047(format.  \(This field is within the "Reserved for processor-unique data" field of the)A
34 148 :M
(7)S
183 160 :M
-.179(ROM Header.\))A
34 160 :M
(8)S
106 176 :M
f11_10 sf
(04h - 17h)S
183 176 :M
f2_10 sf
-.127(Reserved \(remainder of "Reserved for processor-unique data" field of the ROM)A
34 176 :M
(9)S
183 188 :M
-.384(Header\).)A
29 188 :M
(10)S
106 204 :M
f11_10 sf
(18h - 19h)S
183 204 :M
f2_10 sf
-.014("Pointer to PCI Data Structure" field of ROM Header.)A
29 204 :M
(11)S
106 220 :M
f11_10 sf
(1Ah - FFFFh)S
183 220 :M
f2_10 sf
.141 .014(PCI Data Structure \(PCI spec 6.3.1.2\) with "Code Type" = 1)J
29 220 :M
(12)S
106 236 :M
f11_10 sf
(38h - FFFFh)S
183 236 :M
f2_10 sf
.07 .007(The PCI Data Structure \(PCI spec 6.3.1.2\), Vital Product Data, and FCode Program)J
29 236 :M
(13)S
183 248 :M
-.028(can each begin anywhere within this range, in any order.  The "Code Type" field of)A
29 248 :M
(14)S
183 260 :M
.111 .011(the PCI Data Structure shall have the value "1".)J
29 260 :M
(15)S
183 276 :M
.041 .004(The FCode Program is as described in Open Firmware; its size is given by the)J
29 276 :M
(16)S
183 288 :M
-.065(standard Open Firmware FCode Program header.  FCode bytes shall appear at)A
29 288 :M
(17)S
183 300 :M
-.124(consecutive byte addresses.)A
29 300 :M
(18)S
57 330 :M
f0_10 sf
3.627 .363(Encapsulated Drivers)J
29 330 :M
f2_10 sf
(19)S
57 346 :M
.605 .06(This section describes a mechanism which allows the encapsulation of run-time drivers within the standard Open)J
29 346 :M
(20)S
57 358 :M
.074 .007(Firmware expansion ROM.)J
29 358 :M
(21)S
57 374 :M
.425 .042(The FCode contained within a PCI card's expansion ROM provides for Open Firmware drivers for the device.  To)J
29 374 :M
(22)S
57 386 :M
.774 .077(enhance the "plug-and-play" of cards in common system platforms, it is desirable to be able to include run-time)J
29 386 :M
(23)S
57 398 :M
.175 .018(drivers within this expansion ROM, thus eliminating the extra step of installing drivers onto the OS boot device.)J
29 398 :M
(24)S
57 414 :M
.493 .049(The information about run-time drivers is encoded as additional standard properties within the device tree.  These)J
29 414 :M
(25)S
57 426 :M
.506 .051(properties are created by the FCode probe code of the plug-in card, and are used by the OS to locate and load the)J
29 426 :M
(26)S
57 438 :M
.75 .075(appropriate driver.  Two new properties are defined;  they differ as to how the location of the run-time driver is)J
29 438 :M
(27)S
57 450 :M
-.355(defined.)A
29 450 :M
(28)S
57 466 :M
f9_10 sf
6.548 .655("driver,\311" format)J
29 466 :M
f2_10 sf
(29)S
75 479 :M
f2_9 sf
.874 .087(This property, encoded as with )J
f9_9 sf
.337(encode-bytes)A
f2_9 sf
.954 .095(, contains the run-time driver.)J
29 479 :M
f2_10 sf
(30)S
57 494 :M
.171 .017(This format is used when the run-time driver is contained within the FCode image, itself.  The value of the property)J
29 494 :M
(31)S
57 505 :M
10 f7_1 :p
6.957 :m
.145(is)A
.562 .056( the encapsulated driver;  the )J
f11_10 sf
.261(prop-addr,prop-len)A
f2_10 sf
.77 .077( reported by the various "get-property" FCodes and/or)J
29 505 :M
(32)S
57 518 :M
f11_10 sf
.105(getprop)A
f2_10 sf
.242 .024( Client interface call represent the location and size of the driver within the device tree's data space.  I.e.,)J
29 518 :M
(33)S
57 530 :M
f9_10 sf
.175(decode-bytes)A
f2_10 sf
.417 .042( could be used to copy the driver into the desired run-time location.)J
29 530 :M
(34)S
57 546 :M
f9_10 sf
7.01 .701("driver-reg,\311" format)J
29 546 :M
f2_10 sf
(35)S
75 559 :M
f2_9 sf
.737 .074(This property, encoded as with the )J
f9_9 sf
.298("reg")A
f0_9 sf
.113 .011( )J
f2_9 sf
.796 .08(standard property , contains a relative pointer to the run-time driver.)J
29 559 :M
f2_10 sf
(36)S
57 574 :M
.241 .024(This format is used when the driver is not directly contained within the FCode image, but rather, is located in some)J
29 574 :M
(37)S
57 586 :M
.27 .027(other portion of the Expansion ROM.  The value is encoded in a )J
f9_9 sf
.109("reg")A
f2_10 sf
.28 .028( format, where the address is relative to the)J
29 586 :M
(38)S
57 598 :M
1.036 .104(expansion ROM's base address.  This format conserves device tree \(and, FCode\) space, but requires the OS to)J
29 598 :M
(39)S
57 610 :M
.794 .079(perform the actions of mapping in the Expansion ROM, using the information supplied by this property and the)J
29 610 :M
(40)S
57 622 :M
f9_9 sf
.22("assigned-addresses")A
f2_10 sf
.627 .063( for the Expansion ROM, and copying the driver, itself.)J
29 622 :M
(41)S
57 638 :M
f4_10 sf
.62 .062(Note:  the )J
f14_9 sf
.327("fcode-rom-offset")A
f4_10 sf
.925 .092( property facilitates the generation of this property within the context of the)J
29 638 :M
f2_10 sf
(42)S
57 650 :M
f4_10 sf
.022 .002(FCode's image.  The driver can be located relative to the ROM image that contains the FCode \(but, does not have to)J
29 650 :M
f2_10 sf
(43)S
57 662 :M
f4_10 sf
.693 .069(be within the FCode, itself\) without regard to the location of that ROM image relative to others within the same)J
29 662 :M
f2_10 sf
(44)S
57 674 :M
f4_10 sf
1.605 .161(Expansion ROM.  I.e., "self-relocating" images containing encapsualted drivers can be created that can be)J
29 674 :M
f2_10 sf
(45)S
57 686 :M
f4_10 sf
.433 .043(concatentated with other images without altering any data within an image \(except, of course, for the Indicator to)J
29 686 :M
f2_10 sf
(46)S
57 698 :M
f4_10 sf
-.078(properly indicate the last image\).)A
29 698 :M
f2_10 sf
(47)S
endp
%%Page: 21 21
%%BeginPageSetup
initializepage
(Ron Hochsprung; page: 21 of 21)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
86 46 :M
f4_10 sf
.284(DRAFT)A
f2_10 sf
.757 .076( Revision 1.5)J
410 46 :M
-.005(PCI Bus Binding to Open Firmware)A
84 49 -1 1 556 48 1 84 48 @a
315 754 :M
(19)S
86 64 :M
f0_10 sf
5.21 .521(Naming conventions)J
63 64 :M
f2_10 sf
(1)S
86 80 :M
.121 .012(The complete property name for these encapsulated drivers is chosen to allow multiple drivers to co-exist within the)J
63 80 :M
(2)S
86 92 :M
.896 .09(expansion ROM.  An OS will locate its desired driver by an exact match of its property name among any such)J
63 92 :M
(3)S
86 104 :M
f11_10 sf
.195("driver,")A
f2_10 sf
.248 .025( \(")J
f11_10 sf
.195(driver-reg,")A
f2_10 sf
.468 .047(\) properties contained within the device tree for this device.  The formats of the)J
63 104 :M
(4)S
86 116 :M
-.065(complete names are:)A
63 116 :M
(5)S
86 132 :M
f11_10 sf
("driver,)S
f16_10 sf
(OS-vendor)S
f11_10 sf
(,)S
f16_10 sf
(OS-type)S
f11_10 sf
(,)S
f16_10 sf
(Instruction-set)S
f11_10 sf
(")S
63 132 :M
f2_10 sf
(6)S
86 144 :M
f11_10 sf
("driver-reg,)S
f16_10 sf
(OS-vendor)S
f11_10 sf
(,)S
f16_10 sf
(OS-type)S
f11_10 sf
(,)S
f16_10 sf
(Instruction-set)S
f11_10 sf
(")S
63 144 :M
f2_10 sf
(7)S
86 160 :M
-.001(The OS-vendor component is as defined for device-names;  i.e., organizational unique identifier \(e.g., stock symbol\).)A
63 160 :M
(8)S
86 172 :M
-.031(The OS-type & Instruction-set components are defined by the OS-vendor.  An example would be:)A
63 172 :M
(9)S
122 188 :M
f11_10 sf
("driver-reg,AAPL,MacOS,PowerPC")S
58 188 :M
f2_10 sf
(10)S
58 204 :M
(11)S
58 220 :M
(12)S
58 236 :M
(13)S
endp
%%Trailer
end		% md
%%EOF
