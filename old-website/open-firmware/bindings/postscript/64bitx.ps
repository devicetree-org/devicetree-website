%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 14 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 1 /Symbol FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "i" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 24 Q
0 X
0 0 0 1 0 0 0 K
(IEEE Draft Std P1275.6/D5) 179.06 665 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Standard for Boot \050Initialization) 154.06 636 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Con\336guration\051 Firmwar) 190.3 607 T
(e) 439.85 607 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64 Bit Extensions) 231.72 578 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(Mar) 274.06 549.62 T
(ch 20, 1995) 300.24 549.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(DRAFT EDITION FOR SPONSOR BALLOTING) 222.07 517.94 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Sponsored by the IEEE Bus Architecture Standards Committee) 193.88 503.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Prepared by the Open Firmware W) 223.6 492.07 T
(orking Group) 363.04 492.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is an unapproved draft of a proposed IEEE Standard, subject to change. Permission is) 138.41 357.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hereby granted for IEEE Standards Committee participants to reproduce this document for) 138.56 345.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(purposes of IEEE standardization activities. If this document is to be submitted to ISO or IEC,) 130.76 333.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(noti\336cation shall be given to the IEEE Copyright Administrator) 130.62 321.31 T
(. Permission is also granted for) 384.51 321.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(member bodies and technical committees of ISO and IEC to reproduce this document for) 141.34 309.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(purposes of developing a national position. Other entities seeking permission to reproduce this) 130.49 297.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(document for standardization or other activities, or to reproduce portions of this document for) 132.03 285.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (these or other uses must contact the IEEE Standards Department for the appropriate license.) 135.65 273.31 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Use of information contained in this unapproved draft is at your own risk.) 171.88 261.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IEEE Standards Department) 263.74 225.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Copyright and Permissions) 266.23 214.17 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(445 Hoes Lane, PO Box 1331) 260.4 203.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Piscataway) 252.26 192.19 T
(, NJ  08855-1331 USA) 296.6 192.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Copyright) 156.34 105.22 T
3 F
(\323) 199.4 105.22 T
2 F
( 1992-95 by the Institute of Electrical and Electronics Engineers, Inc.) 207.29 105.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(345 East 47th Street, New Y) 221.05 93.07 T
(ork, NY  10017 USA) 334.48 93.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(All rights reserved.) 281.93 82.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
85.43 71.14 555.14 721.14 R
1 H
0 Z
N
FMENDPAGE
%%EndPage: "i" 1
%%Page: "ii" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 7 Q
0 X
0 0 0 1 0 0 0 K
(_____________________________________________________________________________________________________________________________________) 87.65 67.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(Copyright) 217.71 53.18 T
3 F
(\323) 260.77 53.18 T
2 F
( 1992-1995 IEEE.  All rights reserved.) 268.67 53.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is an unapproved IEEE Standards Draft, subject to change.) 192.79 41.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ii) 317.62 26.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 72 63 720 R
7 X
V
2 7 Q
0 X
(1) 59.5 715.33 T
(2) 59.5 707.33 T
(3) 59.5 699.33 T
(4) 59.5 691.33 T
(5) 59.5 683.33 T
(6) 59.5 675.33 T
(7) 59.5 667.33 T
(8) 59.5 659.33 T
(9) 59.5 651.33 T
(10) 56 643.33 T
(1) 56.26 635.33 T
(1) 59.5 635.33 T
(12) 56 627.33 T
(13) 56 619.33 T
(14) 56 611.33 T
(15) 56 603.33 T
(16) 56 595.33 T
(17) 56 587.33 T
(18) 56 579.33 T
(19) 56 571.33 T
(20) 56 563.33 T
(21) 56 555.33 T
(22) 56 547.33 T
(23) 56 539.33 T
(24) 56 531.33 T
(25) 56 523.33 T
(26) 56 515.33 T
(27) 56 507.33 T
(28) 56 499.33 T
(29) 56 491.33 T
(30) 56 483.33 T
(31) 56 475.33 T
(32) 56 467.33 T
(33) 56 459.33 T
(34) 56 451.33 T
(35) 56 443.33 T
(36) 56 435.33 T
(37) 56 427.33 T
(38) 56 419.33 T
(39) 56 411.33 T
(40) 56 403.33 T
(41) 56 395.33 T
(42) 56 387.33 T
(43) 56 379.33 T
(44) 56 371.33 T
(45) 56 363.33 T
(46) 56 355.33 T
(47) 56 347.33 T
(48) 56 339.33 T
(49) 56 331.33 T
(50) 56 323.33 T
(51) 56 315.33 T
(52) 56 307.33 T
(53) 56 299.33 T
(54) 56 291.33 T
(55) 56 283.33 T
(56) 56 275.33 T
(57) 56 267.33 T
(58) 56 259.33 T
(59) 56 251.33 T
(60) 56 243.33 T
(61) 56 235.33 T
(62) 56 227.33 T
(63) 56 219.33 T
(64) 56 211.33 T
(65) 56 203.33 T
(66) 56 195.33 T
(67) 56 187.33 T
(68) 56 179.33 T
(69) 56 171.33 T
(70) 56 163.33 T
(71) 56 155.33 T
(72) 56 147.33 T
(73) 56 139.33 T
(74) 56 131.33 T
(75) 56 123.33 T
(76) 56 115.33 T
(77) 56 107.34 T
(78) 56 99.34 T
(79) 56 91.34 T
(80) 56 83.34 T
(81) 56 75.34 T
85.71 741.28 555 755.57 R
7 X
V
2 10 Q
0 X
(IEEE Draft Std P1275.6/D5) 85.71 748.75 T
(March 20, 1995) 490.11 748.75 T
85 743.43 555 743.43 2 L
1 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Intr) 86.4 713.3 T
(oduction) 103.44 713.3 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.07 (\050This introduction is not a part of IEEE Draft Std P1275.6/D3,) 86.4 698.36 P
1 F
-0.07 (Standar) 337.59 698.36 P
-0.07 (d for Boot \050Initialization Con\336guration\051 Firm-) 368.89 698.36 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(war) 86.4 687.35 T
(e, 64 Bit Extensions) 101.59 687.35 T
2 F
(.\051) 181.03 687.35 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Firmware is the ROM-based software that controls a computer between the time it is turned on and the time the pri-) 86.4 672.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mary operating system takes control of the machine. Firmware's responsibilities include testing and initializing the) 86.4 661.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hardware, determining the hardware con\336guration, loading \050or booting\051 the operating system, and providing interac-) 86.4 650.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tive debugging facilities in case of faulty hardware or software.) 86.4 639.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.98 (Open Firmware is the \336rmware architecture de\336ned by IEEE Std 1275-1994,) 86.4 624.38 P
1 F
0.98 (Standar) 407.69 624.38 P
0.98 (d for Boot \050Initialization) 438.99 624.38 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.95 (Con\336guration\051 Firmwar) 86.4 613.37 P
0.95 (e, Cor) 184.49 613.37 P
0.95 (e Requir) 210.06 613.37 P
0.95 (ements and Practices.) 244.8 613.37 P
2 F
0.95 ( That standard is bus-independent, instruction-set-) 334.73 613.37 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(independent, and system-independent.) 86.4 602.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.26 (The core requirements and practices speci\336ed by IEEE Std 1275-1994 must be supplemented by system-speci\336c) 86.4 587.39 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.36 (requirements to form a complete speci\336cation for the \336rmware for a particular system. This standard establishes) 86.4 576.4 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(such additional requirements pertaining to 64 bit processors and systems.) 86.4 565.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "ii" 2
%%Page: "iii" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 7 Q
0 X
0 0 0 1 0 0 0 K
(_____________________________________________________________________________________________________________________________________) 87.65 67.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(Copyright) 217.71 53.18 T
3 F
(\323) 260.77 53.18 T
2 F
( 1992-1995 IEEE.  All rights reserved.) 268.67 53.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is an unapproved IEEE Standards Draft, subject to change.) 192.79 41.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(iii) 316.23 26.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 72 63 720 R
7 X
V
2 7 Q
0 X
(1) 59.5 715.33 T
(2) 59.5 707.33 T
(3) 59.5 699.33 T
(4) 59.5 691.33 T
(5) 59.5 683.33 T
(6) 59.5 675.33 T
(7) 59.5 667.33 T
(8) 59.5 659.33 T
(9) 59.5 651.33 T
(10) 56 643.33 T
(1) 56.26 635.33 T
(1) 59.5 635.33 T
(12) 56 627.33 T
(13) 56 619.33 T
(14) 56 611.33 T
(15) 56 603.33 T
(16) 56 595.33 T
(17) 56 587.33 T
(18) 56 579.33 T
(19) 56 571.33 T
(20) 56 563.33 T
(21) 56 555.33 T
(22) 56 547.33 T
(23) 56 539.33 T
(24) 56 531.33 T
(25) 56 523.33 T
(26) 56 515.33 T
(27) 56 507.33 T
(28) 56 499.33 T
(29) 56 491.33 T
(30) 56 483.33 T
(31) 56 475.33 T
(32) 56 467.33 T
(33) 56 459.33 T
(34) 56 451.33 T
(35) 56 443.33 T
(36) 56 435.33 T
(37) 56 427.33 T
(38) 56 419.33 T
(39) 56 411.33 T
(40) 56 403.33 T
(41) 56 395.33 T
(42) 56 387.33 T
(43) 56 379.33 T
(44) 56 371.33 T
(45) 56 363.33 T
(46) 56 355.33 T
(47) 56 347.33 T
(48) 56 339.33 T
(49) 56 331.33 T
(50) 56 323.33 T
(51) 56 315.33 T
(52) 56 307.33 T
(53) 56 299.33 T
(54) 56 291.33 T
(55) 56 283.33 T
(56) 56 275.33 T
(57) 56 267.33 T
(58) 56 259.33 T
(59) 56 251.33 T
(60) 56 243.33 T
(61) 56 235.33 T
(62) 56 227.33 T
(63) 56 219.33 T
(64) 56 211.33 T
(65) 56 203.33 T
(66) 56 195.33 T
(67) 56 187.33 T
(68) 56 179.33 T
(69) 56 171.33 T
(70) 56 163.33 T
(71) 56 155.33 T
(72) 56 147.33 T
(73) 56 139.33 T
(74) 56 131.33 T
(75) 56 123.33 T
(76) 56 115.33 T
(77) 56 107.34 T
(78) 56 99.34 T
(79) 56 91.34 T
(80) 56 83.34 T
(81) 56 75.34 T
85.71 741.28 555 755.57 R
7 X
V
2 10 Q
0 X
(IEEE Draft Std P1275.6/D5) 85.71 748.75 T
(March 20, 1995) 490.11 748.75 T
85.14 742.57 555.15 742.57 2 L
1 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(W) 86.4 713.3 T
(orking Gr) 95.85 713.3 T
(oup Members) 138.73 713.3 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(The following individuals were members of the W) 86.4 698.38 T
(orking Group at the time this document was produced:) 288.07 698.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 86.4 683.39 T
(illiam M. \050Mitch\051 Bradley) 95.44 683.39 T
(, Chairman, FirmW) 199.23 683.39 T
(orks) 276.76 683.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( David M. Kahn, V) 324.75 683.39 T
(ice Chairman, Sun Microsystems, Inc.) 401.36 683.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(John Rible, Draft Editor) 86.4 672.4 T
(, FORCE COMPUTERS Inc.) 182.66 672.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( Luan D. Nguyen, Secretary) 368.14 672.4 T
(, IBM Corporation) 479.68 672.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mike T) 86.4 661.41 T
(uciarone, FirmW) 115.77 661.41 T
(orks) 183.29 661.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( David L. Paktor) 370.63 661.41 T
(, FORCE COMPUTERS Inc.) 436.89 661.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Paul Thomas, Sun Microsystems, Inc.) 86.4 650.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( Thanos Metzelopoulos, Antel, Inc.) 413.03 650.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ron Hochsprung, Apple Computer Inc.) 86.4 639.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( Y) 424.57 639.43 T
(ongjae Rim, IBM Corporation) 433.29 639.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Martin W) 86.4 628.44 T
(alsh, Sun Microsystems, Inc.) 124.76 628.44 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( Mike W) 468.13 628.44 T
(illiams, SHL) 503.28 628.44 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Sponsor Balloting Body) 86.4 588.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(The following individuals were members of the Sponsor Balloting Body:) 86.4 573.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iii" 3
%%Page: "iv" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 7 Q
0 X
0 0 0 1 0 0 0 K
(_____________________________________________________________________________________________________________________________________) 87.65 67.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(Copyright) 217.71 53.18 T
3 F
(\323) 260.77 53.18 T
2 F
( 1992-1995 IEEE.  All rights reserved.) 268.67 53.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is an unapproved IEEE Standards Draft, subject to change.) 192.79 41.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(iv) 316.51 26.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 72 63 720 R
7 X
V
2 7 Q
0 X
(1) 59.5 715.33 T
(2) 59.5 707.33 T
(3) 59.5 699.33 T
(4) 59.5 691.33 T
(5) 59.5 683.33 T
(6) 59.5 675.33 T
(7) 59.5 667.33 T
(8) 59.5 659.33 T
(9) 59.5 651.33 T
(10) 56 643.33 T
(1) 56.26 635.33 T
(1) 59.5 635.33 T
(12) 56 627.33 T
(13) 56 619.33 T
(14) 56 611.33 T
(15) 56 603.33 T
(16) 56 595.33 T
(17) 56 587.33 T
(18) 56 579.33 T
(19) 56 571.33 T
(20) 56 563.33 T
(21) 56 555.33 T
(22) 56 547.33 T
(23) 56 539.33 T
(24) 56 531.33 T
(25) 56 523.33 T
(26) 56 515.33 T
(27) 56 507.33 T
(28) 56 499.33 T
(29) 56 491.33 T
(30) 56 483.33 T
(31) 56 475.33 T
(32) 56 467.33 T
(33) 56 459.33 T
(34) 56 451.33 T
(35) 56 443.33 T
(36) 56 435.33 T
(37) 56 427.33 T
(38) 56 419.33 T
(39) 56 411.33 T
(40) 56 403.33 T
(41) 56 395.33 T
(42) 56 387.33 T
(43) 56 379.33 T
(44) 56 371.33 T
(45) 56 363.33 T
(46) 56 355.33 T
(47) 56 347.33 T
(48) 56 339.33 T
(49) 56 331.33 T
(50) 56 323.33 T
(51) 56 315.33 T
(52) 56 307.33 T
(53) 56 299.33 T
(54) 56 291.33 T
(55) 56 283.33 T
(56) 56 275.33 T
(57) 56 267.33 T
(58) 56 259.33 T
(59) 56 251.33 T
(60) 56 243.33 T
(61) 56 235.33 T
(62) 56 227.33 T
(63) 56 219.33 T
(64) 56 211.33 T
(65) 56 203.33 T
(66) 56 195.33 T
(67) 56 187.33 T
(68) 56 179.33 T
(69) 56 171.33 T
(70) 56 163.33 T
(71) 56 155.33 T
(72) 56 147.33 T
(73) 56 139.33 T
(74) 56 131.33 T
(75) 56 123.33 T
(76) 56 115.33 T
(77) 56 107.34 T
(78) 56 99.34 T
(79) 56 91.34 T
(80) 56 83.34 T
(81) 56 75.34 T
85.71 741.28 555 755.57 R
7 X
V
2 10 Q
0 X
(IEEE Draft Std P1275.6/D5) 85.71 748.75 T
(March 20, 1995) 490.11 748.75 T
85 743.43 555 743.43 2 L
1 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(This page is intentionally left blank) 233.99 651.86 T
2 10 Q
(.) 404.31 651.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iv" 4
%%Page: "v" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 7 Q
0 X
0 0 0 1 0 0 0 K
(_____________________________________________________________________________________________________________________________________) 87.65 67.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(Copyright) 217.71 53.18 T
3 F
(\323) 260.77 53.18 T
2 F
( 1992-1994 IEEE.  All rights reserved.) 268.67 53.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is an unapproved IEEE Standards Draft, subject to change.) 192.79 41.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(v) 317.9 26.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 72 63 720 R
7 X
V
2 7 Q
0 X
(1) 59.5 715.33 T
(2) 59.5 707.33 T
(3) 59.5 699.33 T
(4) 59.5 691.33 T
(5) 59.5 683.33 T
(6) 59.5 675.33 T
(7) 59.5 667.33 T
(8) 59.5 659.33 T
(9) 59.5 651.33 T
(10) 56 643.33 T
(1) 56.26 635.33 T
(1) 59.5 635.33 T
(12) 56 627.33 T
(13) 56 619.33 T
(14) 56 611.33 T
(15) 56 603.33 T
(16) 56 595.33 T
(17) 56 587.33 T
(18) 56 579.33 T
(19) 56 571.33 T
(20) 56 563.33 T
(21) 56 555.33 T
(22) 56 547.33 T
(23) 56 539.33 T
(24) 56 531.33 T
(25) 56 523.33 T
(26) 56 515.33 T
(27) 56 507.33 T
(28) 56 499.33 T
(29) 56 491.33 T
(30) 56 483.33 T
(31) 56 475.33 T
(32) 56 467.33 T
(33) 56 459.33 T
(34) 56 451.33 T
(35) 56 443.33 T
(36) 56 435.33 T
(37) 56 427.33 T
(38) 56 419.33 T
(39) 56 411.33 T
(40) 56 403.33 T
(41) 56 395.33 T
(42) 56 387.33 T
(43) 56 379.33 T
(44) 56 371.33 T
(45) 56 363.33 T
(46) 56 355.33 T
(47) 56 347.33 T
(48) 56 339.33 T
(49) 56 331.33 T
(50) 56 323.33 T
(51) 56 315.33 T
(52) 56 307.33 T
(53) 56 299.33 T
(54) 56 291.33 T
(55) 56 283.33 T
(56) 56 275.33 T
(57) 56 267.33 T
(58) 56 259.33 T
(59) 56 251.33 T
(60) 56 243.33 T
(61) 56 235.33 T
(62) 56 227.33 T
(63) 56 219.33 T
(64) 56 211.33 T
(65) 56 203.33 T
(66) 56 195.33 T
(67) 56 187.33 T
(68) 56 179.33 T
(69) 56 171.33 T
(70) 56 163.33 T
(71) 56 155.33 T
(72) 56 147.33 T
(73) 56 139.33 T
(74) 56 131.33 T
(75) 56 123.33 T
(76) 56 115.33 T
(77) 56 107.34 T
(78) 56 99.34 T
(79) 56 91.34 T
(80) 56 83.34 T
(81) 56 75.34 T
85.71 741.28 555 755.57 R
7 X
V
2 10 Q
0 X
(IEEE Draft Std P1275.6/D5) 85.71 748.75 T
(March 20, 1995) 490.11 748.75 T
85.14 742.57 555.15 742.57 2 L
1 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(T) 275.29 712 T
(able of Contents) 282.19 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(Introduction) 86.4 660.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(....................................................................................................................................................................) 137.5 660.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ii) 548.84 660.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1. Overview) 86.4 644.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(....................................................................................................................................................................) 137.5 644.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 549.4 644.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2. References) 86.4 628.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..................................................................................................................................................................) 142.5 628.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 549.4 628.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3. T) 86.4 612.33 T
(erms) 101.81 612.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..........................................................................................................................................................................) 122.5 612.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 549.4 612.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4. Generic Requirements) 86.4 596.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(................................................................................................................................................) 187.5 596.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 549.4 596.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.1. Cell Size and Client Interfaces) 122.4 578.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..................................................................................................................) 262.5 578.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 549.4 578.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.2. V) 122.4 560.33 T
(irtual Address Allocation) 146.52 560.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................................................................................................................) 250 560.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 549.4 560.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5. Interface Changes and Extensions) 86.4 544.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..............................................................................................................................) 232.5 544.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 549.4 544.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.1. 64-Bit Extensions) 122.4 526.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(......................................................................................................................................) 212.5 526.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 549.4 526.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2. 64-Bit Changes) 122.4 508.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..........................................................................................................................................) 202.5 508.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 549.4 508.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "v" 5
%%Page: "vi" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 7 Q
0 X
0 0 0 1 0 0 0 K
(_____________________________________________________________________________________________________________________________________) 87.65 67.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(Copyright) 217.71 53.18 T
3 F
(\323) 260.77 53.18 T
2 F
( 1992-1994 IEEE.  All rights reserved.) 268.67 53.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is an unapproved IEEE Standards Draft, subject to change.) 192.79 41.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vi) 316.51 26.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 72 63 720 R
7 X
V
2 7 Q
0 X
(1) 59.5 715.33 T
(2) 59.5 707.33 T
(3) 59.5 699.33 T
(4) 59.5 691.33 T
(5) 59.5 683.33 T
(6) 59.5 675.33 T
(7) 59.5 667.33 T
(8) 59.5 659.33 T
(9) 59.5 651.33 T
(10) 56 643.33 T
(1) 56.26 635.33 T
(1) 59.5 635.33 T
(12) 56 627.33 T
(13) 56 619.33 T
(14) 56 611.33 T
(15) 56 603.33 T
(16) 56 595.33 T
(17) 56 587.33 T
(18) 56 579.33 T
(19) 56 571.33 T
(20) 56 563.33 T
(21) 56 555.33 T
(22) 56 547.33 T
(23) 56 539.33 T
(24) 56 531.33 T
(25) 56 523.33 T
(26) 56 515.33 T
(27) 56 507.33 T
(28) 56 499.33 T
(29) 56 491.33 T
(30) 56 483.33 T
(31) 56 475.33 T
(32) 56 467.33 T
(33) 56 459.33 T
(34) 56 451.33 T
(35) 56 443.33 T
(36) 56 435.33 T
(37) 56 427.33 T
(38) 56 419.33 T
(39) 56 411.33 T
(40) 56 403.33 T
(41) 56 395.33 T
(42) 56 387.33 T
(43) 56 379.33 T
(44) 56 371.33 T
(45) 56 363.33 T
(46) 56 355.33 T
(47) 56 347.33 T
(48) 56 339.33 T
(49) 56 331.33 T
(50) 56 323.33 T
(51) 56 315.33 T
(52) 56 307.33 T
(53) 56 299.33 T
(54) 56 291.33 T
(55) 56 283.33 T
(56) 56 275.33 T
(57) 56 267.33 T
(58) 56 259.33 T
(59) 56 251.33 T
(60) 56 243.33 T
(61) 56 235.33 T
(62) 56 227.33 T
(63) 56 219.33 T
(64) 56 211.33 T
(65) 56 203.33 T
(66) 56 195.33 T
(67) 56 187.33 T
(68) 56 179.33 T
(69) 56 171.33 T
(70) 56 163.33 T
(71) 56 155.33 T
(72) 56 147.33 T
(73) 56 139.33 T
(74) 56 131.33 T
(75) 56 123.33 T
(76) 56 115.33 T
(77) 56 107.34 T
(78) 56 99.34 T
(79) 56 91.34 T
(80) 56 83.34 T
(81) 56 75.34 T
85.71 741.28 555 755.57 R
7 X
V
2 10 Q
0 X
(IEEE Draft Std P1275.6/D5) 85.71 748.75 T
(March 20, 1995) 490.11 748.75 T
85 743.43 555 743.43 2 L
1 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(This page is intentionally left blank) 233.99 651.86 T
2 10 Q
(.) 404.31 651.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "vi" 6
%%Page: "1" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 7 Q
0 X
0 0 0 1 0 0 0 K
(_____________________________________________________________________________________________________________________________________) 87.65 67.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(Copyright) 217.71 53.18 T
3 F
(\323) 260.77 53.18 T
2 F
( 1992-1995 IEEE.  All rights reserved.) 268.67 53.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is an unapproved IEEE Standards Draft, subject to change.) 192.79 41.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 317.9 26.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 72 63 720 R
7 X
V
2 7 Q
0 X
(1) 59.5 715.33 T
(2) 59.5 707.33 T
(3) 59.5 699.33 T
(4) 59.5 691.33 T
(5) 59.5 683.33 T
(6) 59.5 675.33 T
(7) 59.5 667.33 T
(8) 59.5 659.33 T
(9) 59.5 651.33 T
(10) 56 643.33 T
(1) 56.26 635.33 T
(1) 59.5 635.33 T
(12) 56 627.33 T
(13) 56 619.33 T
(14) 56 611.33 T
(15) 56 603.33 T
(16) 56 595.33 T
(17) 56 587.33 T
(18) 56 579.33 T
(19) 56 571.33 T
(20) 56 563.33 T
(21) 56 555.33 T
(22) 56 547.33 T
(23) 56 539.33 T
(24) 56 531.33 T
(25) 56 523.33 T
(26) 56 515.33 T
(27) 56 507.33 T
(28) 56 499.33 T
(29) 56 491.33 T
(30) 56 483.33 T
(31) 56 475.33 T
(32) 56 467.33 T
(33) 56 459.33 T
(34) 56 451.33 T
(35) 56 443.33 T
(36) 56 435.33 T
(37) 56 427.33 T
(38) 56 419.33 T
(39) 56 411.33 T
(40) 56 403.33 T
(41) 56 395.33 T
(42) 56 387.33 T
(43) 56 379.33 T
(44) 56 371.33 T
(45) 56 363.33 T
(46) 56 355.33 T
(47) 56 347.33 T
(48) 56 339.33 T
(49) 56 331.33 T
(50) 56 323.33 T
(51) 56 315.33 T
(52) 56 307.33 T
(53) 56 299.33 T
(54) 56 291.33 T
(55) 56 283.33 T
(56) 56 275.33 T
(57) 56 267.33 T
(58) 56 259.33 T
(59) 56 251.33 T
(60) 56 243.33 T
(61) 56 235.33 T
(62) 56 227.33 T
(63) 56 219.33 T
(64) 56 211.33 T
(65) 56 203.33 T
(66) 56 195.33 T
(67) 56 187.33 T
(68) 56 179.33 T
(69) 56 171.33 T
(70) 56 163.33 T
(71) 56 155.33 T
(72) 56 147.33 T
(73) 56 139.33 T
(74) 56 131.33 T
(75) 56 123.33 T
(76) 56 115.33 T
(77) 56 107.34 T
(78) 56 99.34 T
(79) 56 91.34 T
(80) 56 83.34 T
(81) 56 75.34 T
85.71 741.28 555 755.57 R
7 X
V
2 10 Q
0 X
(IEEE Draft Std P1275.6/D5) 85.71 748.75 T
(March 20, 1995) 490.11 748.75 T
85.14 742.57 555.15 742.57 2 L
1 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(1. Overview) 86.4 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(This standard describes the application of IEEE Std 1275-1994,) 86.4 697.16 T
1 F
(Standar) 343.59 697.16 T
(d for Boot \050Initialization Con\336guration\051) 374.89 697.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Firmwar) 86.4 686.15 T
(e, Cor) 121.59 686.15 T
(e Requir) 146.22 686.15 T
(ements and Practices) 180.01 686.15 T
2 F
(, to 64 bit processors and systems. Additional supplements for 64 bit) 265.55 686.15 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(processors and systems should include this supplement by reference.) 86.4 675.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(2. Refer) 86.4 646.32 T
(ences) 120.09 646.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
([1]  IEEE Std 1275-1994,) 86.4 630.15 T
1 F
(Standar) 191.39 630.15 T
(d for Boot \050Initialization Con\336guration\051 Firmwar) 222.69 630.15 T
(e, Cor) 420.4 630.15 T
(e Requir) 445.03 630.15 T
(ements and) 478.82 630.15 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Practices) 86.4 619.14 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(3. T) 86.4 590.41 T
(erms) 102.15 590.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(This standard uses technical terms as they are de\336ned in the documents cited in \322References\323, plus the following) 86.4 574.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(terms:) 86.4 563.27 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(cor) 86.4 548.26 T
(e, cor) 100.1 548.26 T
(e speci\336cation:) 123.24 548.26 T
2 F
(refers to IEEE Std 1275-1994,) 191.29 548.26 T
1 F
(Standar) 315.16 548.26 T
(d for Boot \050Initialization Con\336guration\051 Firmwar) 346.46 548.26 T
(e,) 544.17 548.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Cor) 86.4 537.25 T
(e Requir) 101.59 537.25 T
(ements and Practices) 135.38 537.25 T
2 F
(, i.e., the standard that speci\336es the system-independent and bus-independent) 220.92 537.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(requirements for Open Firmware.) 86.4 526.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Open Firmwar) 86.4 511.27 T
(e, \336rmwar) 150.38 511.27 T
(e:) 194.63 511.27 T
2 F
(The \336rmware architecture de\336ned by the core speci\336cation and this speci\336cation or) 207.4 511.27 T
(,) 540.54 511.27 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(when used as an adjective, a software component compliant with the core speci\336cation and this speci\336cation.) 86.4 500.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(4. Generic Requir) 86.4 471.44 T
(ements) 162.6 471.44 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.1. Cell Size and Client Interfaces) 86.4 441.44 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.21 (The cell-size for implementations compliant with this standard shall be 64-bits. 64-bit implementations shall export a) 86.4 425.29 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64-bit client interface based on a set of bindings to the core speci\336cation for that 64-bit instruction set architecture.) 86.4 414.3 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64-bit implementations may choose to export both a 32-bit and a 64-bit client interface, depending on the type of) 86.4 403.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(standalone program compatibility required by the implementation.) 86.4 392.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(It is recommended that 64-bit implementations only export a single 64-bit client interface, and that 32-bit client pro-) 86.4 377.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (grams use a software wrapper layer to convert 32-bit client interface calls to 64-bit calls and convert 64-bit results to) 86.4 366.34 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32-bit results.) 86.4 355.35 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(4.2. V) 86.4 326.51 T
(irtual Addr) 110.75 326.51 T
(ess Allocation) 159.74 326.51 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(The \336rmware may use any portion of the virtual address space, including virtual addresses above the 32-bit address) 86.4 310.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(range. The \336rmware should allocate all virtual addresses from the range 0x0 through 0xf) 86.4 299.37 T
(f) 440.59 299.37 T
(f) 443.74 299.37 T
(f.f) 446.89 299.37 T
(f) 455.87 299.37 T
(f) 459.02 299.37 T
(f, except those virtual) 462.17 299.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(addresses that the \336rmware does not expose through the client or device interfaces. This recommendation allows 32-) 86.4 288.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(bit client programs to access \336rmware-allocated virtual addresses. Client programs that use a 32-bit client interface) 86.4 277.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and manage the upper portion of the virtual address space must do so on their own, and must respect any allocations) 86.4 266.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(made by \336rmware in the upper portion of the address space.) 86.4 255.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 7
%%Page: "2" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 7 Q
0 X
0 0 0 1 0 0 0 K
(_____________________________________________________________________________________________________________________________________) 87.65 67.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(Copyright) 217.71 53.18 T
3 F
(\323) 260.77 53.18 T
2 F
( 1992-1995 IEEE.  All rights reserved.) 268.67 53.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is an unapproved IEEE Standards Draft, subject to change.) 192.79 41.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 317.9 26.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 72 63 720 R
7 X
V
2 7 Q
0 X
(1) 59.5 715.33 T
(2) 59.5 707.33 T
(3) 59.5 699.33 T
(4) 59.5 691.33 T
(5) 59.5 683.33 T
(6) 59.5 675.33 T
(7) 59.5 667.33 T
(8) 59.5 659.33 T
(9) 59.5 651.33 T
(10) 56 643.33 T
(1) 56.26 635.33 T
(1) 59.5 635.33 T
(12) 56 627.33 T
(13) 56 619.33 T
(14) 56 611.33 T
(15) 56 603.33 T
(16) 56 595.33 T
(17) 56 587.33 T
(18) 56 579.33 T
(19) 56 571.33 T
(20) 56 563.33 T
(21) 56 555.33 T
(22) 56 547.33 T
(23) 56 539.33 T
(24) 56 531.33 T
(25) 56 523.33 T
(26) 56 515.33 T
(27) 56 507.33 T
(28) 56 499.33 T
(29) 56 491.33 T
(30) 56 483.33 T
(31) 56 475.33 T
(32) 56 467.33 T
(33) 56 459.33 T
(34) 56 451.33 T
(35) 56 443.33 T
(36) 56 435.33 T
(37) 56 427.33 T
(38) 56 419.33 T
(39) 56 411.33 T
(40) 56 403.33 T
(41) 56 395.33 T
(42) 56 387.33 T
(43) 56 379.33 T
(44) 56 371.33 T
(45) 56 363.33 T
(46) 56 355.33 T
(47) 56 347.33 T
(48) 56 339.33 T
(49) 56 331.33 T
(50) 56 323.33 T
(51) 56 315.33 T
(52) 56 307.33 T
(53) 56 299.33 T
(54) 56 291.33 T
(55) 56 283.33 T
(56) 56 275.33 T
(57) 56 267.33 T
(58) 56 259.33 T
(59) 56 251.33 T
(60) 56 243.33 T
(61) 56 235.33 T
(62) 56 227.33 T
(63) 56 219.33 T
(64) 56 211.33 T
(65) 56 203.33 T
(66) 56 195.33 T
(67) 56 187.33 T
(68) 56 179.33 T
(69) 56 171.33 T
(70) 56 163.33 T
(71) 56 155.33 T
(72) 56 147.33 T
(73) 56 139.33 T
(74) 56 131.33 T
(75) 56 123.33 T
(76) 56 115.33 T
(77) 56 107.34 T
(78) 56 99.34 T
(79) 56 91.34 T
(80) 56 83.34 T
(81) 56 75.34 T
85.71 741.28 555 755.57 R
7 X
V
2 10 Q
0 X
(IEEE Draft Std P1275.6/D5) 85.71 748.75 T
(March 20, 1995) 490.11 748.75 T
85 743.43 555 743.43 2 L
1 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(5. Interface Changes and Extensions) 86.4 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.1. 64-Bit Extensions) 86.4 683.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(This document augments and modi\336es the core speci\336cation in the following ways:) 86.4 667.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This speci\336cation overrides the following de\336nitions in the core speci\336cation, Annex A, Section A.1.2.2:) 86.4 652.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(x x1 x2 etc.) 122.4 637.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Arbitrary 64 bit stack items.) 230.4 637.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(n n1 n2 n3) 122.4 622.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Normal, signed values \05064-bit\051) 230.4 622.21 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(xyz) 122.4 607.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Arbitrary descriptive text \050signed 64-bit value\051) 230.4 607.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This speci\336cation adds the following de\336nitions:) 86.4 577.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(o o1 o2 oct1 oct2 etc.) 122.4 562.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(64 bit signed values) 230.4 562.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(oaddr) 122.4 547.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Octlet-aligned \05064 bit aligned\051 address) 230.4 547.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(octlet) 122.4 532.27 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(An 8 byte quantity) 230.4 532.27 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This speci\336cation adds the following FCode functions. A system that implements the FCode Debugging Command) 86.4 502.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Group shall implement commands corresponding to all of the FCode functions listed in this section with the same) 86.4 491.3 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(names and semantics as those FCode functions.) 86.4 480.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(bxjoin) 86.4 450.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 b.lo  b.2 b.3 b.4 b.5 b.6 b.7 b.hi -- o \051) 258.94 450.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 450.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x241) 529.4 450.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Join 8 bytes to form an octlet.) 104.4 436.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Combine the eight least signi\336cant bits of each operand to form an octlet. Other operand bits are ignored.) 104.4 413.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(<l@) 86.4 391.12 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 qaddr -- n \051) 310.9 391.12 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 391.12 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x242) 529.4 391.12 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Fetch quadlet from) 104.4 376.63 T
1 F
(qaddr) 175.14 376.63 T
2 F
(, sign-extended.) 196.28 376.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(lxjoin) 86.4 353.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 quad.lo quad.hi -- o \051) 290.75 353.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 353.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x243) 529.4 353.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Join 2 quadlets to form an octlet.) 104.4 339.45 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Combine the thirty-two least signi\336cant bits of each operand to form an octlet. Other operand bits are ignored.) 104.4 317.27 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(rx@ \050FCode Function\051) 86.4 294.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 oaddr -- o \051) 311.46 294.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 294.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x22E) 527.73 294.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Fetch an octlet from device register at) 104.4 280.07 T
1 F
(oaddr) 243.12 280.07 T
2 F
(.) 264.12 280.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Data is read with a single access operation.) 104.4 257.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Result has identical bit ordering as the original register data.) 104.4 246.79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(rx@ \050User Interface\051) 86.4 224.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 oaddr -- o \051) 311.46 224.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Fetch an octlet from device register at) 104.4 209.59 T
1 F
(oaddr) 243.12 209.59 T
2 F
(.) 264.12 209.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Compilation:) 104.4 185.88 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Perform the equivalent of the phrase:) 104.4 171.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(h# 22e get-token if compile, else execute then) 122.4 160.84 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Interpr) 104.4 147.31 T
(etation:) 135.88 147.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Perform the equivalent of the phrase:) 104.4 132.84 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(h# 22e get-token drop execute) 122.4 122.27 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Note:) 104.4 110.27 T
2 F
(A bus device can substitute \050see) 129.89 110.27 T
5 F
(set-token) 249.62 110.27 T
2 F
(\051 a bus-speci\336c implementation of) 298.21 110.27 T
0 F
(rx@) 425.7 110.27 T
2 F
(for use by its children. This is) 444.82 110.27 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.1 (sometimes necessary to correctly implement its semantics with respect to bit-order and write-buf) 104.4 101.82 P
-0.1 (fer \337ushing. The given User) 451.44 101.82 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Interface semantics of) 104.4 93.73 T
0 F
(rx@) 188.37 93.73 T
2 F
(ensure that such substitutions are visible at the User Interface level.) 207.49 93.73 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 8
%%Page: "3" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 7 Q
0 X
0 0 0 1 0 0 0 K
(_____________________________________________________________________________________________________________________________________) 87.65 67.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(Copyright) 217.71 53.18 T
3 F
(\323) 260.77 53.18 T
2 F
( 1992-1995 IEEE.  All rights reserved.) 268.67 53.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is an unapproved IEEE Standards Draft, subject to change.) 192.79 41.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 317.9 26.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 72 63 720 R
7 X
V
2 7 Q
0 X
(1) 59.5 715.33 T
(2) 59.5 707.33 T
(3) 59.5 699.33 T
(4) 59.5 691.33 T
(5) 59.5 683.33 T
(6) 59.5 675.33 T
(7) 59.5 667.33 T
(8) 59.5 659.33 T
(9) 59.5 651.33 T
(10) 56 643.33 T
(1) 56.26 635.33 T
(1) 59.5 635.33 T
(12) 56 627.33 T
(13) 56 619.33 T
(14) 56 611.33 T
(15) 56 603.33 T
(16) 56 595.33 T
(17) 56 587.33 T
(18) 56 579.33 T
(19) 56 571.33 T
(20) 56 563.33 T
(21) 56 555.33 T
(22) 56 547.33 T
(23) 56 539.33 T
(24) 56 531.33 T
(25) 56 523.33 T
(26) 56 515.33 T
(27) 56 507.33 T
(28) 56 499.33 T
(29) 56 491.33 T
(30) 56 483.33 T
(31) 56 475.33 T
(32) 56 467.33 T
(33) 56 459.33 T
(34) 56 451.33 T
(35) 56 443.33 T
(36) 56 435.33 T
(37) 56 427.33 T
(38) 56 419.33 T
(39) 56 411.33 T
(40) 56 403.33 T
(41) 56 395.33 T
(42) 56 387.33 T
(43) 56 379.33 T
(44) 56 371.33 T
(45) 56 363.33 T
(46) 56 355.33 T
(47) 56 347.33 T
(48) 56 339.33 T
(49) 56 331.33 T
(50) 56 323.33 T
(51) 56 315.33 T
(52) 56 307.33 T
(53) 56 299.33 T
(54) 56 291.33 T
(55) 56 283.33 T
(56) 56 275.33 T
(57) 56 267.33 T
(58) 56 259.33 T
(59) 56 251.33 T
(60) 56 243.33 T
(61) 56 235.33 T
(62) 56 227.33 T
(63) 56 219.33 T
(64) 56 211.33 T
(65) 56 203.33 T
(66) 56 195.33 T
(67) 56 187.33 T
(68) 56 179.33 T
(69) 56 171.33 T
(70) 56 163.33 T
(71) 56 155.33 T
(72) 56 147.33 T
(73) 56 139.33 T
(74) 56 131.33 T
(75) 56 123.33 T
(76) 56 115.33 T
(77) 56 107.34 T
(78) 56 99.34 T
(79) 56 91.34 T
(80) 56 83.34 T
(81) 56 75.34 T
85.71 741.28 555 755.57 R
7 X
V
2 10 Q
0 X
(IEEE Draft Std P1275.6/D5) 85.71 748.75 T
(March 20, 1995) 490.11 748.75 T
85.14 742.57 555.15 742.57 2 L
1 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(rx! \050FCode Function\051) 86.4 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 o oaddr -- \051) 311.46 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x22F) 528.29 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Store an octlet to device register at) 104.4 698.84 T
1 F
(oaddr) 231.62 698.84 T
2 F
(.) 252.63 698.84 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Data is stored with a single access operation and \337ushes any intervening write buf) 104.4 676.66 T
(fers, so that the data reaches its \336nal desti-) 399.44 676.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(nation before the next "word" is executed.) 104.4 668.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Result is stored with the identical bit ordering as the input stack item.) 104.4 657.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(rx! \050User Interface\051) 86.4 634.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 o oaddr -- \051) 311.46 634.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Store an octlet to device register at) 104.4 620.28 T
1 F
(oaddr) 231.62 620.28 T
2 F
(.) 252.63 620.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Compilation:) 104.4 596.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Perform the equivalent of the phrase:) 104.4 582.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(h# 22f get-token if compile, else execute then) 122.4 571.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Interpr) 104.4 558 T
(etation:) 135.88 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Perform the equivalent of the phrase:) 104.4 543.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(h# 22f get-token drop execute) 122.4 532.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Note:) 104.4 521.1 T
2 F
( A bus device can substitute \050see) 127.64 521.1 T
5 F
(set-token) 249.62 521.1 T
2 F
(\051 a bus-speci\336c implementation of  rx! for use by its children. This is) 298.21 521.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.1 (sometimes necessary to correctly implement its semantics with respect to bit-order and write-buf) 104.4 512.1 P
-0.1 (fer \337ushing. The given User) 451.44 512.1 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Interface semantics of) 104.4 503.1 T
0 F
(rx!) 186.12 503.1 T
2 F
( ensure that such substitutions are visible at the User Interface level.) 197.61 503.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(wxjoin) 86.4 479.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 w) 289.09 479.34 T
(.lo w) 301.59 479.34 T
(.2 w) 321.04 479.34 T
(.3 w) 337.71 479.34 T
(.hi -- o \051) 354.38 479.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 479.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x244) 529.4 479.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
( Join four doublets to form an octlet.) 104.4 464.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Combine the sixteen least signi\336cant bits of each operand to form an octlet. Other operand bits are ignored.) 104.4 442.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(x,) 86.4 419.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 o -- \051) 325.49 419.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 419.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x245) 529.4 419.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Compile an octlet,) 104.4 405.49 T
1 F
(o) 172.9 405.49 T
2 F
(, into the dictionary \050doublet-aligned\051.) 177.4 405.49 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(x@) 86.4 382.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 oaddr  -- o \051) 310.21 382.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 382.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x246) 529.4 382.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Fetch octlet from an octlet aligned address.) 104.4 368.3 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(x!) 86.4 345.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 o oaddr -- \051) 311.46 345.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 345.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x247) 529.4 345.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Store octlet to an octlet aligned address.) 104.4 331.12 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(/x) 86.4 308.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 -- n \051) 325.21 308.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 308.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x248) 529.4 308.41 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(.Number of address units in an octlet, typically eight.) 104.4 293.94 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(/x*) 86.4 271.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 nu1 -- nu2 \051) 310.62 271.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 271.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x249) 529.4 271.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Multiply) 104.4 256.74 T
1 F
(nu1) 138.16 256.74 T
2 F
( by the value of) 151.66 256.74 T
5 F
(/x.) 209.9 256.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(xa+) 86.4 233.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 addr1 index -- addr2 \051) 288.26 233.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 233.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x24A) 527.18 233.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Increment) 104.4 219.18 T
1 F
(addr1) 143.14 219.18 T
2 F
( by) 164.64 219.18 T
1 F
(index) 178.14 219.18 T
2 F
( times the value of) 197.63 219.18 T
5 F
(/x) 266.37 219.18 T
2 F
(.) 277.17 219.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(xa1+) 86.4 196.11 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 addr1 -- addr2 \051) 301.18 196.11 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 196.11 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x24B) 527.73 196.11 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Increment) 104.4 181.62 T
1 F
(addr1) 143.14 181.62 T
2 F
( by the value of) 164.64 181.62 T
5 F
(/x) 222.88 181.62 T
2 F
(.) 233.68 181.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(xb\337ip) 86.4 158.55 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 oct1 -- oct2 \051) 308.97 158.55 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 158.55 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x24C) 527.18 158.55 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Reverse the bytes within an octlet.) 104.4 144.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(xb\337ips) 86.4 121.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 oaddr len -- \051) 307.57 121.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 121.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x24D) 527.18 121.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Reverse the bytes within each octlet in the given region.) 104.4 106.9 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The region begins at) 104.4 84.7 T
1 F
(oaddr) 180.39 84.7 T
2 F
( and spans) 201.89 84.7 T
1 F
(len) 241.63 84.7 T
2 F
( bytes. The behavior is unde\336ned if) 252.63 84.7 T
1 F
(len) 382.11 84.7 T
2 F
( is not a multiple of) 393.11 84.7 T
5 F
(/x) 465.61 84.7 T
2 F
(.) 476.42 84.7 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 9
%%Page: "4" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 7 Q
0 X
0 0 0 1 0 0 0 K
(_____________________________________________________________________________________________________________________________________) 87.65 67.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(Copyright) 217.71 53.18 T
3 F
(\323) 260.77 53.18 T
2 F
( 1992-1995 IEEE.  All rights reserved.) 268.67 53.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This is an unapproved IEEE Standards Draft, subject to change.) 192.79 41.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 317.9 26.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 72 63 720 R
7 X
V
2 7 Q
0 X
(1) 59.5 715.33 T
(2) 59.5 707.33 T
(3) 59.5 699.33 T
(4) 59.5 691.33 T
(5) 59.5 683.33 T
(6) 59.5 675.33 T
(7) 59.5 667.33 T
(8) 59.5 659.33 T
(9) 59.5 651.33 T
(10) 56 643.33 T
(1) 56.26 635.33 T
(1) 59.5 635.33 T
(12) 56 627.33 T
(13) 56 619.33 T
(14) 56 611.33 T
(15) 56 603.33 T
(16) 56 595.33 T
(17) 56 587.33 T
(18) 56 579.33 T
(19) 56 571.33 T
(20) 56 563.33 T
(21) 56 555.33 T
(22) 56 547.33 T
(23) 56 539.33 T
(24) 56 531.33 T
(25) 56 523.33 T
(26) 56 515.33 T
(27) 56 507.33 T
(28) 56 499.33 T
(29) 56 491.33 T
(30) 56 483.33 T
(31) 56 475.33 T
(32) 56 467.33 T
(33) 56 459.33 T
(34) 56 451.33 T
(35) 56 443.33 T
(36) 56 435.33 T
(37) 56 427.33 T
(38) 56 419.33 T
(39) 56 411.33 T
(40) 56 403.33 T
(41) 56 395.33 T
(42) 56 387.33 T
(43) 56 379.33 T
(44) 56 371.33 T
(45) 56 363.33 T
(46) 56 355.33 T
(47) 56 347.33 T
(48) 56 339.33 T
(49) 56 331.33 T
(50) 56 323.33 T
(51) 56 315.33 T
(52) 56 307.33 T
(53) 56 299.33 T
(54) 56 291.33 T
(55) 56 283.33 T
(56) 56 275.33 T
(57) 56 267.33 T
(58) 56 259.33 T
(59) 56 251.33 T
(60) 56 243.33 T
(61) 56 235.33 T
(62) 56 227.33 T
(63) 56 219.33 T
(64) 56 211.33 T
(65) 56 203.33 T
(66) 56 195.33 T
(67) 56 187.33 T
(68) 56 179.33 T
(69) 56 171.33 T
(70) 56 163.33 T
(71) 56 155.33 T
(72) 56 147.33 T
(73) 56 139.33 T
(74) 56 131.33 T
(75) 56 123.33 T
(76) 56 115.33 T
(77) 56 107.34 T
(78) 56 99.34 T
(79) 56 91.34 T
(80) 56 83.34 T
(81) 56 75.34 T
85.71 741.28 555 755.57 R
7 X
V
2 10 Q
0 X
(IEEE Draft Std P1275.6/D5) 85.71 748.75 T
(March 20, 1995) 490.11 748.75 T
85 743.43 555 743.43 2 L
1 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(xbsplit) 86.4 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 o -- b.lo b.2 b.3 b.4 b.5 b.6 b.7 b.hi \051) 260.19 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x24E) 527.73 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Split an octlet into 8 bytes.) 104.4 698.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The bits of greater signi\336cance than the eight least signi\336cant bits of each of the eight resulting values shall be zero.) 104.4 676.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(xl\337ip) 86.4 653.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 oct1 -- oct2 \051) 308.97 653.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 653.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x24F) 528.29 653.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Reverse the quadlets within an octlet.) 104.4 639.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The bytes within each quadlet are not reversed.) 104.4 617.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(xl\337ips) 86.4 594.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 oaddr len -- \051) 307.57 594.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 594.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x250) 529.4 594.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Reverse the quadlets within each octlet in the given region.) 104.4 580.13 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The bytes within each quadlet are not reversed. The region begins at) 104.4 557.93 T
1 F
(oaddr) 352.59 557.93 T
2 F
( and spans) 374.09 557.93 T
1 F
(len) 413.84 557.93 T
2 F
( bytes. The behavior is unde\336ned if) 424.84 557.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(len) 104.4 549.83 T
2 F
( is not a multiple of) 115.4 549.83 T
5 F
(/x) 187.9 549.83 T
2 F
(.) 198.7 549.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(xlsplit) 86.4 526.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 o -- quad.lo quad.hi \051) 290.75 526.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 526.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x251) 529.4 526.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Split on octlet into 2 quadlets.) 104.4 512.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The bits of greater signi\336cance than the thirty-two least signi\336cant bits of each of the two resulting values shall be zero.) 104.4 490.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(xw\337ip) 86.4 467.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 oct1 -- oct2 \051) 308.97 467.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 467.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x252) 529.4 467.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Reverse the doublets within an octlet.) 104.4 452.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The bytes within each doublet are not reversed.) 104.4 430.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(xw\337ips) 86.4 408.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 oaddr len -- \051) 307.57 408.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 408.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x253) 529.4 408.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Reverse the doublets within each octlet in the given region.) 104.4 393.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (The bytes within each doublet are not reversed. The region begins at) 104.4 371.36 P
1 F
-0.02 (oaddr) 352.87 371.36 P
2 F
-0.02 ( and spans) 374.37 371.36 P
1 F
-0.02 (len) 414.05 371.36 P
2 F
-0.02 ( bytes. The behavior is unde\336ned if) 425.05 371.36 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(len) 104.4 363.25 T
2 F
(is not a multiple of) 117.65 363.25 T
5 F
(/x.) 187.9 363.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(xwsplit) 86.4 340.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 o -- w) 289.09 340.18 T
(.lo w) 318.25 340.18 T
(.2 w) 337.7 340.18 T
(.3 w) 354.37 340.18 T
(.hi \051) 371.04 340.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 340.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x254) 529.4 340.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Split an octlet into 4 doublets.) 104.4 325.7 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( The bits of greater signi\336cance than the sixteen least signi\336cant bits of each of the four resulting values shall be zero.) 104.4 303.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(5.2. 64-Bit Changes) 86.4 266.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(The following FCode function run-time de\336nition is modi\336ed from the core speci\336cation:) 86.4 250.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(b\050lit\051) 86.4 235.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050 -- o \051) 325.49 235.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(F) 494.29 235.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0x10) 534.4 235.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050F: /FCode-num32/ -- \051) 289.93 219.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Numeric literal FCode. Followed by) 104.4 205.33 T
1 F
(FCode-num32) 237.39 205.33 T
2 F
(.) 289.39 205.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Note: See the core speci\336cation for the complete de\336nition of) 104.4 183.15 T
5 F
(b\050lit\051) 328.36 183.15 T
2 F
(.) 360.77 183.15 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(FCode Evaluation:) 104.4 159.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050F: /FCode-num32/ -- \051) 289.93 159.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(The de\336nition is unchanged from the core speci\336cation.) 140.4 144.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Run-T) 104.4 130.99 T
(ime:) 132.56 130.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Return) 140.4 116.5 T
1 F
(o) 167.15 116.5 T
2 F
(, the sign-extended 64-bit number with the same signed numerical value as the) 171.65 116.5 T
1 F
(FCode-num32) 456.61 116.5 T
2 F
(.) 508.6 116.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 10
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 10
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-Roman
%%+ Symbol
%%+ Courier
%%+ Courier-Bold
%%EOF
